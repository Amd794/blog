<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库集成 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E6%88%90/</link><description>Recent content in 数据库集成 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 31 May 2025 09:34:15 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E6%88%90/index.xml" rel="self" type="application/rss+xml"/><item><title>用户认证的魔法配方：从模型设计到密码安全的奇幻之旅</title><link>https://blog.cmdragon.cn/posts/ac5bec89ea446ce4f6b01891f640fbfe/</link><pubDate>Sat, 31 May 2025 09:34:15 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ac5bec89ea446ce4f6b01891f640fbfe/</guid><description>用户认证体系的核心在于用户模型设计和密码安全规范。用户模型需包含唯一用户名、邮箱、加密密码等基础字段，使用SQLAlchemy ORM进行数据库集成。密码存储必须使用强哈希算法（如bcrypt），并自动加盐处理。密码验证流程应包含多级安全检查，确保用户数据安全。数据库集成推荐使用异步驱动提升性能，并通过Alembic进行数据库迁移。常见报错如唯一约束冲突和空对象问题，需在代码中预先检查和处理。</description></item><item><title>异步之舞：FastAPI与MongoDB的深度协奏</title><link>https://blog.cmdragon.cn/posts/b448df6a7d6354d67c30d7a4a46d0c0c/</link><pubDate>Sun, 18 May 2025 19:09:08 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b448df6a7d6354d67c30d7a4a46d0c0c/</guid><description>MongoDB与FastAPI的基础集成方法。首先，环境要求包括Python 3.8+、MongoDB 4.4+、FastAPI 0.95+和Motor 3.1+，并提供了依赖安装命令。其次，通过Motor驱动配置异步数据库连接，使用Pydantic进行数据验证，并实现异步CRUD操作。此外，还展示了聚合管道实践和索引优化策略，如创建单字段索引、复合索引和文本索引。最后，提供了常见报错的解决方案，如ServerSelectionTimeoutError、ValidationError和查询性能低下的处理方法。</description></item><item><title>FastAPI数据库集成与事务管理</title><link>https://blog.cmdragon.cn/posts/0df867e01706fcb9c2e16ea07671a9e4/</link><pubDate>Fri, 18 Apr 2025 00:15:34 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0df867e01706fcb9c2e16ea07671a9e4/</guid><description>FastAPI与SQLAlchemy集成指南：首先配置SQLite数据库连接，创建会话工厂和声明性基类。定义用户模型并映射表结构，使用Pydantic进行数据验证。通过依赖项获取数据库会话，实现用户创建和转账功能。事务控制通过显式开始事务和错误处理确保数据一致性。常见问题包括422验证错误、500服务器错误和完整性错误，需检查请求体、数据库连接和约束。课后Quiz解答事务回滚、SQL注入防护和并发写操作处理。</description></item><item><title>FastAPI与SQLAlchemy数据库集成</title><link>https://blog.cmdragon.cn/posts/c89a99dade2879f73464405270096546/</link><pubDate>Thu, 17 Apr 2025 15:33:34 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c89a99dade2879f73464405270096546/</guid><description>FastAPI与SQLAlchemy的集成通过创建虚拟环境、安装依赖、配置数据库连接、定义数据模型和实现路由来完成。核心模块包括数据库引擎、会话工厂和声明性基类。数据模型通过SQLAlchemy定义，路由通过FastAPI实现，支持创建和查询用户。测试接口通过curl命令进行，常见报错包括表不存在、请求体验证错误和会话不可用。高级配置涉及连接池优化和单元测试。</description></item><item><title>FastAPI与SQLAlchemy数据库集成与CRUD操作</title><link>https://blog.cmdragon.cn/posts/6cfb51390a424ffa1e7d9ceff121fd11/</link><pubDate>Wed, 16 Apr 2025 09:50:57 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6cfb51390a424ffa1e7d9ceff121fd11/</guid><description>FastAPI与SQLAlchemy集成基础包括环境准备、数据库连接配置和模型定义。CRUD操作通过数据访问层封装和路由层实现，确保线程安全和事务管理。常见错误如422请求验证错误通过Pydantic模型和中间件处理。Session生命周期管理依赖注入系统保证每个请求独立会话。常见报错如数据库连接失败和事务回滚通过检查服务状态、验证连接参数和异常处理解决。</description></item><item><title>FastAPI与SQLAlchemy同步数据库集成</title><link>https://blog.cmdragon.cn/posts/b3bb21bb0bd4c0c405cde6e4f370652c/</link><pubDate>Tue, 15 Apr 2025 01:27:37 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b3bb21bb0bd4c0c405cde6e4f370652c/</guid><description>FastAPI与SQLAlchemy集成通过ORM框架实现Python类与数据库表的双向转换。SQLAlchemy提供Core层和ORM层，FastAPI选择ORM层以符合Pythonic风格。声明式模型通过&lt;code>declarative_base()&lt;/code>创建基类，定义数据库结构。数据库引擎通过连接字符串配置，会话管理机制确保操作生命周期。完整示例展示了用户管理API的实现，包括创建和查询接口。常见问题涉及会话报错和数据验证错误，解决方案包括检查表结构和验证请求格式。高级配置技巧包括复合索引优化和事务管理。</description></item><item><title>Node.js 与 PostgreSQL 集成：深入 pg 模块的应用与实践</title><link>https://blog.cmdragon.cn/posts/4798cc064cc3585a3819636b3c23271b/</link><pubDate>Wed, 05 Feb 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4798cc064cc3585a3819636b3c23271b/</guid><description>随着 JavaScript 在服务器端编程中的兴起，Node.js 已成为构建高性能网络应用程序的重要平台。PostgreSQL 则以其强大的特性以及对复杂数据结构的支持，被广泛用作数据库解决方案。在 Node.js 中，pg 模块是实现与 PostgreSQL 连接的主要工具，提供了灵活而高效的数据库操作方式。</description></item><item><title>Python 与 PostgreSQL 集成：深入 psycopg2 的应用与实践</title><link>https://blog.cmdragon.cn/posts/d8496eacd21bf9342264e22050b82cb3/</link><pubDate>Tue, 04 Feb 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d8496eacd21bf9342264e22050b82cb3/</guid><description>PostgreSQL 作为开源关系型数据库的佼佼者，因其强大的功能与性能被广泛应用于各种项目中。而 Python 则因其简洁易用的语法、丰富的库和强大的数据处理能力，成为数据科学与Web开发领域的重要语言。在这两者的结合中，psycopg2 作为 PostgreSQL 数据库与 Python 之间的桥梁，实现了高效的数据交互。</description></item></channel></rss>