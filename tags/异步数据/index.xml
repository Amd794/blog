<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>异步数据 on cmdragon's Blog</title><link>/tags/%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE/</link><description>Recent content in 异步数据 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 06 Oct 2024 00:18:53 +0800</lastBuildDate><atom:link href="/tags/%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 app：suspense：resolve 钩子详解</title><link>/posts/54de24a29ea32b400bc29f8b0b6a46b1/</link><pubDate>Sun, 06 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/54de24a29ea32b400bc29f8b0b6a46b1/</guid><description>app:suspense:resolve 是一个强大的钩子，允许开发者在异步数据解析完成后的最后一步执行必要的处理。通过合理使用该钩子，我们可以优化组件的渲染过程，并提供更好的用户体验。</description></item><item><title>轻松掌握useAsyncData获取异步数据</title><link>/posts/e1b1c62b5975f8ebfa61adc507591cf7/</link><pubDate>Fri, 12 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/e1b1c62b5975f8ebfa61adc507591cf7/</guid><description>摘要：本文详细介绍Nuxt.js中的useAsyncData组合式函数，它用于在服务端渲染(SSR)过程中异步获取数据，确保客户端正确水合，避免重复请求。内容包括基本概念、参数说明（key, handler, options）、示例用法、如何监听参数变化自动刷新数据及返回值详解，展示了在页面组件中使用useAsyncData的具体方式和注意事项。</description></item></channel></rss>