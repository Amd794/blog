<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中间件 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
    <description>Recent content in 中间件 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Jun 2025 16:21:09 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FastAPI日志审计：你的权限系统是否真的安全无虞？</title>
      <link>https://blog.cmdragon.cn/posts/88016f667a665d7c7fd84d0d6f46112d/</link>
      <pubDate>Fri, 20 Jun 2025 16:21:09 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/88016f667a665d7c7fd84d0d6f46112d/</guid>
      <description>FastAPI权限系统的日志审计功能通过三层架构实现，核心价值包括安全合规、故障排查、行为分析和责任追溯。基础日志中间件记录请求信息，完整日志系统包含数据模型设计、日志记录服务和权限系统整合。实际应用案例展示了管理员操作和用户登录的审计实现。常见报错如422验证错误和数据库连接池耗尽，提供了相应的解决方案。优化建议包括数据脱敏、加密存储、索引优化和异步写入。</description>
    </item>
    <item>
      <title>如何在FastAPI中打造坚不可摧的安全防线？</title>
      <link>https://blog.cmdragon.cn/posts/c74023c89591cfdffe2f392c8f3fac7a/</link>
      <pubDate>Fri, 20 Jun 2025 11:33:15 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/c74023c89591cfdffe2f392c8f3fac7a/</guid>
      <description>FastAPI的中间件机制允许对HTTP请求和响应进行拦截处理，适用于身份认证、日志记录、流量控制等场景。通过注册中间件，可以实现IP黑名单拦截、敏感词过滤等功能。集成JWT认证和角色权限验证，确保API的安全性。常见错误如422、401、500等可通过全局异常处理器进行统一处理。最佳实践包括启用HTTPS、使用环境变量管理敏感配置、定期更新依赖库等，以构建企业级安全的API服务。</description>
    </item>
    <item>
      <title>如何在FastAPI中打造一个既安全又灵活的权限管理系统？</title>
      <link>https://blog.cmdragon.cn/posts/277aa1628a2fa9855cdfe5f7c302bd92/</link>
      <pubDate>Mon, 16 Jun 2025 08:17:05 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/277aa1628a2fa9855cdfe5f7c302bd92/</guid>
      <description>FastAPI权限系统通过依赖注入实现三级验证：身份认证、角色验证和权限校验。数据库模型包括用户、角色和权限注册表，支持动态管理权限。权限验证依赖项通过检查用户角色权限进行访问控制，动态路由权限注册允许实时添加权限。中间件实时检查用户权限，确保访问安全。系统处理常见报错如422 Unprocessable Entity和数据库连接超时，确保稳定运行。</description>
    </item>
    <item>
      <title>Nuxt.js 应用中的 vite：serverCreated 事件钩子</title>
      <link>https://blog.cmdragon.cn/posts/29cac3fa837d4b767f01a77d6adc60e1/</link>
      <pubDate>Mon, 18 Nov 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/29cac3fa837d4b767f01a77d6adc60e1/</guid>
      <description>通过使用 vite:serverCreated 钩子，开发者可以在 Vite 服务器创建时执行特定的操作，包括添加中间件和自定义配置。这使得在开发环境中能够快速响应请求及调整服务器行为，从而提升开发效率和用户体验。</description>
    </item>
    <item>
      <title>Nuxt.js 应用中的 server：devHandler 事件钩子详解</title>
      <link>https://blog.cmdragon.cn/posts/e3271aac91ec30fc15176811b001ed48/</link>
      <pubDate>Sat, 26 Oct 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/e3271aac91ec30fc15176811b001ed48/</guid>
      <description>server:devHandler 是 Nuxt.js 中的一个生命周期钩子，它在 Nitro 开发服务器注册开发中间件时被调用。使用这个钩子，开发者可以为开发服务器添加自定义中间件，从而丰富应用的处理逻辑和功能。</description>
    </item>
    <item>
      <title>Nuxt.js 应用中的 app：resolve 事件钩子详解</title>
      <link>https://blog.cmdragon.cn/posts/dd9f1dcc573a828d78d2dc657b7d5c56/</link>
      <pubDate>Thu, 17 Oct 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/dd9f1dcc573a828d78d2dc657b7d5c56/</guid>
      <description>app:resolve 是 Nuxt.js 中的生命周期钩子，在解析 app 实例后调用。这个钩子允许开发者在应用完全初始化后执行一些自定义操作，比如注册插件、设置中间件或进行其他必要配置。</description>
    </item>
    <item>
      <title>Nuxt Kit 中的页面和路由管理</title>
      <link>https://blog.cmdragon.cn/posts/ca15f62138ac0f090f2b9c215756b50a/</link>
      <pubDate>Tue, 17 Sep 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/ca15f62138ac0f090f2b9c215756b50a/</guid>
      <description>摘要：本文介绍了Nuxt Kit中页面和路由管理的高级功能，包括extendPages自定义页面路由、extendRouteRules定义复杂路由逻辑及addRouteMiddleware注册路由中间件。通过这些功能，开发者能够灵活地添加、修改路由，设置缓存、重定向等，并实现访问控制等中间件处理，以提升Web应用的开发效率和可维护性。</description>
    </item>
    <item>
      <title>如何在 Nuxt 中动态设置页面布局</title>
      <link>https://blog.cmdragon.cn/posts/4c7fb169913298de59cbe19fcbaac8d3/</link>
      <pubDate>Sat, 24 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/4c7fb169913298de59cbe19fcbaac8d3/</guid>
      <description>摘要：本文介绍如何在Nuxt框架中通过设置setPageLayout函数动态调整页面布局，包括安装Nuxt、创建不同布局文件及中间件，并通过示例演示如何根据不同路径设置相应布局。</description>
    </item>
    <item>
      <title>使用 navigateTo 实现灵活的路由导航</title>
      <link>https://blog.cmdragon.cn/posts/f68163dee0a38a46b874f4885c661f48/</link>
      <pubDate>Tue, 13 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/f68163dee0a38a46b874f4885c661f48/</guid>
      <description>摘要：本文详细介绍 Nuxt.js 中的 navigateTo 函数，包括基本用法、在路由中间件中使用、导航到外部 URL 和新标签页打开链接的方法，以及参数详解和注意事项，展示了该函数在程序化导航中的灵活性和强大功能。</description>
    </item>
    <item>
      <title>掌握 Nuxt 3 的页面元数据：使用 definePageMeta 进行自定义配置</title>
      <link>https://blog.cmdragon.cn/posts/e0ecc27dccf7a9a8d8bf9a2d4fd3f00b/</link>
      <pubDate>Sun, 11 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/e0ecc27dccf7a9a8d8bf9a2d4fd3f00b/</guid>
      <description>摘要：本文详细介绍Nuxt 3框架中definePageMeta的使用方法，包括如何为页面组件定义元数据，如布局、过渡效果、路由中间件等。通过具体示例展示了如何设置各项元数据属性，以及如何利用definePageMeta定制页面布局和中间件逻辑，增强应用程序的路由管理和页面控制能力。</description>
    </item>
    <item>
      <title>使用 defineNuxtRouteMiddleware 创建路由中间件</title>
      <link>https://blog.cmdragon.cn/posts/9820edb9b255785446531ea7b1ac2269/</link>
      <pubDate>Sat, 10 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/9820edb9b255785446531ea7b1ac2269/</guid>
      <description>本篇文章介绍了如何使用 &lt;code&gt;defineNuxtRouteMiddleware&lt;/code&gt; 创建和应用路由中间件。通过示例演示了如何处理错误页面和身份验证逻辑。随着对 Nuxt.js 中间件的理解，你可以更灵活地控制应用的路由行为，从而提升用户体验。</description>
    </item>
    <item>
      <title>使用 addRouteMiddleware 动态添加中间</title>
      <link>https://blog.cmdragon.cn/posts/0988eb75d14a8fc3b0db7d072206b8a8/</link>
      <pubDate>Sun, 04 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/0988eb75d14a8fc3b0db7d072206b8a8/</guid>
      <description>摘要：文章介绍了Nuxt3中addRouteMiddleware的使用方法，该功能允许开发者动态添加路由中间件，以实现诸如权限检查、动态重定向及路由变化时的特定操作。内容涵盖路由中间件的概念、addRouteMiddleware的语法、参数、使用示例（包括匿名中间件、命名中间件、全局中间件、覆盖现有中间件）及调试技巧。强调了此功能为Nuxt3应用带来的灵活性和便利性。</description>
    </item>
    <item>
      <title>使用 abortNavigation 阻止导航</title>
      <link>https://blog.cmdragon.cn/posts/52bba0b4e019da067ec5092a151c2bce/</link>
      <pubDate>Sat, 03 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/52bba0b4e019da067ec5092a151c2bce/</guid>
      <description>摘要：在Nuxt3中，abortNavigation是一个辅助函数，用于路由中间件内阻止不符合条件的页面访问，实现权限控制、错误处理及动态重定向，提升用户体验和应用可靠性</description>
    </item>
    <item>
      <title>Nuxt.js  路由管理：useRouter 方法与路由中间件应用</title>
      <link>https://blog.cmdragon.cn/posts/5d18db61dc2cdd94535cb31773ea0d63/</link>
      <pubDate>Sun, 28 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/5d18db61dc2cdd94535cb31773ea0d63/</guid>
      <description>摘要：本文介绍了Nuxt 3中useRouter方法及其在路由管理和中间件应用中的功能。内容包括使用useRouter添加、移除路由，获取路由信息，基于History API的操作，导航守卫的实现，如定义匿名、命名及全局中间件，以及使用navigateTo和abortNavigation辅助函数。同时，还涉及Promise和错误处理，最后通过一个示例展示了useRouter的常见用法。</description>
    </item>
    <item>
      <title>初学者必读：如何使用 Nuxt  中间件简化网站开发</title>
      <link>https://blog.cmdragon.cn/posts/5f903ecf37e457f68874ec0e3e7fac54/</link>
      <pubDate>Mon, 24 Jun 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/5f903ecf37e457f68874ec0e3e7fac54/</guid>
      <description>本文概述了Nuxt 3框架的升级特点，对比Nuxt 2，详细解析中间件应用、配置策略与实战示例，涵盖功能、错误管理、优化技巧，并探讨与Nuxt 3核心组件集成方法，给出最佳实践和问题解决方案，强调利用Vue 3和Serverless Functions提升中间件效能。</description>
    </item>
    <item>
      <title>Nuxt 3 路由系统详解：配置与实践指南</title>
      <link>https://blog.cmdragon.cn/posts/3edf792d5e89f8a9aba11ef2a862f865/</link>
      <pubDate>Fri, 21 Jun 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/3edf792d5e89f8a9aba11ef2a862f865/</guid>
      <description>摘要：本文是一份关于Nuxt 3路由系统的详尽指南。它从介绍Nuxt 3的基本概念开始，包括Nuxt 3与Nuxt 2的区别和选择Nuxt 3的理由。然后，它详细解释了安装和配置Nuxt 3的步骤，以及Nuxt 3路由系统的基础知识，如动态路由和嵌套路由。接着，它介绍了路由中间件的作用和编写自定义中间件的方法，并讨论了页面布局、导航链接和页面过渡效果。最后，它涵盖了高级路由技巧，如异步数据获取、错误页面处理和路由守卫，以及实战案例分析，包括博客系统路由设计、电商网站路由设计和多语言支持的路由实现。最后，它讨论了性能优化与安全，包括路由懒加载、路由安全性和性能监控与调试。</description>
    </item>
    <item>
      <title>深入理解Django：中间件与信号处理的艺术</title>
      <link>https://blog.cmdragon.cn/posts/2754fe06b895a4268f93c63424bd4c13/</link>
      <pubDate>Thu, 09 May 2024 18:41:21 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/2754fe06b895a4268f93c63424bd4c13/</guid>
      <description>&lt;img src=&#34;https://static.cmdragon.cn/blog/images/2024_05_09 18_45_49.png@blog&#34; title=&#34;2024_05_09 18_45_49.png&#34; alt=&#34;2024_05_09 18_45_49.png&#34;/&gt;&#xA;&lt;h2 id=&#34;引言&#34;&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;在当今的Web开发领域，Django以其强大的功能、简洁的代码结构和高度的可扩展性，已成为众多开发者的首选框架。Django不仅是一个内容管理系统，更是一个全面的框架，它提供了一套完整的解决方案，包括ORM、模板引擎、URL路由系统和强大的管理后台，使得开发者能够快速构建高质量的Web应用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入学习和理解Django视图层：处理请求与响应</title>
      <link>https://blog.cmdragon.cn/posts/3476dd0354c04bdd0485e1bbe91ccb1b/</link>
      <pubDate>Sat, 04 May 2024 17:47:55 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/3476dd0354c04bdd0485e1bbe91ccb1b/</guid>
      <description>&lt;img src=&#34;https://static.cmdragon.cn/blog/images/2024_05_04 17_51_09.png@blog&#34; title=&#34;2024_05_04 17_51_09.png&#34; alt=&#34;2024_05_04 17_51_09.png&#34;/&gt;&#xA;## 第一章：Django框架概述&#xA;&lt;h3 id=&#34;11-什么是django&#34;&gt;1.1 什么是Django？&lt;/h3&gt;&#xA;&lt;p&gt;Django是一个高级的Python Web框架，它鼓励快速开发和干净、实用的设计。它由Wall Street&#xA;Journal的程序员在2005年开发，用于他们的新闻网站。自那时起，Django已经成为全球范围内广泛使用的Web框架之一。&lt;/p&gt;</description>
    </item>
    <item>
      <title>快速了解Django：核心概念解析与实践指南</title>
      <link>https://blog.cmdragon.cn/posts/2b2b6760669b85aaf90735be36159327/</link>
      <pubDate>Wed, 01 May 2024 20:31:41 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/2b2b6760669b85aaf90735be36159327/</guid>
      <description>&lt;img src=&#34;https://static.cmdragon.cn/blog/images/2024_05_01 20_39_00.png@blog&#34; title=&#34;2024_05_01 20_39_00.png&#34; alt=&#34;2024_05_01 20_39_00.png&#34;/&gt;&#xA;&lt;h2 id=&#34;第一章django简介&#34;&gt;第一章：&lt;strong&gt;Django简介&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;背景和发展历程&#34;&gt;&lt;strong&gt;背景和发展历程：&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Django是一个开放源代码的Web应用框架，由Lawrence&#xA;Journal-World开发并于2005年发布。最初是为了满足新闻网站的需求而开发的，后来成为一个功能强大且灵活的Web开发框架。Django得到了全球开发者的广泛认可和使用，目前被许多知名网站和公司所采用。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
