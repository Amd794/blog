<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>生命周期 on cmdragon's Blog</title><link>/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><description>Recent content in 生命周期 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 15 Nov 2024 00:18:53 +0800</lastBuildDate><atom:link href="/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 schema：written 事件钩子详解</title><link>/posts/bbc449caa5e31f1084aed152323c2758/</link><pubDate>Fri, 15 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/bbc449caa5e31f1084aed152323c2758/</guid><description>schema:written 钩子是 Vite 提供的一种生命周期钩子，在模式写入完成后调用。通过这个钩子，开发者可以在配置被正式应用之后执行一些后续操作，比如记录日志、初始化服务或调整系统状态。本文将深入探讨该钩子的用法及多种应用场景。</description></item><item><title>Nuxt.js 应用中的 nitro：build：public-assets 事件钩子详解</title><link>/posts/271508b42bc005f41e4fa31830a84e83/</link><pubDate>Tue, 05 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/271508b42bc005f41e4fa31830a84e83/</guid><description>nitro:build:public-assets 是 Nuxt 3 中的一个生命周期钩子，在复制公共资产之后调用。该钩子使开发者能够在构建 Nitro 服务器之前，对公共资产进行修改或处理，比如添加、删除或修改文件。</description></item><item><title>Nuxt.js 应用中的 nitro：build：before 事件钩子详解</title><link>/posts/a2820600faa85b49967d91cb7617c284/</link><pubDate>Mon, 04 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/a2820600faa85b49967d91cb7617c284/</guid><description>nitro:build:before 是 Nuxt 3 中的一个生命周期钩子，专门用于在构建 Nitro 实例之前调用。这个钩子允许开发者在 Nitro 实例构建之前执行特定的操作，从而对构建过程进行定制和优化。</description></item><item><title>Nuxt.js 应用中的 nitro：init 事件钩子详解</title><link>/posts/a8d7636d5643bafcee2bcc1767dcfa3b/</link><pubDate>Sun, 03 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/a8d7636d5643bafcee2bcc1767dcfa3b/</guid><description>nitro:init 是 Nuxt 3 中的一个生命周期钩子，在 Nitro 初始化完成后被调用。这个钩子允许开发者注册 Nitro 钩子，并直接与 Nitro 进行交互。这种灵活性使得开发者能够增强和自定义 Nitro 的行为，以适应特定的需求。</description></item><item><title>Nuxt.js 应用中的 nitro：config 事件钩子详解</title><link>/posts/927aa434dc4886c8c357c9000e072b19/</link><pubDate>Sat, 02 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/927aa434dc4886c8c357c9000e072b19/</guid><description>nitro:config 是 Nuxt 3 中的一个生命周期钩子，允许开发者在初始化 Nitro 之前自定义 Nitro 的配置。Nitro 是 Nuxt 3 的服务器引擎，负责处理请求、渲染响应和处理其他后端逻辑。通过使用 nitro:config 钩子，开发者可以灵活地调整 Nitro 的行为，以满足特定的需求。</description></item><item><title>Nuxt.js 应用中的 components：extend 事件钩子详解</title><link>/posts/1189b069abd2cfe9869abbbb4f7f340b/</link><pubDate>Fri, 01 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/1189b069abd2cfe9869abbbb4f7f340b/</guid><description>components:extend 是 Nuxt.js 中的一个生命周期钩子，允许开发者扩展新的组件到项目中。通过这个钩子，开发者可以动态地添加额外的组件，从而增强项目的功能和灵活性。</description></item><item><title>Nuxt.js 应用中的 imports：sources 事件钩子详解</title><link>/posts/cf392e5071f22b4179114cece7e0e8b1/</link><pubDate>Sun, 27 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/cf392e5071f22b4179114cece7e0e8b1/</guid><description>imports:sources 是 Nuxt.js 的一个生命周期钩子，用于在模块设置过程中执行。开发者可以利用这个钩子来扩展模块的源，方便地管理依赖和模块化配置。</description></item><item><title>Nuxt.js 应用中的 pages：extend 事件钩子详解</title><link>/posts/22eb7478a08b6f78043cd5fae24c7ad4/</link><pubDate>Fri, 25 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/22eb7478a08b6f78043cd5fae24c7ad4/</guid><description>pages:extend 是 Nuxt.js 中的一个生命周期钩子，在页面路由解析完成后被调用。这个钩子允许开发者添加、修改或删除路由配置，为自定义页面路由的管理提供灵活性，进而影响整个应用的导航。</description></item><item><title>Nuxt.js 应用中的 builder：watch 事件钩子详解</title><link>/posts/4cfe5f35f1a903646731a6c05a54d1dc/</link><pubDate>Thu, 24 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/4cfe5f35f1a903646731a6c05a54d1dc/</guid><description>builder:watch 是 Nuxt.js 中的一个生命周期钩子，在开发环境的构建过程期间被调用。它允许开发者在监视到项目中的文件或目录发生变化时，执行特定的操作。这对于实现自定义构建过程或响应代码更改非常有用，使得开发体验更为高效。</description></item><item><title>Nuxt.js 应用中的 builder：generateApp 事件钩子详解</title><link>/posts/1191139984bd4df519af6d16a616949e/</link><pubDate>Wed, 23 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/1191139984bd4df519af6d16a616949e/</guid><description>builder:generateApp 是 Nuxt.js 的一个生命周期钩子，它在生成应用程序之前被调用。这个钩子为开发者提供了一个机会，可以在生成过程开始之前修改或配置生成的应用程序的选项。这对于优化生成过程或注入特定配置非常有</description></item><item><title>Nuxt.js 应用中的 build：done 事件钩子详解</title><link>/posts/7b79085749b7f156ed36cf16fca42310/</link><pubDate>Mon, 21 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/7b79085749b7f156ed36cf16fca42310/</guid><description>build:done 是 Nuxt.js 的一个生命周期钩子，它在 Nuxt 应用的打包构建器完成运行后被调用。这个钩子为开发者提供了一个在构建过程结束后执行特定逻辑的机会，可以用于处理构建完成后的操作，如清理、通知、发布等。</description></item><item><title>Nuxt.js 应用中的 app：templates 事件钩子详解</title><link>/posts/f5146828ba00abf205274dba6d354783/</link><pubDate>Fri, 18 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/f5146828ba00abf205274dba6d354783/</guid><description>app:templates 是 Nuxt.js 中一个强大的生命周期钩子，它在 NuxtApp 生成过程中调用。这一钩子允许开发者自定义、修改或添加新文件到构建目录，提供了极大的灵活性和扩展性。</description></item><item><title>Nuxt.js 应用中的 app：resolve 事件钩子详解</title><link>/posts/dd9f1dcc573a828d78d2dc657b7d5c56/</link><pubDate>Thu, 17 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/dd9f1dcc573a828d78d2dc657b7d5c56/</guid><description>app:resolve 是 Nuxt.js 中的生命周期钩子，在解析 app 实例后调用。这个钩子允许开发者在应用完全初始化后执行一些自定义操作，比如注册插件、设置中间件或进行其他必要配置。</description></item><item><title>Nuxt.js 应用中的 modules：done 事件钩子详解</title><link>/posts/6427994cfc82edf8e740eb2b3edcead4/</link><pubDate>Wed, 16 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/6427994cfc82edf8e740eb2b3edcead4/</guid><description>modules:done 是 Nuxt.js 中一个重要的生命周期钩子，在 Nuxt 应用初始化期间触发。该钩子允许开发者在用户定义的模块安装完成后执行特定操作，如初始化后续配置或执行其他逻辑。</description></item><item><title>Nuxt.js 应用中的 modules：before 事件钩子详解</title><link>/posts/62721fbcf90812e7cb4f8192dad8c51b/</link><pubDate>Tue, 15 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/62721fbcf90812e7cb4f8192dad8c51b/</guid><description>modules:before 是 Nuxt.js 中一个重要的生命周期钩子，在 Nuxt 应用初始化期间被触发。该钩子允许开发者在安装用户定义的模块之前执行某些操作，如配置或环境设置。</description></item><item><title>Nuxt.js 应用中的 close 事件钩子详解</title><link>/posts/e16f122a2b0ff1157b75ce6cc609f9f1/</link><pubDate>Sun, 13 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/e16f122a2b0ff1157b75ce6cc609f9f1/</guid><description>close 钩子是 Nuxt.js 中一个重要的生命周期事件，它在 Nuxt 实例正常关闭时被调用。当 Nuxt 应用的生命周期即将结束时，这一钩子会被触发，让开发者能够执行一些必要的清理操作或保存状态。</description></item><item><title>Nuxt.js 应用中的 ready 事件钩子详解</title><link>/posts/bf27341c381e447f9e64e2d4e9b36db4/</link><pubDate>Sat, 12 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/bf27341c381e447f9e64e2d4e9b36db4/</guid><description>ready 钩子是 Nuxt.js 中一个重要的生命周期事件，它在 Nuxt 实例初始化完成后被调用。当 Nuxt 已经准备好并准备开始处理请求或渲染页面时，这一钩子会被触发。</description></item><item><title>Nuxt.js 应用中的 app：mounted 钩子详解</title><link>/posts/0655a1f20f3c7d66e6b41c961df3103e/</link><pubDate>Sat, 05 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/0655a1f20f3c7d66e6b41c961df3103e/</guid><description>app:mounted 钩子在 Vue 应用的生命周期中扮演着重要角色，提供了在组件被挂载后的执行时机。通过合理利用这个钩子，我们能够提高组件的交互性、用户体验以及性能优化。确保在其内部代码的健壮性和清理机制，将为你的 Vue 应用带来显著的提升。</description></item><item><title>Nuxt.js 应用中的 app：beforeMount 钩子详解</title><link>/posts/a84be8813f0e28c0d673fcfc005a023e/</link><pubDate>Fri, 04 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/a84be8813f0e28c0d673fcfc005a023e/</guid><description>app:beforeMount 是一个强大的钩子，允许开发者在用户界面挂载前控制应用的初始化过程。通过有效利用这一钩子，我们可以优化应用的用户体验，保持状态一致性并高效加载必要数据。合适的实现和良好的设计都能极大提高应用的可用性和性能。</description></item><item><title>Nuxt.js 应用中的 app：rendered 钩子详解</title><link>/posts/ff851c9049725c29ffd402e2d1f008e2/</link><pubDate>Wed, 02 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/ff851c9049725c29ffd402e2d1f008e2/</guid><description>摘要：本文详细介绍了 Nuxt.js 应用程序中的 app:rendered 钩子，包括其定义、调用时机、上下文信息以及通过实际案例展示如何记录性能和发送日志到服务器。</description></item><item><title>理解 Vue 的 setup 应用程序钩子</title><link>/posts/6ed51fb844f1329c26155ff2a6ea4cd2/</link><pubDate>Mon, 30 Sep 2024 00:18:53 +0800</pubDate><guid>/posts/6ed51fb844f1329c26155ff2a6ea4cd2/</guid><description>摘要：本文详细介绍了Vue 3中setup函数的应用，包括其概念、特性、使用方法及重要性。setup函数作为组合API的核心，在组件实例化前被调用，用于设置响应式状态、计算属性、方法和生命周期钩子，支持在SSR和CSR中使用。</description></item><item><title>深入理解 Nuxt.js 中的 app：error：cleared 钩子</title><link>/posts/b77d43b884a1b04d68230c5963b5e15a/</link><pubDate>Sat, 28 Sep 2024 00:18:53 +0800</pubDate><guid>/posts/b77d43b884a1b04d68230c5963b5e15a/</guid><description>Nuxt.js 中的 app:error:cleared 钩子的用途及其实现方式。这个钩子为开发者提供了一种优雅的方式来处理错误清除后的状态恢复和用户反馈。</description></item><item><title>深入理解 Nuxt 中的 app created 钩子</title><link>/posts/1e03ef2ae917ee8f6e9c9e63cdb6174d/</link><pubDate>Thu, 26 Sep 2024 00:18:53 +0800</pubDate><guid>/posts/1e03ef2ae917ee8f6e9c9e63cdb6174d/</guid><description>摘要：本文深入介绍了 Nuxt.js 中的 app:created 钩子，包括其触发时机、用途及使用方法。通过创建 Nuxt 项目、编写插件实现钩子、注册全局组件和配置，展示了在应用初始化阶段执行相关逻辑的实践过程。文中还提供了步骤说明和示例代码，帮助开发者理解如何在项目中有效利用此钩子进行全局设置。</description></item><item><title>Nuxt3 的生命周期和钩子函数（十一）</title><link>/posts/1229fdac282a0baba2576f73c41b4f0e/</link><pubDate>Fri, 05 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/1229fdac282a0baba2576f73c41b4f0e/</guid><description>摘要：本文详细介绍了Nuxt3中几个关键的生命周期钩子和它们的使用方法，包括webpack:done用于Webpack编译完成后执行操作，webpack:progress监听编译进度，render:response和render:html分别在响应发送前后修改响应内容，以及render:island针对岛屿组件的HTML渲染前的修改，提供了具体的示例代码和应用情景。</description></item><item><title>Nuxt3 的生命周期和钩子函数（十）</title><link>/posts/d5c00a7775a1fc1b83ecfb6dd7136fa7/</link><pubDate>Thu, 04 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/d5c00a7775a1fc1b83ecfb6dd7136fa7/</guid><description>摘要：本文详细介绍了Nuxt3框架中的五个webpack钩子函数：webpack:configResolved用于在webpack配置解析后读取和修改配置；webpack:compile在编译开始前调用，可修改编译选项；webpack:compiled在编译完成后调用，可处理编译结果；webpack:change在开发模式下文件变化时触发，监控文件更改；webpack:error在编译出错时捕获错误信息，以便于错误处理。并通过示例代码展示了各钩子的使用方法。</description></item><item><title>Nuxt3 的生命周期和钩子函数（九）</title><link>/posts/b80c188353cc5f1e84aad57aea45c848/</link><pubDate>Wed, 03 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/b80c188353cc5f1e84aad57aea45c848/</guid><description>摘要：本文介绍了Nuxt3中与Vite相关的五个生命周期钩子，包括vite:extend、vite:extendConfig、vite:configResolved、vite:serverCreated和vite:compiled，展示了如何在每个钩子中扩展Vite配置、读取配置、添加中间件和处理编译事件。每个钩子都有详细的描述和示例代码，帮助开发者在Nuxt应用中实现自定义构建逻辑和服务器配置。</description></item><item><title>Nuxt3 的生命周期和钩子函数（七）</title><link>/posts/a65c336a08214aa264f38f893fd9fe64/</link><pubDate>Mon, 01 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/a65c336a08214aa264f38f893fd9fe64/</guid><description>摘要：文章阐述了Nuxt3中Nitro生命周期钩子的使用，如nitro:config自定义配置、nitro:init注册构建钩子、nitro:build:before/after调整构建设置及处理公共资产、prerender:routes扩展预渲染路由、build:error捕获构建错误，通过示例代码指导开发者优化项目构建与部署流程。</description></item><item><title>Nuxt3 的生命周期和钩子函数（八）</title><link>/posts/627bff83be4d55aabeccd96fdb6bab35/</link><pubDate>Sun, 30 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/627bff83be4d55aabeccd96fdb6bab35/</guid><description>摘要：本文介绍了Nuxt3框架中的一些重要生命周期钩子，如prepare:types用于自定义TypeScript配置和类型声明，listen用于在开发服务器启动时注册自定义事件监听器，schema:extend和schema:resolved用于扩展和处理已解析的模式，以及schema:beforeWrite和schema:written分别在模式写入前后的处理。通过示例代码展示了如何在Nuxt插件中利用这些钩子进行自定义操作。</description></item><item><title>Nuxt3 的生命周期和钩子函数（六）</title><link>/posts/16e6c55234a5fd9caeea0fcff47f8b6d/</link><pubDate>Sun, 30 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/16e6c55234a5fd9caeea0fcff47f8b6d/</guid><description>摘要：本文深入解析了Nuxt3框架中的多个核心生命周期钩子和组件注册功能，包括imports:sources、imports:extend、imports:context、imports:dirs、components:dirs及components:extend，通过实例代码指导开发者如何在不同场景下有效运用这些钩子函数来扩展导入源、优化组件导入流程及增强项目结构灵活性。</description></item><item><title>Nuxt3 的生命周期和钩子函数（五）</title><link>/posts/9ac29e7085b44b322682133dd07511c8/</link><pubDate>Sat, 29 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/9ac29e7085b44b322682133dd07511c8/</guid><description>摘要：本文详细介绍了Nuxt3中的六个核心生命周期钩子及其用法，包括build:done、build:manifest、builder:generateApp、builder:watch、pages:extend和server:devHandler:handler。内容涵盖各钩子的调用时机、参数、环境、功能描述及具体示例代码，帮助开发者深入理解如何在Nuxt应用的构建、运行、开发及部署等阶段自定义行为和逻辑。</description></item><item><title>Nuxt3 的生命周期和钩子函数（四）</title><link>/posts/7ce28296234629061401246df9db573b/</link><pubDate>Fri, 28 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/7ce28296234629061401246df9db573b/</guid><description>概述了Nuxt3的六个关键生命周期钩子用途：modules:before至build:before，指导如何在应用初始化、模块管理、配置解析、模板处理及构建前执行自定义操作，附带实例代码，强化Nuxt应用的灵活性和可控性。</description></item><item><title>Nuxt3 的生命周期和钩子函数（三）</title><link>/posts/5f1ddd6ac7a67110834fe55de143c90d/</link><pubDate>Thu, 27 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/5f1ddd6ac7a67110834fe55de143c90d/</guid><description>摘要：概述了Nuxt3的关键生命周期钩子用途，如page:finish用于页面加载后处理，page:transition:finish处理过渡效果完成，kit:compatibility扩展兼容性检查，ready标示应用启动就绪，close执行应用关闭清理，及restart控制应用重启流程，附带示例代码</description></item><item><title>Nuxt3 的生命周期和钩子函数（二）</title><link>/posts/035ad4b6880c8ceb996e156237ce5d89/</link><pubDate>Wed, 26 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/035ad4b6880c8ceb996e156237ce5d89/</guid><description>摘要：本文深入介绍了Nuxt.js框架中几个关键的生命周期钩子函数，包括app:redirected（SSR环境下重定向前触发）、app:beforeMount（CSR下应用挂载前）、app:mounted（CSR下Vue应用在浏览器挂载时）、app:suspense:resolve（CSR中Suspense组件解析子组件完成时）以及link:prefetch（CSR中NuxtLink预取链接时）和page:start（CSR页面渲染启动时）。通过代码示例展示了如何利用defineNuxtPlugin定义插件并借助nuxtApp.hook监听这些钩子以执行特定任务，强调了各钩子的应用场景及在客户端和服务器端的不同行为。</description></item><item><title>Nuxt3 的生命周期和钩子函数（一）</title><link>/posts/5fa69707f657db97640ee64788afbd03/</link><pubDate>Tue, 25 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/5fa69707f657db97640ee64788afbd03/</guid><description>摘要：本文是关于Nuxt3的系列文章之一，主要探讨Nuxt3的生命周期和钩子函数，引导读者深入了解其在前端开发中的应用。文章提供了往期相关文章链接，涉及Nuxt中间件、Composables、状态管理、路由系统、组件开发等多个方面，帮助读者全面掌握Nuxt3框架的特性和实践技巧。</description></item><item><title>Nuxt 3组件开发与管理</title><link>/posts/cc7cd2c85be6f573dbbab01a25b78ed7/</link><pubDate>Thu, 20 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/cc7cd2c85be6f573dbbab01a25b78ed7/</guid><description>摘要：本文深入探讨了Nuxt 3的组件开发与管理，从基础概念、安装配置、目录结构、组件分类与开发实践、生命周期与优化，到测试与维护策略。详细介绍了Nuxt 3的核心特点，如服务器端渲染（SSR）、静态站点生成（SSG）以及与Vue生态系统的无缝集成。文章以Nuxt 3为基础，指导开发者如何高效构建高性能、可维护的Vue应用程序。内容涵盖了基本组件的定义与分类、独立组件与函数式组件的示例、Props和Slots的使用、Composition API的引入，以及组件的生命周期与优化方法。同时，文章还提供了组件开发的实践案例，包括自定义组件开发、异步加载组件、事件与方法的使用，以及组件测试与文档化指南。通过结构化的目录组织与详细的代码示例，旨在帮助开发者高效管理与维护组件，实现代码的复用与模块化。</description></item><item><title>探索Web Components</title><link>/posts/ee54c59d94326d97aed8cbb536a8dc0b/</link><pubDate>Sun, 16 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/ee54c59d94326d97aed8cbb536a8dc0b/</guid><description>这篇文章介绍了Web Components技术，它允许开发者创建可复用、封装良好的自定义HTML元素，并直接在浏览器中运行，无需依赖外部库。通过组合HTML模板、Shadow DOM、自定义元素和HTML imports，Web Components增强了原生DOM的功能，提高了组件化开发的封装性和可维护性，同时支持组件的生命周期管理和高级设计模式，有利于提升网页应用的性能和开发效率。</description></item><item><title>vue3组件通信与props</title><link>/posts/038af0ce9a794d8c6df8b4ab08bd2c65/</link><pubDate>Fri, 31 May 2024 09:00:57 +0800</pubDate><guid>/posts/038af0ce9a794d8c6df8b4ab08bd2c65/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_05_31 21_06_03.png@blog" title="2024_05_31 21_06_03.png" alt="2024_05_31 21_06_03.png"/>
&lt;h2 id="vue-3-组件基础">Vue 3 组件基础&lt;/h2>
&lt;p>在 Vue 3 中，组件是构建用户界面的基本单位，它们是可复用的 Vue 实例，具有自己的模板、数据、方法等。组件化开发使得代码更加模块化，易于管理和维护。以下是 Vue 3 组件的基础知识：&lt;/p></description></item><item><title>Vue 组件生命周期：探索钩子</title><link>/posts/08a25c29ceed14c92c89beb55563e922/</link><pubDate>Mon, 27 May 2024 18:42:38 +0800</pubDate><guid>/posts/08a25c29ceed14c92c89beb55563e922/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_05_27 18_48_19.png@blog" title="2024_05_27 18_48_19.png" alt="2024_05_27 18_48_19.png"/>
&lt;h2 id="第-1-章介绍与背景">第 1 章：介绍与背景&lt;/h2>
&lt;p>1.1 什么是 Vue 组件生命周期？&lt;/p>
&lt;p>Vue 组件生命周期是指 Vue 组件从创建、运行到销毁的整个过程，共分为 8 个阶段：&lt;/p>
&lt;ol>
&lt;li>创建前（beforeCreate）&lt;/li>
&lt;li>创建后（created）&lt;/li>
&lt;li>载入前（beforeMount）&lt;/li>
&lt;li>载入后（mounted）&lt;/li>
&lt;li>更新前（beforeUpdate）&lt;/li>
&lt;li>更新后（updated）&lt;/li>
&lt;li>销毁前（beforeDestroy）&lt;/li>
&lt;li>销毁后（destroyed）&lt;/li>
&lt;/ol>
&lt;p>在每个阶段，Vue 框架都提供了特定的钩子函数，开发人员可以在这些函数中编写自定义的代码，从而实现对组件生命周期的控制和管理。&lt;/p></description></item></channel></rss>