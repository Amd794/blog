<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>异步加载 on cmdragon's Blog</title><link>/tags/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</link><description>Recent content in 异步加载 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 19 Jul 2024 00:18:53 +0800</lastBuildDate><atom:link href="/tags/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 useLazyAsyncData 提升数据加载体验</title><link>/posts/954e473bea4ec122949c8c7d84d32c95/</link><pubDate>Fri, 19 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/954e473bea4ec122949c8c7d84d32c95/</guid><description>摘要：本文介绍useLazyAsyncData函数在Nuxt 3中的使用，以提升数据加载体验。此函数支持异步获取数据并在组件中处理挂起与错误状态，通过pending、error和data属性实现动态加载反馈。示例展示了如何创建Nuxt 3项目并利用该函数获取计数器数据，包括前端代码实现及简易后端模拟。</description></item><item><title>Nuxt框架中内置组件详解及使用指南（一）</title><link>/posts/214c7ef07a7b90e1787f10ea626320e3/</link><pubDate>Sat, 06 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/214c7ef07a7b90e1787f10ea626320e3/</guid><description>本文详细介绍了Nuxt框架中的两个内置组件&lt;ClientOnly>和&lt;NuxtClientFallback>的使用方法与功能。&lt;ClientOnly>确保包裹的内容仅在客户端渲染，适用于处理浏览器特定功能或异步数据加载。而&lt;NuxtClientFallback>是一个实验性组件，用于在SSR过程中遇到子组件错误时，在客户端渲染备选内容，提高应用稳定性。文章通过示例代码展示了这两个组件的具体应用方式和相关属性配置。</description></item><item><title>Vue.js 动态组件与异步组件</title><link>/posts/49a4391c514f2d1869c16793eafff0f0/</link><pubDate>Sun, 02 Jun 2024 09:08:50 +0800</pubDate><guid>/posts/49a4391c514f2d1869c16793eafff0f0/</guid><description>&lt;img src="/images/2024_06_02 21_12_15.png" title="2024_06_02 21_12_15.png" alt="2024_06_02 21_12_15.png"/>
&lt;h2 id="第1章-vuejs-简介">第1章 Vue.js 简介&lt;/h2>
&lt;h3 id="11-vuejs-概述">1.1 Vue.js 概述&lt;/h3>
&lt;p>Vue.js 是一个渐进式的JavaScript框架，用于构建用户界面。它由前谷歌工程师尤雨溪（Evan You）创建，并于2014年发布。Vue.js 的设计目标是易于上手，同时提供强大的功能来构建复杂的单页应用程序（SPA）。&lt;/p></description></item><item><title>Vue 组件生命周期：探索钩子</title><link>/posts/08a25c29ceed14c92c89beb55563e922/</link><pubDate>Mon, 27 May 2024 18:42:38 +0800</pubDate><guid>/posts/08a25c29ceed14c92c89beb55563e922/</guid><description>&lt;img src="/images/2024_05_27 18_48_19.png" title="2024_05_27 18_48_19.png" alt="2024_05_27 18_48_19.png"/>
&lt;h2 id="第-1-章介绍与背景">第 1 章：介绍与背景&lt;/h2>
&lt;p>1.1 什么是 Vue 组件生命周期？&lt;/p>
&lt;p>Vue 组件生命周期是指 Vue 组件从创建、运行到销毁的整个过程，共分为 8 个阶段：&lt;/p>
&lt;ol>
&lt;li>创建前（beforeCreate）&lt;/li>
&lt;li>创建后（created）&lt;/li>
&lt;li>载入前（beforeMount）&lt;/li>
&lt;li>载入后（mounted）&lt;/li>
&lt;li>更新前（beforeUpdate）&lt;/li>
&lt;li>更新后（updated）&lt;/li>
&lt;li>销毁前（beforeDestroy）&lt;/li>
&lt;li>销毁后（destroyed）&lt;/li>
&lt;/ol>
&lt;p>在每个阶段，Vue 框架都提供了特定的钩子函数，开发人员可以在这些函数中编写自定义的代码，从而实现对组件生命周期的控制和管理。&lt;/p></description></item></channel></rss>