<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>令牌验证 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E4%BB%A4%E7%89%8C%E9%AA%8C%E8%AF%81/</link>
    <description>Recent content in 令牌验证 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 24 Jun 2025 08:23:40 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E4%BB%A4%E7%89%8C%E9%AA%8C%E8%AF%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何在FastAPI中玩转跨服务权限校验的魔法？</title>
      <link>https://blog.cmdragon.cn/posts/3308559e2761ceaaa2fcbdd39fc29e18/</link>
      <pubDate>Tue, 24 Jun 2025 08:23:40 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/3308559e2761ceaaa2fcbdd39fc29e18/</guid>
      <description>FastAPI跨服务权限校验通过可信令牌颁发、令牌传播机制和分布式验证实现微服务架构安全。核心组件包括令牌生成服务和验证逻辑，使用JWT进行身份认证和权限控制。服务间调用通过HTTPX自动携带令牌，确保权限上下文传递。实践案例展示了电商订单流程中的跨服务操作。常见报错涉及无效签名和权限不足，建议使用短期令牌和权限枚举。进阶安全措施包括双因素令牌、请求签名和令牌绑定，增强系统安全性。</description>
    </item>
    <item>
      <title>JWT令牌如何在FastAPI中实现安全又高效的生成与验证？</title>
      <link>https://blog.cmdragon.cn/posts/df4422756c7a081ea0f7f16c6364d8b2/</link>
      <pubDate>Tue, 10 Jun 2025 09:02:35 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/df4422756c7a081ea0f7f16c6364d8b2/</guid>
      <description>JWT（JSON Web Token）是一种用于安全传递声明信息的开放标准，由头部、载荷和签名三部分组成。在FastAPI中，JWT常用于用户身份认证、API授权和跨服务通信。通过&lt;code&gt;python-jose&lt;/code&gt;库生成和验证JWT，核心步骤包括配置安全参数、生成访问令牌、实现登录接口和验证机制。令牌生成时需设置过期时间以防止长期盗用，验证时通过中间件检查令牌的有效性。此外，可通过刷新令牌机制更新访问令牌，确保系统的安全性和用户体验。</description>
    </item>
  </channel>
</rss>
