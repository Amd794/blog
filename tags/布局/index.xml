<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>布局 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%B8%83%E5%B1%80/</link><description>Recent content in 布局 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 28 Aug 2024 00:18:53 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%B8%83%E5%B1%80/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 nuxi add 快速创建 Nuxt 应用组件</title><link>https://blog.cmdragon.cn/posts/917849288e8e1cc200cdd37a60e48387/</link><pubDate>Wed, 28 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/917849288e8e1cc200cdd37a60e48387/</guid><description>通过使用 nuxi add 命令，你可以快速创建 Nuxt 应用中的各种实体，如组件、页面、布局等。这可以极大地提高开发效率，减少手动创建文件的工作量。希望本文的示例和解释能够帮助你更好地使用 nuxi add 命令来加速你的开发过程。</description></item><item><title>如何在 Nuxt 中动态设置页面布局</title><link>https://blog.cmdragon.cn/posts/4c7fb169913298de59cbe19fcbaac8d3/</link><pubDate>Sat, 24 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4c7fb169913298de59cbe19fcbaac8d3/</guid><description>摘要：本文介绍如何在Nuxt框架中通过设置setPageLayout函数动态调整页面布局，包括安装Nuxt、创建不同布局文件及中间件，并通过示例演示如何根据不同路径设置相应布局。</description></item><item><title>掌握 Nuxt 3 的页面元数据：使用 definePageMeta 进行自定义配置</title><link>https://blog.cmdragon.cn/posts/e0ecc27dccf7a9a8d8bf9a2d4fd3f00b/</link><pubDate>Sun, 11 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e0ecc27dccf7a9a8d8bf9a2d4fd3f00b/</guid><description>摘要：本文详细介绍Nuxt 3框架中definePageMeta的使用方法，包括如何为页面组件定义元数据，如布局、过渡效果、路由中间件等。通过具体示例展示了如何设置各项元数据属性，以及如何利用definePageMeta定制页面布局和中间件逻辑，增强应用程序的路由管理和页面控制能力。</description></item><item><title>Tailwind CSS 实战指南：快速构建响应式网页设计</title><link>https://blog.cmdragon.cn/posts/3ad65521e550614a7025c22f6ad566a3/</link><pubDate>Wed, 12 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/3ad65521e550614a7025c22f6ad566a3/</guid><description>这篇文章介绍了Tailwind CSS框架的特点与优势，包括其作为实用性的CSS框架如何通过预设的样式类实现快速布局和设计，以及如何在不牺牲响应式和自适应性的同时减少开发时间。此外，还提及了框架的可定制性，允许开发者轻松创建符合项目需求的样式规则，从而提高前端开发效率。</description></item></channel></rss>