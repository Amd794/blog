<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nuxt.js on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/Nuxt.js/</link><description>Recent content in Nuxt.js on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 03 Dec 2024 00:18:53 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/Nuxt.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 error 事件钩子</title><link>https://blog.cmdragon.cn/posts/759227261e4312110b135b98dc240788/</link><pubDate>Tue, 03 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/759227261e4312110b135b98dc240788/</guid><description>在任何 Web 应用中，错误是不可避免的。无论是网络请求失败、服务器错误、还是用户输入不合法，这些错误都可能影响用户体验和应用的稳定性。为了提升恢复能力和用户体验，Nuxt.js 提供了 error 钩子，允许开发者在应用中集中处理错误，记录错误信息，并根据具体情况进行适当的处理。</description></item><item><title>Nuxt.js 应用中的 render：response 事件钩子</title><link>https://blog.cmdragon.cn/posts/b12508be9c4fb6b8f0499948ecd68ad9/</link><pubDate>Fri, 29 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b12508be9c4fb6b8f0499948ecd68ad9/</guid><description>render:response 是一个在 Nuxt.js 中与服务器端渲染（SSR）相关的钩子，它会在请求的响应发送之前被调用。这个钩子的目的是让开发者可以在响应发送之前对响应进行修改或处理。此钩子接收两个参数：response 和 event。</description></item><item><title>Nuxt.js 应用中的 dev：ssr-logs 事件钩子</title><link>https://blog.cmdragon.cn/posts/ef86af3b9be34b11d75fa32951b147bd/</link><pubDate>Thu, 28 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ef86af3b9be34b11d75fa32951b147bd/</guid><description>dev:ssr-logs 是一个用在服务器端渲染（SSR）中，用于输出日志的事件钩子。这个钩子会在请求周期结束时被调用，产生的参数包括日志路径与日志内容。这对于调试和监控服务器端的行为非常有用，特别是在开发环境下。</description></item><item><title>Nuxt.js 应用中的 webpack：done 事件钩子</title><link>https://blog.cmdragon.cn/posts/4d17f3c1bc0c28b6f117688edab9cd9a/</link><pubDate>Tue, 26 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4d17f3c1bc0c28b6f117688edab9cd9a/</guid><description>webpack:done 钩子用于处理 Webpack 编译完成后的逻辑。在 Webpack 编译的所有任务完成后，这个钩子会被调用，通常用于通知开发者编译的状态、执行清理工作或作为开发工具的提示。</description></item><item><title>Nuxt.js 应用中的 webpack：change 事件钩子</title><link>https://blog.cmdragon.cn/posts/871f2adb90d3346f48ea362ee434cee3/</link><pubDate>Sun, 24 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/871f2adb90d3346f48ea362ee434cee3/</guid><description>通过webpack:change钩子，开发者可以知道哪些文件被修改，并可以进行适当的处理，比如重新加载相关模块，或更新用户界面等。</description></item><item><title>Nuxt.js 应用中的 webpack：compiled 事件钩子</title><link>https://blog.cmdragon.cn/posts/077a6b701325cff54c081bf5946d5477/</link><pubDate>Sat, 23 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/077a6b701325cff54c081bf5946d5477/</guid><description>webpack:compiled 钩子是在 Webpack 完成编译后调用的一个重要钩子。它允许开发者在资源加载并生成后的时刻执行一些特定的操作，比如处理生成的文件、记录日志、或者进行特定的清理工作。</description></item><item><title>Nuxt.js 应用中的 webpack：compile 事件钩子</title><link>https://blog.cmdragon.cn/posts/375bd210d2c7634b026886f4fd5e7ff0/</link><pubDate>Fri, 22 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/375bd210d2c7634b026886f4fd5e7ff0/</guid><description>webpack:compile 钩子是 Nuxt.js 和 Webpack 集成中的一个重要部分，它允许开发者在实际编译过程开始之前执行一些自定义逻辑。通过这一钩子，您可以获取编译的选项并进行相应的修改，为构建定制化处理。</description></item><item><title>Nuxt.js 应用中的 webpack：configResolved事件钩子</title><link>https://blog.cmdragon.cn/posts/c9d5ec8a241258b72058270c7c4a22e5/</link><pubDate>Thu, 21 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c9d5ec8a241258b72058270c7c4a22e5/</guid><description>在 Nuxt.js 项目中，webpack:configResolved 钩子允许开发者在 Webpack 配置被解析后读取和修改该配置。这一钩子在所有 Webpack 配置被合并和确定后调用，为开发者提供了更进一步自定义的机会。</description></item><item><title>Nuxt.js 应用中的 webpackConfigs 事件钩子</title><link>https://blog.cmdragon.cn/posts/27df5b46451b376fa9dbeae0b579612f/</link><pubDate>Wed, 20 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/27df5b46451b376fa9dbeae0b579612f/</guid><description>在 Nuxt.js 项目中，webpack:config 钩子允许运行时对 Webpack 配置进行修改。此钩子在配置 Webpack 编译器之前被调用，使得开发者能根据需要定制和扩展 Webpack 的默认配置。</description></item><item><title>Nuxt.js 应用中的 modules：done 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/6427994cfc82edf8e740eb2b3edcead4/</link><pubDate>Wed, 16 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6427994cfc82edf8e740eb2b3edcead4/</guid><description>modules:done 是 Nuxt.js 中一个重要的生命周期钩子，在 Nuxt 应用初始化期间触发。该钩子允许开发者在用户定义的模块安装完成后执行特定操作，如初始化后续配置或执行其他逻辑。</description></item><item><title>Nuxt.js 应用中的 modules：before 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/62721fbcf90812e7cb4f8192dad8c51b/</link><pubDate>Tue, 15 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/62721fbcf90812e7cb4f8192dad8c51b/</guid><description>modules:before 是 Nuxt.js 中一个重要的生命周期钩子，在 Nuxt 应用初始化期间被触发。该钩子允许开发者在安装用户定义的模块之前执行某些操作，如配置或环境设置。</description></item><item><title>Nuxt.js 应用中的 restart 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/b4f0288c3d1fb7d61c49c1c31198ce36/</link><pubDate>Mon, 14 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b4f0288c3d1fb7d61c49c1c31198ce36/</guid><description>restart 方法是 Nuxt.js 中用于重启当前实例的重要功能。该方法允许开发者在需要时快速重启应用，可以选择执行“硬重启”或普通重启。</description></item><item><title>Nuxt.js 应用中的 close 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/e16f122a2b0ff1157b75ce6cc609f9f1/</link><pubDate>Sun, 13 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e16f122a2b0ff1157b75ce6cc609f9f1/</guid><description>close 钩子是 Nuxt.js 中一个重要的生命周期事件，它在 Nuxt 实例正常关闭时被调用。当 Nuxt 应用的生命周期即将结束时，这一钩子会被触发，让开发者能够执行一些必要的清理操作或保存状态。</description></item><item><title>Nuxt.js 应用中的 ready 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/bf27341c381e447f9e64e2d4e9b36db4/</link><pubDate>Sat, 12 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/bf27341c381e447f9e64e2d4e9b36db4/</guid><description>ready 钩子是 Nuxt.js 中一个重要的生命周期事件，它在 Nuxt 实例初始化完成后被调用。当 Nuxt 已经准备好并准备开始处理请求或渲染页面时，这一钩子会被触发。</description></item><item><title>Nuxt.js 应用中的 kit：compatibility 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/5892994c55ef47a9af4acfc446d8e923/</link><pubDate>Fri, 11 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5892994c55ef47a9af4acfc446d8e923/</guid><description>kit:compatibility 是处理浏览器兼容性问题的有效工具。正如本篇文章中所述，合理地利用这一钩子可以提升用户体验，并确保应用在不同环境中都能稳定运行。</description></item><item><title>Nuxt.js 应用中的 page：transition：finish 钩子详解</title><link>https://blog.cmdragon.cn/posts/b19fb081d695b4867066656e73740093/</link><pubDate>Thu, 10 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b19fb081d695b4867066656e73740093/</guid><description>page:transition:finish 是 Nuxt.js 中的一个事件钩子，专门用于处理页面过渡效果结束后的逻辑。这一钩子在页面过渡的 onAfterLeave 事件之后被调用，允许开发者在过渡完成后执行一些后续操作。</description></item><item><title>Nuxt.js 应用中的 page：finish 钩子详解</title><link>https://blog.cmdragon.cn/posts/d86a35cfb808722da2a6383da93c4a16/</link><pubDate>Wed, 09 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d86a35cfb808722da2a6383da93c4a16/</guid><description>page:finish 是 Nuxt.js 中用于处理页面加载完成事件的钩子，特别是与 Suspense机制相关。这个钩子允许开发者在页面加载完成后执行自定义操作，以优化用户体验或进行统计分析。</description></item><item><title>Nuxt.js 应用中的 page：start 钩子详解</title><link>https://blog.cmdragon.cn/posts/818748d467c0a22bfb87002939acb642/</link><pubDate>Tue, 08 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/818748d467c0a22bfb87002939acb642/</guid><description>page:start 是一个关键的钩子，可以在页面加载时执行必要的逻辑，以提升用户体验。通过合理地使用这个钩子，可以创建流畅的页面导航体验，并提供用户反馈。</description></item><item><title>Nuxt.js 应用中的 link：prefetch 钩子详解</title><link>https://blog.cmdragon.cn/posts/c9630bf715f84414f544802edae0e77a/</link><pubDate>Mon, 07 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c9630bf715f84414f544802edae0e77a/</guid><description>link:prefetch 是一个强大的钩子，允许开发者在链接预取时执行附加逻辑。合理利用这个钩子，可以帮助优化页面的加载速度和用户体验，提升 Web 应用的整体性能。</description></item><item><title>Nuxt.js 应用中的 app：suspense：resolve 钩子详解</title><link>https://blog.cmdragon.cn/posts/54de24a29ea32b400bc29f8b0b6a46b1/</link><pubDate>Sun, 06 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/54de24a29ea32b400bc29f8b0b6a46b1/</guid><description>app:suspense:resolve 是一个强大的钩子，允许开发者在异步数据解析完成后的最后一步执行必要的处理。通过合理使用该钩子，我们可以优化组件的渲染过程，并提供更好的用户体验。</description></item><item><title>Nuxt.js 应用中的 app：mounted 钩子详解</title><link>https://blog.cmdragon.cn/posts/0655a1f20f3c7d66e6b41c961df3103e/</link><pubDate>Sat, 05 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0655a1f20f3c7d66e6b41c961df3103e/</guid><description>app:mounted 钩子在 Vue 应用的生命周期中扮演着重要角色，提供了在组件被挂载后的执行时机。通过合理利用这个钩子，我们能够提高组件的交互性、用户体验以及性能优化。确保在其内部代码的健壮性和清理机制，将为你的 Vue 应用带来显著的提升。</description></item><item><title>Nuxt.js 应用中的 app：redirected 钩子详解</title><link>https://blog.cmdragon.cn/posts/0a403b28ba9828265f24d658ed1d54d5/</link><pubDate>Thu, 03 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0a403b28ba9828265f24d658ed1d54d5/</guid><description>app:redirected 是 Nuxt.js 中的一个钩子，主要用于处理服务器端渲染（SSR）过程中发生的重定向。该钩子在重定向被执行之前被调用，允许开发者在重定向发生前进行一些操作，比如执行条件检查、日志记录等。</description></item><item><title>Nuxt.js 应用中的 app：rendered 钩子详解</title><link>https://blog.cmdragon.cn/posts/ff851c9049725c29ffd402e2d1f008e2/</link><pubDate>Wed, 02 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ff851c9049725c29ffd402e2d1f008e2/</guid><description>摘要：本文详细介绍了 Nuxt.js 应用程序中的 app:rendered 钩子，包括其定义、调用时机、上下文信息以及通过实际案例展示如何记录性能和发送日志到服务器。</description></item><item><title>深入理解 Nuxt.js 中的 app：data：refresh 钩子</title><link>https://blog.cmdragon.cn/posts/64d5872b7beb55312b9d4537c9366d2b/</link><pubDate>Sun, 29 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/64d5872b7beb55312b9d4537c9366d2b/</guid><description>摘要：本文详细介绍了 Nuxt.js框架中的app:data:refresh钩子，包括其定义、用途、使用方法及实际应用案例。该钩子用于在数据刷新时执行额外处理，支持服务器端和客户端，有助于优化动态数据更新和用户体验。</description></item><item><title>深入理解 Nuxt.js 中的 app：error：cleared 钩子</title><link>https://blog.cmdragon.cn/posts/b77d43b884a1b04d68230c5963b5e15a/</link><pubDate>Sat, 28 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b77d43b884a1b04d68230c5963b5e15a/</guid><description>Nuxt.js 中的 app:error:cleared 钩子的用途及其实现方式。这个钩子为开发者提供了一种优雅的方式来处理错误清除后的状态恢复和用户反馈。</description></item><item><title>深入理解 Nuxt.js 中的 app：error 钩子</title><link>https://blog.cmdragon.cn/posts/cb374534e888fe4a800e013eda896737/</link><pubDate>Fri, 27 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/cb374534e888fe4a800e013eda896737/</guid><description>摘要：本文深入讲解了Nuxt.js框架中的app:error钩子，介绍其在处理web应用中致命错误的重要作用、使用方法及实际应用场景。通过创建Nuxt项目、定义插件、触发错误与测试等步骤，演示了如何利用此钩子捕获错误、记录日志及提升用户体验，最后总结其关键要点包括错误处理、友好提示及监控集成。</description></item><item><title>深入理解 Nuxt 中的 app created 钩子</title><link>https://blog.cmdragon.cn/posts/1e03ef2ae917ee8f6e9c9e63cdb6174d/</link><pubDate>Thu, 26 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1e03ef2ae917ee8f6e9c9e63cdb6174d/</guid><description>摘要：本文深入介绍了 Nuxt.js 中的 app:created 钩子，包括其触发时机、用途及使用方法。通过创建 Nuxt 项目、编写插件实现钩子、注册全局组件和配置，展示了在应用初始化阶段执行相关逻辑的实践过程。文中还提供了步骤说明和示例代码，帮助开发者理解如何在项目中有效利用此钩子进行全局设置。</description></item><item><title>Nuxt Kit 中的布局管理</title><link>https://blog.cmdragon.cn/posts/a845e31ef8f36d1af3e7abe08f09918e/</link><pubDate>Wed, 18 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a845e31ef8f36d1af3e7abe08f09918e/</guid><description>摘要：本文详述了在Nuxt.js框架中使用addLayout工具进行布局管理的方法，包括布局的概念、如何通过addLayout函数注册布局、创建布局文件及在页面中应用布局的示例代码。并通过练习指导读者创建自定义布局和使用这些布局于登录、注册页面，强调了布局对提升网页结构组织性和代码可维护性的积极作用</description></item><item><title>使用 nuxi dev 启动 Nuxt 应用程序的详细指南</title><link>https://blog.cmdragon.cn/posts/ffaecaca091c2823b255244bbf0e4e6e/</link><pubDate>Mon, 02 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ffaecaca091c2823b255244bbf0e4e6e/</guid><description>摘要：本文介绍了使用 nuxi dev 命令启动 Nuxt 应用程序的方法，包括安装 Nuxt.js、启动开发服务器及配置选项等详细步骤。</description></item><item><title>使用 setResponseStatus 函数设置响应状态码</title><link>https://blog.cmdragon.cn/posts/302e9ee7406d6304cf38978e07b4480c/</link><pubDate>Sun, 25 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/302e9ee7406d6304cf38978e07b4480c/</guid><description>通过 setResponseStatus 函数，你可以轻松地在 Nuxt.js 中设置响应的状态码。这不仅能帮助用户更好地理解发生了什么，还能在需要时显示自定义的错误页面。在实际应用中，合理使用状态码对于提升用户体验至关重要。</description></item><item><title>使用 prefetchComponents 进行组件预取</title><link>https://blog.cmdragon.cn/posts/a87f935f1fba15457925fce9d47af8f4/</link><pubDate>Sat, 17 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a87f935f1fba15457925fce9d47af8f4/</guid><description>摘要：本文介绍Nuxt.js中的prefetchComponents功能，用于预取组件以提高用户体验。通过在客户端后台下载和缓存组件，确保在用户需要时快速加载。文章涵盖了prefetchComponents的基本概念、与预加载的区别、使用方法以及如何在Nuxt.js项目中配置和应用此功能，最终达到优化应用加载速度的目的。</description></item><item><title>使用 onNuxtReady 进行异步初始化</title><link>https://blog.cmdragon.cn/posts/838b6733c038fcb291025b2c777b3e8b/</link><pubDate>Fri, 16 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/838b6733c038fcb291025b2c777b3e8b/</guid><description>摘要：本文详细介绍了Nuxt.js框架中的onNuxtReady函数用途、使用场景及其实现步骤，并通过集成分析库的示例代码，指导开发者如何在应用初始化完成后执行异步操作，以优化用户体验。</description></item><item><title>Nuxt.js必读：轻松掌握运行时配置与 useRuntimeConfig</title><link>https://blog.cmdragon.cn/posts/bbb706a14f541c1932c5a42b4cab92a6/</link><pubDate>Mon, 29 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/bbb706a14f541c1932c5a42b4cab92a6/</guid><description>本文详细介绍了Nuxt.js中的运行时配置功能，包括定义和使用运行时配置的方法，以及如何通过useRuntimeConfig访问配置。同时，讲解了环境变量与.env文件的使用，特别是在不同环境下的配置管理。</description></item><item><title>Nuxt.js 路由管理：useRouter 方法与路由中间件应用</title><link>https://blog.cmdragon.cn/posts/5d18db61dc2cdd94535cb31773ea0d63/</link><pubDate>Sun, 28 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5d18db61dc2cdd94535cb31773ea0d63/</guid><description>摘要：本文介绍了Nuxt 3中useRouter方法及其在路由管理和中间件应用中的功能。内容包括使用useRouter添加、移除路由，获取路由信息，基于History API的操作，导航守卫的实现，如定义匿名、命名及全局中间件，以及使用navigateTo和abortNavigation辅助函数。同时，还涉及Promise和错误处理，最后通过一个示例展示了useRouter的常见用法。</description></item><item><title>useRoute 函数的详细介绍与使用示例</title><link>https://blog.cmdragon.cn/posts/f78b155dac56741becfa07c51c38dc0f/</link><pubDate>Sat, 27 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f78b155dac56741becfa07c51c38dc0f/</guid><description>摘要：本文介绍了Nuxt.js中useRoute函数的详细用途与示例，展示了如何在组合式API中使用useRoute获取当前路由信息，包括动态参数、查询参数等，并提供了丰富的计算引用说明，如fullPath、hash、matched等，以及如何正确访问查询参数。</description></item><item><title>Nuxt.js 环境变量配置与使用</title><link>https://blog.cmdragon.cn/posts/53eb62f578931146081c71537fd0c013/</link><pubDate>Thu, 25 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/53eb62f578931146081c71537fd0c013/</guid><description>摘要：“该文探讨了Nuxt.js框架下环境变量配置的详细过程，涉及.env文件配置、运行时访问、安全性考量、在不同场景下的实践（如Vue应用、插件、服务器路由）及多环境配置下的最佳实践。”</description></item><item><title>Nuxt.js 中使用 useHydration 实现数据水合与同步</title><link>https://blog.cmdragon.cn/posts/c7ddeca4690387e7e08c83e6c482a576/</link><pubDate>Thu, 18 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c7ddeca4690387e7e08c83e6c482a576/</guid><description>摘要：介绍Nuxt.js中useHydration函数，用于控制客户端与服务器数据同步，实现数据水合。参数包括key、get和set函数，适用于多种场景，示例展示数据获取与显示流程。</description></item><item><title>Nuxt.js头部魔法：轻松自定义页面元信息，提升用户体验</title><link>https://blog.cmdragon.cn/posts/d5370e880eaec9085a153caba4961676/</link><pubDate>Tue, 16 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d5370e880eaec9085a153caba4961676/</guid><description>摘要：“Nuxt.js头部魔法：轻松自定义页面元信息，提升用户体验”介绍如何使用useHead函数在Nuxt应用中编程式设置页面头部信息，包括&lt;title>、&lt;meta>、&lt;link>等标签，以增强SEO和用户体验。通过实例展示了如何配置静态和动态标题、元数据、样式、脚本等，使页面更符合SEO标准和个性化需求。</description></item><item><title>探索Nuxt.js的useFetch：高效数据获取与处理指南</title><link>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</link><pubDate>Mon, 15 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</guid><description>摘要：“探索Nuxt.js的useFetch：高效数据获取与处理指南”详述了Nuxt.js中useFetch函数的使用，包括基本用法、动态参数获取、拦截器使用，及参数详解。文章通过示例展示了如何从API获取数据，处理动态参数，自定义请求和响应，以及useFetch和useAsyncData的参数选项，帮助开发者掌握异步数据加载技巧。</description></item><item><title>Nuxt.js 错误侦探：useError 组合函数</title><link>https://blog.cmdragon.cn/posts/b73679558bc672550fbbb72ae295fdf5/</link><pubDate>Sun, 14 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b73679558bc672550fbbb72ae295fdf5/</guid><description>摘要：文章介绍Nuxt.js中的useError组合函数，用于统一处理客户端和服务器端的错误，提供statusCode、statusMessage和message属性，示例展示了如何在组件中使用它来捕获和显示错误信息。</description></item><item><title>轻松掌握useAsyncData获取异步数据</title><link>https://blog.cmdragon.cn/posts/e1b1c62b5975f8ebfa61adc507591cf7/</link><pubDate>Fri, 12 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e1b1c62b5975f8ebfa61adc507591cf7/</guid><description>摘要：本文详细介绍Nuxt.js中的useAsyncData组合式函数，它用于在服务端渲染(SSR)过程中异步获取数据，确保客户端正确水合，避免重复请求。内容包括基本概念、参数说明（key, handler, options）、示例用法、如何监听参数变化自动刷新数据及返回值详解，展示了在页面组件中使用useAsyncData的具体方式和注意事项。</description></item><item><title>Nuxt.js 深入浅出：目录结构与文件组织详解</title><link>https://blog.cmdragon.cn/posts/76244d4bdeb953ccc75974ff195ab8c4/</link><pubDate>Tue, 18 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/76244d4bdeb953ccc75974ff195ab8c4/</guid><description>摘要：本文详述了Nuxt.js框架中关键目录与配置文件的作用及使用方法，包括布局设定、页面结构管理、插件集成、静态资源处理、 Vuex状态管理、项目配置文件nuxt.config.js详解以及package.json、.eslintrc.js、.babelrc等辅助配置文件的配置方式，为构建高效Nuxt应用提供了全面指南。</description></item><item><title>安装 Nuxt.js 的步骤和注意事项</title><link>https://blog.cmdragon.cn/posts/9280ced43b0f3e88e4a3856b3ce4464d/</link><pubDate>Mon, 17 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9280ced43b0f3e88e4a3856b3ce4464d/</guid><description>Nuxt.js在Vue.js基础上提供的服务器端渲染框架优势，包括提高开发效率、代码维护性和应用性能。指南详细说明了从环境准备、Nuxt.js安装配置到进阶部署技巧，涵盖错误解决、性能优化及Docker、CI/CD实践，为开发者构建高效Web应用提供全面攻略。</description></item></channel></rss>