<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>性能监控 on cmdragon's Blog</title><link>/tags/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</link><description>Recent content in 性能监控 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 28 Apr 2025 00:13:02 +0800</lastBuildDate><atom:link href="/tags/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI数据库连接池配置与监控</title><link>/posts/06a7744b22307c94c8cabf0a26c4133d/</link><pubDate>Mon, 28 Apr 2025 00:13:02 +0800</pubDate><guid>/posts/06a7744b22307c94c8cabf0a26c4133d/</guid><description>FastAPI数据库连接池通过预先创建和复用连接，显著降低连接创建开销。配置参数包括最小连接数（minsize）、最大连接数（maxsize）和空闲连接存活时间（max_inactive_connection_lifetime）。通过Tortoise-ORM集成Prometheus和Grafana实现实时监控，优化连接管理。常见问题如连接池耗尽和连接泄漏，可通过增加maxsize、检查未提交事务和使用async with管理事务来解决。定期监控和优化连接池参数是确保数据库性能的关键。</description></item><item><title>数据库审计与智能监控：从日志分析到异常检测</title><link>/posts/9c2a135562a18261d70cc5637df435e5/</link><pubDate>Tue, 18 Feb 2025 00:18:53 +0800</pubDate><guid>/posts/9c2a135562a18261d70cc5637df435e5/</guid><description>数据库审计与监控是安全运营中心（SOC）的核心能力。数据库审计策略设计、性能瓶颈定位、异常行为检测三大关键领域，通过Oracle统一审计、MySQL企业版审计插件、PostgreSQL pg_stat_statements等30+实战案例，展示如何构建全维度监控体系。</description></item><item><title>查询优化：提升数据库性能的实用技巧</title><link>/posts/c2b225e3d0b1e9de613fde47b1d4cacb/</link><pubDate>Fri, 14 Feb 2025 00:18:53 +0800</pubDate><guid>/posts/c2b225e3d0b1e9de613fde47b1d4cacb/</guid><description>在现代数据库环境中，查询性能直接影响到应用程序的响应速度和用户体验。查询优化的三个重要方面：执行计划分析、常见的性能瓶颈及其解决方案，以及数据库性能监控工具的有效使用（如 EXPLAIN 和 SQL Profiler）</description></item><item><title>Nuxt.js 应用中的 app：rendered 钩子详解</title><link>/posts/ff851c9049725c29ffd402e2d1f008e2/</link><pubDate>Wed, 02 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/ff851c9049725c29ffd402e2d1f008e2/</guid><description>摘要：本文详细介绍了 Nuxt.js 应用程序中的 app:rendered 钩子，包括其定义、调用时机、上下文信息以及通过实际案例展示如何记录性能和发送日志到服务器。</description></item><item><title>Django性能之道：缓存应用与优化实战</title><link>/posts/887a0a7da3a77358a6c56b53de583bfd/</link><pubDate>Sat, 11 May 2024 18:34:22 +0800</pubDate><guid>/posts/887a0a7da3a77358a6c56b53de583bfd/</guid><description>&lt;img src="/images/2024_05_11 18_37_29.png" title="2024_05_11 18_37_29.png" alt="2024_05_11 18_37_29.png"/>
&lt;p>&lt;strong>引言&lt;/strong>&lt;/p>
&lt;p>在当今的互联网时代，用户对网站和应用程序的性能要求越来越高。一个响应迅速、加载快速的网站不仅能提升用户体验，还能在搜索引擎排名中占据优势。Django，作为一个高级Python
Web框架，以其快速开发和干净、实用的设计而闻名。然而，即使是最优化的Django应用，也可能因为频繁的数据库查询、复杂的计算或外部API调用而变得缓慢。这就是缓存发挥作用的地方。&lt;/p></description></item></channel></rss>