<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>缓存 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E7%BC%93%E5%AD%98/</link>
    <description>Recent content in 缓存 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 17 Sep 2024 00:18:53 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nuxt Kit 中的页面和路由管理</title>
      <link>https://blog.cmdragon.cn/posts/ca15f62138ac0f090f2b9c215756b50a/</link>
      <pubDate>Tue, 17 Sep 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/ca15f62138ac0f090f2b9c215756b50a/</guid>
      <description>摘要：本文介绍了Nuxt Kit中页面和路由管理的高级功能，包括extendPages自定义页面路由、extendRouteRules定义复杂路由逻辑及addRouteMiddleware注册路由中间件。通过这些功能，开发者能够灵活地添加、修改路由，设置缓存、重定向等，并实现访问控制等中间件处理，以提升Web应用的开发效率和可维护性。</description>
    </item>
    <item>
      <title>使用 nuxi clean 命令清理 Nuxt 项目</title>
      <link>https://blog.cmdragon.cn/posts/4382efd355d49a6c8c6ca9f96c90fe8d/</link>
      <pubDate>Sun, 01 Sep 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/4382efd355d49a6c8c6ca9f96c90fe8d/</guid>
      <description>nuxi clean 命令是管理和维护 Nuxt 项目的重要工具，它帮助你快速清理生成的文件和缓存，确保开发环境的干净。通过定期使用这个命令，你可以避免由于缓存或生成文件导致的构建问题，从而提升开发效率和项目稳定性。</description>
    </item>
    <item>
      <title>使用 prefetchComponents 进行组件预取</title>
      <link>https://blog.cmdragon.cn/posts/a87f935f1fba15457925fce9d47af8f4/</link>
      <pubDate>Sat, 17 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/a87f935f1fba15457925fce9d47af8f4/</guid>
      <description>摘要：本文介绍Nuxt.js中的prefetchComponents功能，用于预取组件以提高用户体验。通过在客户端后台下载和缓存组件，确保在用户需要时快速加载。文章涵盖了prefetchComponents的基本概念、与预加载的区别、使用方法以及如何在Nuxt.js项目中配置和应用此功能，最终达到优化应用加载速度的目的。</description>
    </item>
    <item>
      <title>清除 Nuxt 状态缓存：clearNuxtState</title>
      <link>https://blog.cmdragon.cn/posts/54aef7263724952013d0fd71fcdcb38e/</link>
      <pubDate>Wed, 07 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/54aef7263724952013d0fd71fcdcb38e/</guid>
      <description>摘要：本文介绍了Nuxt.js框架中clearNuxtState方法的使用，该方法用于清除useState管理的状态缓存，确保应用状态的有效性和一致性。文章涵盖了clearNuxtState的方法签名、使用场景及示例代码，演示了如何在组件中实现状态的重置，适用于需要在特定条件下重置状态或页面切换时保持状态清新的场景。</description>
    </item>
    <item>
      <title>清除 Nuxt 数据缓存：clearNuxtData</title>
      <link>https://blog.cmdragon.cn/posts/b14ec150986ae8b8e56d2c37637e04fd/</link>
      <pubDate>Tue, 06 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/b14ec150986ae8b8e56d2c37637e04fd/</guid>
      <description>摘要：本文详细介绍了Nuxt.js框架中的clearNuxtData方法，用于清除useAsyncData和useFetch缓存的数据、错误状态和待处理promises，以实现数据的实时更新和重载。通过实际示例展示了在不同页面如何应用clearNuxtData来提升用户体验和数据新鲜度，包括方法签名、使用场景及具体代码实现步骤。</description>
    </item>
    <item>
      <title>使用 $fetch 进行 HTTP 请求</title>
      <link>https://blog.cmdragon.cn/posts/a189c208200be9973a4dd8d9029f2ab2/</link>
      <pubDate>Fri, 02 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/a189c208200be9973a4dd8d9029f2ab2/</guid>
      <description>摘要：文章介绍了Nuxt3中使用$fetch进行HTTP请求的方法，它是基于ofetch库，支持SSR和自动缓存。$fetch简化了HTTP请求，支持GET、POST等，可结合useAsyncData或useFetch优化数据获取，避免重复请求，适用于服务器端渲染。</description>
    </item>
    <item>
      <title>使用 useNuxtData 进行高效的数据获取与管理</title>
      <link>https://blog.cmdragon.cn/posts/5097e3f618f180282a847588006a51d8/</link>
      <pubDate>Mon, 22 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/5097e3f618f180282a847588006a51d8/</guid>
      <description>深入讲解了Nuxt 3中useNuxtData组合函数的应用，演示了如何通过此函数访问缓存数据，实现组件间数据共享，以及如何在数据更新时利用缓存提高用户体验。文章提供了具体的用法示例，包括数据获取、访问缓存数据和数据更新的场景。</description>
    </item>
    <item>
      <title>深入理解Django：中间件与信号处理的艺术</title>
      <link>https://blog.cmdragon.cn/posts/2754fe06b895a4268f93c63424bd4c13/</link>
      <pubDate>Thu, 09 May 2024 18:41:21 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/2754fe06b895a4268f93c63424bd4c13/</guid>
      <description>&lt;img src=&#34;https://static.cmdragon.cn/blog/images/2024_05_09 18_45_49.png@blog&#34; title=&#34;2024_05_09 18_45_49.png&#34; alt=&#34;2024_05_09 18_45_49.png&#34;/&gt;&#xA;&lt;h2 id=&#34;引言&#34;&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;在当今的Web开发领域，Django以其强大的功能、简洁的代码结构和高度的可扩展性，已成为众多开发者的首选框架。Django不仅是一个内容管理系统，更是一个全面的框架，它提供了一套完整的解决方案，包括ORM、模板引擎、URL路由系统和强大的管理后台，使得开发者能够快速构建高质量的Web应用。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
