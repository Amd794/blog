<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WebSocket on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/WebSocket/</link><description>Recent content in WebSocket on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 05 Jul 2025 17:08:37 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/WebSocket/index.xml" rel="self" type="application/rss+xml"/><item><title>WebSocket与HTTP协议究竟有何不同？FastAPI如何让长连接变得如此简单？</title><link>https://blog.cmdragon.cn/posts/903448c85701a6a747fc9a4417e2bdc8/</link><pubDate>Sat, 05 Jul 2025 17:08:37 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/903448c85701a6a747fc9a4417e2bdc8/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/7989a41781759816107c155a4591fc73.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png"/>
&lt;img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png"/>
&lt;p>扫描&lt;a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg">二维码&lt;/a>
关注或者微信搜一搜：&lt;code>编程智域 前端至全栈交流与成长&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat">发现1000+提升效率与开发的AI工具和实用程序&lt;/a>：https://tools.cmdragon.cn/&lt;/p>
&lt;h1 id="第一章websocket协议基础与fastapi定位">第一章：WebSocket协议基础与FastAPI定位&lt;/h1>
&lt;h2 id="11-websocket与http协议核心差异">1.1 WebSocket与HTTP协议核心差异&lt;/h2>
&lt;p>通过对比传统HTTP协议与WebSocket协议的核心特性，我们可以从以下维度理解二者的差异：&lt;/p></description></item><item><title>FastAPI与MongoDB Change Stream的实时数据交响曲</title><link>https://blog.cmdragon.cn/posts/c61df2f044f3ffda6fd2eb4c5dd72620/</link><pubDate>Sun, 25 May 2025 13:04:40 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c61df2f044f3ffda6fd2eb4c5dd72620/</guid><description>MongoDB Change Stream与FastAPI集成可实现毫秒级实时数据处理。Change Stream通过oplog机制捕获数据变更事件，支持insert、update、replace、delete操作监听，具备断点续传和事件过滤能力。集成步骤包括环境准备、基础监听实现、WebSocket实时推送，以及性能优化策略如索引优化、批处理配置和资源控制。生产环境建议使用独立物理节点部署oplog，配置心跳检测，并监控事件处理延迟、内存使用和网络带宽消耗。该方案适用于实时数据分析、即时通讯和物联网等场景。</description></item></channel></rss>