<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>容器化 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/</link>
    <description>Recent content in 容器化 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 21 May 2024 20:15:19 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Django与微服务架构：构建可扩展的Web应用</title>
      <link>https://blog.cmdragon.cn/posts/61b57747a82113c01f83b72ade53c352/</link>
      <pubDate>Tue, 21 May 2024 20:15:19 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/61b57747a82113c01f83b72ade53c352/</guid>
      <description>&lt;img src=&#34;https://static.cmdragon.cn/blog/images/2024_05_21 20_18_51.png@blog&#34; title=&#34;2024_05_21 20_18_51.png&#34; alt=&#34;2024_05_21 20_18_51.png&#34;/&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在当今快速发展的软件开发领域，微服务架构已经成为构建可扩展、灵活且易于维护的系统的热门选择。微服务架构通过将大型应用程序分解为一组小型、独立的服务来工作，每个服务都围绕特定的业务功能构建，并可以独立开发、部署和扩展。这种架构模式的优势在于提高了系统的灵活性和可维护性，同时允许团队以更快的速度迭代和部署新功能。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
