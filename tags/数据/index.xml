<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE/</link>
    <description>Recent content in 数据 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 10 Nov 2024 00:18:53 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nuxt.js 应用中的 schema：extend事件钩子详解</title>
      <link>https://blog.cmdragon.cn/posts/b1d6a0b2258a699dc8415d298eecab45/</link>
      <pubDate>Sun, 10 Nov 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/b1d6a0b2258a699dc8415d298eecab45/</guid>
      <description>schema:extend 钩子使开发者能够扩展默认数据模式，为特定业务需求添加自定义字段和验证。</description>
    </item>
    <item>
      <title>使用 defineNuxtComponent`定义 Vue 组件</title>
      <link>https://blog.cmdragon.cn/posts/8e9977db3a733bc649877087c3b87e91/</link>
      <pubDate>Fri, 09 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/8e9977db3a733bc649877087c3b87e91/</guid>
      <description>摘要：本文介绍了在Nuxt 3中使用defineNuxtComponent辅助函数定义类型安全的Vue组件的方法，适用于习惯Options API的开发者。defineNuxtComponent支持asyncData获取异步数据及head设置自定义头部信息，为Nuxt应用提供更多功能。</description>
    </item>
    <item>
      <title>清除 Nuxt 数据缓存：clearNuxtData</title>
      <link>https://blog.cmdragon.cn/posts/b14ec150986ae8b8e56d2c37637e04fd/</link>
      <pubDate>Tue, 06 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/b14ec150986ae8b8e56d2c37637e04fd/</guid>
      <description>摘要：本文详细介绍了Nuxt.js框架中的clearNuxtData方法，用于清除useAsyncData和useFetch缓存的数据、错误状态和待处理promises，以实现数据的实时更新和重载。通过实际示例展示了在不同页面如何应用clearNuxtData来提升用户体验和数据新鲜度，包括方法签名、使用场景及具体代码实现步骤。</description>
    </item>
    <item>
      <title>使用 useNuxtData 进行高效的数据获取与管理</title>
      <link>https://blog.cmdragon.cn/posts/5097e3f618f180282a847588006a51d8/</link>
      <pubDate>Mon, 22 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/5097e3f618f180282a847588006a51d8/</guid>
      <description>深入讲解了Nuxt 3中useNuxtData组合函数的应用，演示了如何通过此函数访问缓存数据，实现组件间数据共享，以及如何在数据更新时利用缓存提高用户体验。文章提供了具体的用法示例，包括数据获取、访问缓存数据和数据更新的场景。</description>
    </item>
    <item>
      <title>使用 useLazyFetch 进行异步数据获取</title>
      <link>https://blog.cmdragon.cn/posts/382133fd6ac27845d845a7fa96e5ba43/</link>
      <pubDate>Sat, 20 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/382133fd6ac27845d845a7fa96e5ba43/</guid>
      <description>摘要：“使用 useLazyFetch 进行异步数据获取”介绍了在Nuxt开发中利用useLazyFetch进行异步数据加载的方法，强调其立即触发导航特性，与useFetch相似的使用方式，以及如何处理数据状态和错误，通过示例展示如何在模板中根据数据加载状态显示不同内容。</description>
    </item>
    <item>
      <title>探索Nuxt.js的useFetch：高效数据获取与处理指南</title>
      <link>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</link>
      <pubDate>Mon, 15 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</guid>
      <description>摘要：“探索Nuxt.js的useFetch：高效数据获取与处理指南”详述了Nuxt.js中useFetch函数的使用，包括基本用法、动态参数获取、拦截器使用，及参数详解。文章通过示例展示了如何从API获取数据，处理动态参数，自定义请求和响应，以及useFetch和useAsyncData的参数选项，帮助开发者掌握异步数据加载技巧。</description>
    </item>
  </channel>
</rss>
