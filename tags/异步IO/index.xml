<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>异步IO on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%BC%82%E6%AD%A5IO/</link><description>Recent content in 异步IO on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 29 Apr 2025 13:21:47 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%BC%82%E6%AD%A5IO/index.xml" rel="self" type="application/rss+xml"/><item><title>异步IO与Tortoise-ORM的数据库</title><link>https://blog.cmdragon.cn/posts/618edd124a0fe8340f766e276faa89fb/</link><pubDate>Tue, 29 Apr 2025 13:21:47 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/618edd124a0fe8340f766e276faa89fb/</guid><description>异步IO与同步IO的核心区别在于阻塞与非阻塞模式。Tortoise-ORM通过协议层、连接池层和ORM层实现异步数据库操作，支持高效的并发处理。用户管理系统搭建中，Tortoise-ORM与FastAPI结合，实现了用户创建和查询功能，并通过Pydantic进行数据校验。异步ORM适用于高并发场景，参数化查询可防止SQL注入。最佳实践包括连接池配置、查询优化和事务管理，确保系统性能和数据一致性。</description></item><item><title>异步编程与Tortoise-ORM框架</title><link>https://blog.cmdragon.cn/posts/5265d648f0fd4ea5e11af203bc59301d/</link><pubDate>Sat, 19 Apr 2025 00:13:05 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5265d648f0fd4ea5e11af203bc59301d/</guid><description>异步编程通过async/await语法实现协程，单线程可处理多个并发请求，适合IO密集型场景。Tortoise-ORM专为异步设计，支持完整ORM功能和多种数据库，与Pydantic深度集成。整合FastAPI时，通过&lt;code>register_tortoise&lt;/code>初始化ORM，使用&lt;code>in_transaction&lt;/code>管理事务，确保操作原子性。常见问题包括未使用await返回协程对象和事件循环关闭错误，需通过正确的事件循环启动和事务管理解决。</description></item><item><title>Python多线程编程深度探索：从入门到实战</title><link>https://blog.cmdragon.cn/posts/8d7b4344fdbb3d86c53804ac8f3b6fb6/</link><pubDate>Sun, 28 Apr 2024 18:57:17 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8d7b4344fdbb3d86c53804ac8f3b6fb6/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_04_28 19_06_58.png@blog" title="2024_04_28 19_06_58.png" alt="2024_04_28 19_06_58.png"/>
&lt;h2 id="第1章python基础知识与多线程概念">&lt;strong>第1章：Python基础知识与多线程概念&lt;/strong>&lt;/h2>
&lt;h3 id="python简介">&lt;strong>Python简介：&lt;/strong>&lt;/h3>
&lt;p>Python是一种高级、通用、解释型的编程语言，由Guido van
Rossum于1991年创建。Python以其简洁、易读的语法而闻名，被广泛用于Web开发、数据科学、人工智能等领域。Python具有丰富的标准库和第三方库，支持多种编程范式，包括面向对象、函数式和过程式编程。&lt;/p></description></item><item><title>深入理解Python协程：从基础到实战</title><link>https://blog.cmdragon.cn/posts/5d1545ed32733a56b5e71c7ee880a847/</link><pubDate>Sat, 27 Apr 2024 16:48:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5d1545ed32733a56b5e71c7ee880a847/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_04_27 17_03_18.png@blog" title="2024_04_27 17_03_18.png" alt="2024_04_27 17_03_18.png"/>
&lt;img src="https://static.cmdragon.cn/blog/images/2024_04_27 17_05_32.png@blog" title="2024_04_27 17_05_32.png" alt="2024_04_27 17_05_32.png"/>
&lt;h2 id="第1章协程基础">&lt;strong>第1章：协程基础&lt;/strong>&lt;/h2>
&lt;h3 id="11-协程概念介绍">&lt;strong>1.1 协程概念介绍&lt;/strong>&lt;/h3>
&lt;p>协程（Coroutines）是一种特殊的软件构造，它允许程序在执行过程中暂停并恢复执行，而不会丢失当前的执行上下文。与线程和进程不同，协程在单个线程中运行，通过调度机制实现并发，降低了上下文切换的开销，提高了程序的执行效率。协程通常用于处理I/O密集型任务，如网络请求、文件读写等。&lt;/p></description></item></channel></rss>