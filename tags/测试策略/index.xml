<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>测试策略 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5/</link><description>Recent content in 测试策略 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 03 Jun 2024 06:43:53 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5/index.xml" rel="self" type="application/rss+xml"/><item><title>Vue渲染函数与JSX指南</title><link>https://blog.cmdragon.cn/posts/f741366fe739d0763e4e60aa477e6ef9/</link><pubDate>Mon, 03 Jun 2024 06:43:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f741366fe739d0763e4e60aa477e6ef9/</guid><description>这篇文章介绍了Vue.js的基础知识，包括Vue.js的历史、安装配置、组件概念、实例生命周期等。接着深入探讨了Vue的模板语法，如插值表达式、指令、条件渲染、列表渲染和事件处理。文章还详细讲解了Vue的渲染函数和JSX的使用，包括渲染函数的作用、如何在Vue中使用渲染函数、创建渲染函数以及渲染函数与组件的关系。此外，还涉及了JSX的基础知识、语法、与Vue数据绑定的结合使用，以及在组件中使用JSX的方法。文章最后讨论了性能优化策略，包括渲染函数与JSX的性能考量、优化技巧与策略，以及实战案例，如构建一个使用渲染函数与JSX的待办事项应用。</description></item></channel></rss>