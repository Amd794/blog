<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JWT令牌 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/JWT%E4%BB%A4%E7%89%8C/</link><description>Recent content in JWT令牌 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 18 Jun 2025 17:24:12 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/JWT%E4%BB%A4%E7%89%8C/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中实现权限隔离并让用户乖乖听话？</title><link>https://blog.cmdragon.cn/posts/74777546a240b16b32196e5eb29ec8f7/</link><pubDate>Wed, 18 Jun 2025 17:24:12 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/74777546a240b16b32196e5eb29ec8f7/</guid><description>权限隔离通过用户身份验证和角色判定限制系统资源访问。FastAPI实现步骤包括用户认证、角色识别和访问控制。认证机制采用OAuth2密码授权流程结合JWT令牌，通过创建角色校验依赖项实现授权系统。进阶权限控制模式包括数据级权限隔离，确保用户只能访问自己的数据。测试与验证使用TestClient进行权限测试，常见报错如401 Unauthorized、403 Forbidden和422 Validation Error均有相应解决方案。</description></item><item><title>FastAPI安全异常处理：从401到422的奇妙冒险</title><link>https://blog.cmdragon.cn/posts/92a7a3de40eb9ce71620716632f68676/</link><pubDate>Thu, 05 Jun 2025 21:06:31 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/92a7a3de40eb9ce71620716632f68676/</guid><description>FastAPI安全异常处理核心原理与实践包括认证失败的标准HTTP响应规范、令牌异常的特殊场景处理以及完整示例代码。HTTP状态码选择原则建议使用401、403和422，错误响应结构应统一。JWT令牌异常分为签名篡改、过期和格式错误，推荐状态码为401。通过依赖注入实现令牌校验，并采用双令牌策略实现令牌刷新机制。完整示例代码展示了如何创建和验证JWT令牌，以及如何保护路由。</description></item><item><title>JWT令牌：从身份证到代码防伪的奇妙之旅</title><link>https://blog.cmdragon.cn/posts/a39277914464b007ac61874292578de0/</link><pubDate>Tue, 03 Jun 2025 23:14:07 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a39277914464b007ac61874292578de0/</guid><description>JWT（JSON Web Token）是一种用于安全传输信息的开放标准，由Header、Payload和Signature三部分组成。Header描述算法和令牌类型，Payload存放实际数据，Signature通过密钥和算法生成，确保数据未被篡改。PyJWT库可用于生成和验证JWT令牌，FastAPI框架中可通过OAuth2PasswordBearer实现身份验证。常见问题包括签名验证失败和令牌过期，需确保密钥一致并定期轮换。JWT适用于身份认证和信息交换，但需避免在Payload中存储敏感数据。</description></item><item><title>OAuth2密码模式：信任的甜蜜陷阱与安全指南</title><link>https://blog.cmdragon.cn/posts/96b6c27c65f8bdaa6a70b9d896192a00/</link><pubDate>Thu, 29 May 2025 14:56:19 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/96b6c27c65f8bdaa6a70b9d896192a00/</guid><description>OAuth2定义了四种主要授权流程：授权码模式适用于完整Web应用，通过授权码交换令牌；简化模式适合单页应用，直接返回令牌但存在安全隐患；客户端凭证模式用于服务端间通信，无需用户参与；密码模式适用于受信任的客户端，直接使用用户名/密码换取令牌。每种模式针对不同场景设计，需根据应用需求和安全考量选择合适方案。密码模式实现中，FastAPI通过JWT令牌和bcrypt密码哈希确保安全性，但需高度信任客户端。</description></item></channel></rss>