<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库迁移 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</link><description>Recent content in 数据库迁移 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 31 May 2025 09:34:15 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>用户认证的魔法配方：从模型设计到密码安全的奇幻之旅</title><link>https://blog.cmdragon.cn/posts/ac5bec89ea446ce4f6b01891f640fbfe/</link><pubDate>Sat, 31 May 2025 09:34:15 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ac5bec89ea446ce4f6b01891f640fbfe/</guid><description>用户认证体系的核心在于用户模型设计和密码安全规范。用户模型需包含唯一用户名、邮箱、加密密码等基础字段，使用SQLAlchemy ORM进行数据库集成。密码存储必须使用强哈希算法（如bcrypt），并自动加盐处理。密码验证流程应包含多级安全检查，确保用户数据安全。数据库集成推荐使用异步驱动提升性能，并通过Alembic进行数据库迁移。常见报错如唯一约束冲突和空对象问题，需在代码中预先检查和处理。</description></item><item><title>数据库迁移的艺术：FastAPI生产环境中的灰度发布与回滚策略</title><link>https://blog.cmdragon.cn/posts/4d90fa48b5e69cdd4f401a0ebdc8c5ff/</link><pubDate>Sat, 17 May 2025 21:06:56 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4d90fa48b5e69cdd4f401a0ebdc8c5ff/</guid><description>FastAPI生产环境数据库迁移工程实践采用灰度发布、回滚预案和监控告警体系确保安全。灰度发布通过用户标识分流、数据库版本标记和流量比例控制实现渐进式部署。回滚预案分为三级，分别针对错误率、主库负载和数据不一致情况，自动化回滚脚本确保快速响应。监控系统覆盖全链路指标，使用Prometheus进行实时监控和告警，确保迁移过程稳定可控。</description></item><item><title>数据库迁移的艺术：团队协作中的冲突预防与解决之道</title><link>https://blog.cmdragon.cn/posts/dbaf19c1f2ca3b01929b292e7d0f506d/</link><pubDate>Sat, 17 May 2025 00:13:50 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/dbaf19c1f2ca3b01929b292e7d0f506d/</guid><description>在团队协作中，数据库迁移脚本冲突是常见问题。通过Alembic工具，可以有效地管理和解决这些冲突。冲突预防的四原则包括功能分支隔离、原子化迁移脚本、版本锁机制和自动化检测。当冲突发生时，使用&lt;code>alembic merge&lt;/code>命令合并分叉版本，生成新的迁移脚本。合并后需进行结构校验、空跑测试和回滚测试，确保迁移的正确性。常见报错如表已存在错误，可通过检查迁移顺序、添加反向操作和使用&lt;code>alembic stamp&lt;/code>命令解决。通过规范管理，团队可以平滑协作，实现数据库变更的有序推进。</description></item><item><title>数据库事务隔离与Alembic数据恢复的实战艺术</title><link>https://blog.cmdragon.cn/posts/cf1e62c5d062081d6bb96f82c2f9f2da/</link><pubDate>Thu, 15 May 2025 00:05:13 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/cf1e62c5d062081d6bb96f82c2f9f2da/</guid><description>事务隔离级别是数据库管理系统中防止数据不一致的重要机制，包括读未提交、读已提交、可重复读和串行化四个级别。Alembic提供了版本分支管理和数据版本回滚等高级操作技巧，帮助团队协作和解决迁移冲突。在实战中，金融交易场景通常使用串行化隔离级别以确保数据一致性，而电商订单恢复系统则通过事务和Alembic回滚实现安全恢复。最佳实践建议包括使用适当的隔离级别、显式加锁、定期备份和审核回滚脚本，以在数据安全性和系统性能之间找到平衡。</description></item><item><title>FastAPI与Alembic：数据库迁移的隐秘艺术</title><link>https://blog.cmdragon.cn/posts/74f3348d6729c1bfe7cdde6ac5885633/</link><pubDate>Wed, 14 May 2025 00:02:31 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/74f3348d6729c1bfe7cdde6ac5885633/</guid><description>Alembic是SQLAlchemy作者开发的数据库迁移工具，用于管理数据库结构的版本迭代。其核心工作原理包括版本仓库构建、差异检测机制和迁移脚本生成。FastAPI集成Alembic可实现应用逻辑与数据库结构的同步演进。通过配置&lt;code>alembic/env.py&lt;/code>，Alembic能够扫描模型类并与数据库结构进行对比，生成包含差异操作的迁移脚本。典型命令如&lt;code>alembic revision --autogenerate -m &amp;quot;add user table&amp;quot;&lt;/code>。迁移脚本包含&lt;code>upgrade&lt;/code>和&lt;code>downgrade&lt;/code>方法，分别用于升级和回滚操作。Alembic通过对象关系映射对比实现智能生成，确保数据库结构的准确变更。</description></item><item><title>飞行中的引擎更换：生产环境数据库迁移的艺术与科学</title><link>https://blog.cmdragon.cn/posts/482d0aa759de9951348f04d49e35be14/</link><pubDate>Tue, 13 May 2025 00:06:12 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/482d0aa759de9951348f04d49e35be14/</guid><description>生产环境数据库迁移需确保数据安全性和服务持续性，强调零停机和完整回滚方案。Alembic配置优化包括禁用自动生成迁移、通过环境变量注入数据库URL，并自动生成变更校验脚本。迁移策略涉及版本控制流程和分支管理，确保每次迁移都有明确的升级和回滚路径。安全迁移实践包括蓝绿部署方案和数据一致性验证，通过创建新表、双写数据和原子切换来保障零停机。常见报错解决方案涵盖迁移锁超时、类型变更不兼容和性能下降等问题，通过配置连接池、分阶段变更类型和添加索引来应对。</description></item><item><title>Alembic迁移脚本冲突的智能检测与优雅合并之道</title><link>https://blog.cmdragon.cn/posts/772c8e0f0cc3c705c267676035da7aa9/</link><pubDate>Mon, 12 May 2025 13:10:27 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/772c8e0f0cc3c705c267676035da7aa9/</guid><description>Alembic迁移脚本冲突检测与合并方案主要解决团队协作中的迁移脚本冲突问题。冲突场景包括并行开发、分支合并和环境差异。通过自动化检测脚本&lt;code>check_migration_conflicts.py&lt;/code>可识别多个头版本。手动合并流程包括确定基准版本、创建合并分支和编辑迁移文件。合并后通过测试用例验证迁移的兼容性，确保升级和回滚的一致性。常见报错如“Multiple head revisions”和“Failed to alter column”提供了具体的解决方案，确保迁移过程顺利进行。</description></item><item><title>数据库事务回滚：FastAPI中的存档与读档大法</title><link>https://blog.cmdragon.cn/posts/61f400974ef7e1af22b578822f89237c/</link><pubDate>Sat, 10 May 2025 00:18:52 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/61f400974ef7e1af22b578822f89237c/</guid><description>事务回滚机制确保数据库操作的原子性，适用于需要保持数据一致性的场景，如银行转账。FastAPI通过SQLAlchemy的session管理实现事务控制，使用上下文管理器处理事务，确保在异常时回滚。Alembic用于数据库版本控制，生成迁移脚本并管理多环境迁移策略。综合应用案例展示了用户注册时的事务处理，包括检查用户名唯一性、创建用户及其关联记录，并在异常时回滚。课后Quiz和常见报错解决提供了实际操作中的指导和问题处理方法。</description></item><item><title>Alembic迁移脚本：让数据库变身时间旅行者</title><link>https://blog.cmdragon.cn/posts/4cbe05929a9b90555dc214eec17131c7/</link><pubDate>Fri, 09 May 2025 13:08:18 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4cbe05929a9b90555dc214eec17131c7/</guid><description>Alembic 是一个用于数据库迁移的工具，通过迁移脚本记录数据库结构的变化，确保不同环境的数据库保持同步。其核心工作原理包括模型扫描、数据库快照和差异分析三个阶段。通过 &lt;code>alembic revision --autogenerate&lt;/code> 命令，可以自动生成迁移脚本，对比模型定义与数据库实际结构的差异。高级配置技巧包括自定义上下文配置和处理复杂字段变更。常见错误如数据库版本不一致或字段类型不识别，可通过升级、回滚或添加类型映射解决。最佳实践建议包括及时生成迁移脚本、测试环境保持最新、生产环境变更前备份等。</description></item><item><title>FastAPI与Tortoise-ORM模型配置及aerich迁移工具</title><link>https://blog.cmdragon.cn/posts/785a04f3db818a55f0ddc27edc59d471/</link><pubDate>Wed, 30 Apr 2025 00:11:45 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/785a04f3db818a55f0ddc27edc59d471/</guid><description>FastAPI中使用Tortoise-ORM时，模型类通过继承&lt;code>tortoise.models.Model&lt;/code>并定义&lt;code>class Meta&lt;/code>来映射数据库字段。元数据配置包括表名、schema、表注释和联合唯一约束等。初始化数据库连接推荐使用&lt;code>lifespan&lt;/code>事件处理，配置参数包括数据库URL、模型模块路径等。aerich迁移工具用于管理数据库迁移，通过&lt;code>init-db&lt;/code>、&lt;code>migrate&lt;/code>和&lt;code>upgrade&lt;/code>等命令实现迁移文件的生成和应用。常见问题包括模型注册失败和迁移文件冲突，需检查模型路径和清除冲突文件。</description></item><item><title>PostgreSQL：数据库迁移与版本控制</title><link>https://blog.cmdragon.cn/posts/649f515b93a6caee9dc38f1249e9216e/</link><pubDate>Thu, 06 Feb 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/649f515b93a6caee9dc38f1249e9216e/</guid><description>在现代软件开发中，数据库作为应用程序的核心组件之一，数据的结构和内容必须能够随着业务需求的变化而调整。因此，数据库迁移和版本控制成为了确保数据一致性、完整性，及在多环境下部署的关键环节。尤其在使用 PostgreSQL 这样的关系型数据库时，正确地管理数据库的版本和迁移过程，不仅能够提高开发效率，也能够降低潜在的风险。</description></item></channel></rss>