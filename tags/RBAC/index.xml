<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RBAC on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/RBAC/</link><description>Recent content in RBAC on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 01 Jul 2025 04:52:07 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/RBAC/index.xml" rel="self" type="application/rss+xml"/><item><title>RBAC权限模型如何让API访问控制既安全又灵活？</title><link>https://blog.cmdragon.cn/posts/9f01e838545ae8d34016c759ef461423/</link><pubDate>Tue, 01 Jul 2025 04:52:07 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9f01e838545ae8d34016c759ef461423/</guid><description>RBAC权限模型通过用户、角色和权限的关联实现访问控制，核心组件包括用户、角色、权限和API端点。数据模型使用SQLAlchemy定义，包含用户、角色、权限表及中间关联表。权限校验流程通过中间件实现，动态权限注入支持灵活路由配置。敏感操作审计日志记录用户访问信息，包括时间、端点和处理时长。常见报错如JWTDecodeError和NoneType错误，需检查令牌格式和用户处理。运行环境要求FastAPI、SQLAlchemy等，建议使用SSL加密部署。</description></item><item><title>如何用 FastAPI 和 RBAC 打造坚不可摧的安全堡垒？</title><link>https://blog.cmdragon.cn/posts/d878b5dbef959058b8098551c70594f8/</link><pubDate>Fri, 27 Jun 2025 04:55:19 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d878b5dbef959058b8098551c70594f8/</guid><description>FastAPI 安全认证与 RBAC 系统原理基于角色的访问控制（RBAC）模型，包含用户、角色和权限三个核心要素。通过 JWT 令牌实现认证，动态权限依赖注入进行权限校验。数据模型使用 Pydantic 和 SQLAlchemy 构建，密码存储采用 bcrypt 加密，并引入请求速率限制防止暴力破解。单元测试和错误处理确保系统稳定性，JWT 令牌设置过期时间以降低泄露风险。</description></item><item><title>如何在FastAPI中构建一个既安全又灵活的多层级权限系统？</title><link>https://blog.cmdragon.cn/posts/ff1c8ff1d052374f064d802d37f2a206/</link><pubDate>Sat, 14 Jun 2025 12:43:05 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ff1c8ff1d052374f064d802d37f2a206/</guid><description>FastAPI通过依赖注入系统和OAuth2、JWT等安全方案，支持构建多层级权限系统。系统设计包括基于角色的访问控制、细粒度权限验证、权限继承机制和动态权限加载。通过定义用户角色和权限模型，结合权限验证流程，实现用户权限的动态加载和校验。路由集成示例展示了如何在API端点中应用角色和权限依赖项。高级配置技巧包括动态权限加载和缓存优化。常见错误解决方案针对HTTP 401和403错误提供了排查步骤。</description></item><item><title>如何用FastAPI和Tortoise-ORM打造一个既高效又灵活的角色管理系统？</title><link>https://blog.cmdragon.cn/posts/2b0a2003074eba56a6f6c57aa9690900/</link><pubDate>Wed, 11 Jun 2025 13:18:54 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2b0a2003074eba56a6f6c57aa9690900/</guid><description>角色模型设计包含核心字段如唯一标识、角色名称、描述、启用状态和创建时间。权限关联通过多对多关系实现，角色与权限通过中间表关联。完整的CRUD接口包括创建角色、获取角色信息等操作。数据库关系映射实战展示了如何为角色分配权限。常见报错解决方案提供了初始化数据库和处理请求体字段错误的指导。</description></item><item><title>FastAPI权限迷宫：RBAC与多层级依赖的魔法通关秘籍</title><link>https://blog.cmdragon.cn/posts/ee5486714707d4835d4a774696dca30a/</link><pubDate>Wed, 04 Jun 2025 21:17:50 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ee5486714707d4835d4a774696dca30a/</guid><description>FastAPI权限管理系统通过RBAC（基于角色的访问控制）实现用户与权限的解耦，核心要素包括用户、角色、权限和访问策略。系统使用OAuth2PasswordBearer进行认证，并通过依赖项工厂函数实现权限检查。权限依赖项支持多层级组合，允许组合多个权限检查或创建组合验证函数。常见报错包括HTTP 403 Forbidden和HTTP 401 Unauthorized，建议通过中间件和单元测试进行预防和验证。开发环境配置简单，使用FastAPI、Pydantic和Uvicorn即可快速搭建系统。</description></item></channel></rss>