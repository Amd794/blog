<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>用户认证 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/</link>
    <description>Recent content in 用户认证 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 18 Jun 2025 17:24:12 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何在FastAPI中实现权限隔离并让用户乖乖听话？</title>
      <link>https://blog.cmdragon.cn/posts/74777546a240b16b32196e5eb29ec8f7/</link>
      <pubDate>Wed, 18 Jun 2025 17:24:12 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/74777546a240b16b32196e5eb29ec8f7/</guid>
      <description>权限隔离通过用户身份验证和角色判定限制系统资源访问。FastAPI实现步骤包括用户认证、角色识别和访问控制。认证机制采用OAuth2密码授权流程结合JWT令牌，通过创建角色校验依赖项实现授权系统。进阶权限控制模式包括数据级权限隔离，确保用户只能访问自己的数据。测试与验证使用TestClient进行权限测试，常见报错如401 Unauthorized、403 Forbidden和422 Validation Error均有相应解决方案。</description>
    </item>
    <item>
      <title>如何在FastAPI中轻松实现OAuth2认证并保护你的API？</title>
      <link>https://blog.cmdragon.cn/posts/d17e94efec06a517ca80d0da10c80997/</link>
      <pubDate>Mon, 09 Jun 2025 05:16:05 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/d17e94efec06a517ca80d0da10c80997/</guid>
      <description>OAuth2 是现代应用程序实现安全认证的行业标准协议，通过令牌而非直接使用用户凭证进行授权。FastAPI 提供 &lt;code&gt;OAuth2PasswordBearer&lt;/code&gt; 类支持密码授权模式，流程包括用户提交凭证、服务器验证、生成访问令牌及验证令牌有效性。配置安全模块需安装依赖库并创建 &lt;code&gt;security.py&lt;/code&gt;，包含密码哈希、验证及 JWT 令牌生成功能。用户认证通过模拟数据库实现，提供登录接口和受保护路由。安全路由保护机制依赖 &lt;code&gt;get_current_user&lt;/code&gt; 函数验证令牌。进阶实践包括刷新令牌、权限分级和速率限制，遵循 OWASP 安全规范。</description>
    </item>
    <item>
      <title>数据库安全性与权限管理</title>
      <link>https://blog.cmdragon.cn/posts/9daf904b8e68a5369319cabb062f3af7/</link>
      <pubDate>Mon, 16 Dec 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/9daf904b8e68a5369319cabb062f3af7/</guid>
      <description>数据库安全性与权限管理是保护数据不被未授权访问和操控的关键所在。通过实施有效的安全措施和细粒度的权限控制，可以确保数据库的完整性、机密性和可用性。</description>
    </item>
    <item>
      <title>Nuxt.js 应用中的 app：beforeMount 钩子详解</title>
      <link>https://blog.cmdragon.cn/posts/a84be8813f0e28c0d673fcfc005a023e/</link>
      <pubDate>Fri, 04 Oct 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/a84be8813f0e28c0d673fcfc005a023e/</guid>
      <description>app:beforeMount 是一个强大的钩子，允许开发者在用户界面挂载前控制应用的初始化过程。通过有效利用这一钩子，我们可以优化应用的用户体验，保持状态一致性并高效加载必要数据。合适的实现和良好的设计都能极大提高应用的可用性和性能。</description>
    </item>
    <item>
      <title>Django Admin后台管理：高效开发与实践</title>
      <link>https://blog.cmdragon.cn/posts/0b2b3e994397eac87a215e08b901342a/</link>
      <pubDate>Wed, 08 May 2024 14:24:15 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/0b2b3e994397eac87a215e08b901342a/</guid>
      <description>&lt;img src=&#34;https://static.cmdragon.cn/blog/images/2024_05_08 14_27_23.png@blog&#34; title=&#34;2024_05_08 14_27_23.png&#34; alt=&#34;2024_05_08 14_27_23.png&#34;/&gt;&#xA;&lt;h2 id=&#34;第1章django-admin基础&#34;&gt;&lt;strong&gt;第1章：Django Admin基础&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-django-admin简介&#34;&gt;&lt;strong&gt;1.1 Django Admin简介&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Django Admin是Django框架自带的一个管理后台工具，它允许开发者通过一个直观的Web界面轻松地管理应用中的数据模型。Admin提供了模型的CRUD（Create,&#xA;Read, Update, Delete）操作，以及数据的批量处理和搜索功能，极大地简化了日常的数据库管理。它不仅适用于开发阶段，也非常适合在生产环境中进行数据维护。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
