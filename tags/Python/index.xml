<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/Python/</link><description>Recent content in Python on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 07 Jun 2025 08:40:35 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/Python/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI安全机制：从OAuth2到JWT的魔法通关秘籍</title><link>https://blog.cmdragon.cn/posts/04b73a9a5712e6b51e8c45c35f331e59/</link><pubDate>Sat, 07 Jun 2025 08:40:35 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/04b73a9a5712e6b51e8c45c35f331e59/</guid><description>FastAPI 的安全机制基于 OAuth2 规范、JWT 和依赖注入系统三大核心组件，提供了标准化的授权框架和无状态的身份验证。OAuth2 密码流通过 &lt;code>CryptContext&lt;/code> 进行密码哈希处理，&lt;code>OAuth2PasswordBearer&lt;/code> 自动提取和验证 Bearer Token，JWT 令牌包含过期时间，确保服务端无需存储会话状态。依赖注入系统通过 &lt;code>Depends()&lt;/code> 实现身份验证逻辑的解耦。典型请求流程包括 Token 验证、JWT 解码和用户验证，确保请求的合法性。</description></item><item><title>FastAPI权限迷宫：RBAC与多层级依赖的魔法通关秘籍</title><link>https://blog.cmdragon.cn/posts/ee5486714707d4835d4a774696dca30a/</link><pubDate>Wed, 04 Jun 2025 21:17:50 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ee5486714707d4835d4a774696dca30a/</guid><description>FastAPI权限管理系统通过RBAC（基于角色的访问控制）实现用户与权限的解耦，核心要素包括用户、角色、权限和访问策略。系统使用OAuth2PasswordBearer进行认证，并通过依赖项工厂函数实现权限检查。权限依赖项支持多层级组合，允许组合多个权限检查或创建组合验证函数。常见报错包括HTTP 403 Forbidden和HTTP 401 Unauthorized，建议通过中间件和单元测试进行预防和验证。开发环境配置简单，使用FastAPI、Pydantic和Uvicorn即可快速搭建系统。</description></item><item><title>数据库事务回滚：FastAPI中的存档与读档大法</title><link>https://blog.cmdragon.cn/posts/61f400974ef7e1af22b578822f89237c/</link><pubDate>Sat, 10 May 2025 00:18:52 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/61f400974ef7e1af22b578822f89237c/</guid><description>事务回滚机制确保数据库操作的原子性，适用于需要保持数据一致性的场景，如银行转账。FastAPI通过SQLAlchemy的session管理实现事务控制，使用上下文管理器处理事务，确保在异常时回滚。Alembic用于数据库版本控制，生成迁移脚本并管理多环境迁移策略。综合应用案例展示了用户注册时的事务处理，包括检查用户名唯一性、创建用户及其关联记录，并在异常时回滚。课后Quiz和常见报错解决提供了实际操作中的指导和问题处理方法。</description></item><item><title>Python 与 PostgreSQL 集成：深入 psycopg2 的应用与实践</title><link>https://blog.cmdragon.cn/posts/d8496eacd21bf9342264e22050b82cb3/</link><pubDate>Tue, 04 Feb 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d8496eacd21bf9342264e22050b82cb3/</guid><description>PostgreSQL 作为开源关系型数据库的佼佼者，因其强大的功能与性能被广泛应用于各种项目中。而 Python 则因其简洁易用的语法、丰富的库和强大的数据处理能力，成为数据科学与Web开发领域的重要语言。在这两者的结合中，psycopg2 作为 PostgreSQL 数据库与 Python 之间的桥梁，实现了高效的数据交互。</description></item><item><title>从零开始：Django项目的创建与配置指南</title><link>https://blog.cmdragon.cn/posts/2475bf07d05f2d1a78dd47bfe9a73bd2/</link><pubDate>Thu, 02 May 2024 18:29:33 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2475bf07d05f2d1a78dd47bfe9a73bd2/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_05_02 18_33_49.png@blog" title="2024_05_02 18_33_49.png" alt="2024_05_02 18_33_49.png"/>
&lt;h2 id="django简介">&lt;strong>Django简介：&lt;/strong>&lt;/h2>
&lt;p>Django是一个开源的高级Python Web框架，由法国人Guido
Zempe于2003年创建。它以“快速开发、可维护的网站”为目标，提供了许多内置的功能，如ORM（对象关系映射）、URL路由、模板系统、管理后台等，让开发者能够专注于业务逻辑，而无需从头开始构建网站的底层结构。&lt;/p></description></item><item><title>深入理解正则表达式：从入门到精通</title><link>https://blog.cmdragon.cn/posts/c5baeec7210f3ca0a683234f40132c0e/</link><pubDate>Tue, 30 Apr 2024 18:37:21 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c5baeec7210f3ca0a683234f40132c0e/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_04_30 18_40_18.png@blog" title="2024_04_30 18_40_18.png" alt="2024_04_30 18_40_18.png"/>
&lt;h2 id="第一章正则表达式入门">&lt;strong>第一章：正则表达式入门&lt;/strong>&lt;/h2>
&lt;h3 id="介绍正则表达式的基本概念和语法">&lt;strong>介绍正则表达式的基本概念和语法&lt;/strong> &lt;/h3>
&lt;p>正则表达式是一种用于描述字符串模式的表达式，由普通字符和特殊字符组成。常用的特殊字符包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>.&lt;/code>：匹配任意单个字符&lt;/li>
&lt;li>&lt;code>*&lt;/code>：匹配前面的字符0次或多次&lt;/li>
&lt;li>&lt;code>+&lt;/code>：匹配前面的字符1次或多次&lt;/li>
&lt;li>&lt;code>?&lt;/code>：匹配前面的字符0次或1次&lt;/li>
&lt;li>&lt;code>[]&lt;/code>：匹配括号内的任意一个字符&lt;/li>
&lt;li>&lt;code>^&lt;/code>：匹配字符串的开头&lt;/li>
&lt;li>&lt;code>$&lt;/code>：匹配字符串的结尾&lt;/li>
&lt;li>&lt;code>\d&lt;/code>：匹配任意数字&lt;/li>
&lt;li>&lt;code>\w&lt;/code>：匹配任意字母、数字或下划线&lt;/li>
&lt;li>&lt;code>\s&lt;/code>：匹配任意空白字符&lt;/li>
&lt;/ul>
&lt;h3 id="正则表达式在文本处理中的应用场景">&lt;strong>正则表达式在文本处理中的应用场景&lt;/strong> &lt;/h3>
&lt;p>正则表达式在文本处理中有广泛的应用场景，例如：&lt;/p></description></item><item><title>Python多线程编程深度探索：从入门到实战</title><link>https://blog.cmdragon.cn/posts/8d7b4344fdbb3d86c53804ac8f3b6fb6/</link><pubDate>Sun, 28 Apr 2024 18:57:17 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8d7b4344fdbb3d86c53804ac8f3b6fb6/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_04_28 19_06_58.png@blog" title="2024_04_28 19_06_58.png" alt="2024_04_28 19_06_58.png"/>
&lt;h2 id="第1章python基础知识与多线程概念">&lt;strong>第1章：Python基础知识与多线程概念&lt;/strong>&lt;/h2>
&lt;h3 id="python简介">&lt;strong>Python简介：&lt;/strong>&lt;/h3>
&lt;p>Python是一种高级、通用、解释型的编程语言，由Guido van
Rossum于1991年创建。Python以其简洁、易读的语法而闻名，被广泛用于Web开发、数据科学、人工智能等领域。Python具有丰富的标准库和第三方库，支持多种编程范式，包括面向对象、函数式和过程式编程。&lt;/p></description></item><item><title>深入理解Python协程：从基础到实战</title><link>https://blog.cmdragon.cn/posts/5d1545ed32733a56b5e71c7ee880a847/</link><pubDate>Sat, 27 Apr 2024 16:48:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5d1545ed32733a56b5e71c7ee880a847/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_04_27 17_03_18.png@blog" title="2024_04_27 17_03_18.png" alt="2024_04_27 17_03_18.png"/>
&lt;img src="https://static.cmdragon.cn/blog/images/2024_04_27 17_05_32.png@blog" title="2024_04_27 17_05_32.png" alt="2024_04_27 17_05_32.png"/>
&lt;h2 id="第1章协程基础">&lt;strong>第1章：协程基础&lt;/strong>&lt;/h2>
&lt;h3 id="11-协程概念介绍">&lt;strong>1.1 协程概念介绍&lt;/strong>&lt;/h3>
&lt;p>协程（Coroutines）是一种特殊的软件构造，它允许程序在执行过程中暂停并恢复执行，而不会丢失当前的执行上下文。与线程和进程不同，协程在单个线程中运行，通过调度机制实现并发，降低了上下文切换的开销，提高了程序的执行效率。协程通常用于处理I/O密集型任务，如网络请求、文件读写等。&lt;/p></description></item></channel></rss>