<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>动态 on cmdragon's Blog</title><link>/tags/%E5%8A%A8%E6%80%81/</link><description>Recent content in 动态 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 01 Dec 2024 00:18:53 +0800</lastBuildDate><atom:link href="/tags/%E5%8A%A8%E6%80%81/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 render：island 事件钩子</title><link>/posts/a788981a66c14c5edd407545ac29b6ee/</link><pubDate>Sun, 01 Dec 2024 00:18:53 +0800</pubDate><guid>/posts/a788981a66c14c5edd407545ac29b6ee/</guid><description>在 Nuxt.js 中，render:island 钩子允许开发者在构建“岛屿”HTML之前进行处理和修改。此钩子为实现复杂的客户端交互和动态内容提供了基本支持，特别适合与服务器渲染和客户端渲染混合使用的场景。</description></item><item><title>Nuxt.js 应用中的 render：html 事件钩子</title><link>/posts/e2e4ffc078733570a7b98d6f0dd9ea13/</link><pubDate>Sat, 30 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/e2e4ffc078733570a7b98d6f0dd9ea13/</guid><description>在构建 HTML 内容时，能够对其进行动态修改是非常有用的。render:html 钩子为开发者提供了在 HTML 被构建之前的最后机会去调整内容。这对于自定义渲染行为、注入额外的脚本或数据，以及实现复杂的 SEO 优化等场景非常重要。</description></item><item><title>Nuxt.js 应用中的 vite：configResolved 事件钩子</title><link>/posts/2d9f94579481d38e0e9a7569cdfc31cb/</link><pubDate>Sun, 17 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/2d9f94579481d38e0e9a7569cdfc31cb/</guid><description>在 Nuxt 3 中，vite:configResolved 钩子允许开发者在 Vite 配置被解析后访问已解析的配置项。这使得在构建过程中能够根据最终的配置进行动态调整和扩展。</description></item><item><title>Nuxt.js 应用中的 schema：beforeWrite 事件钩子详解</title><link>/posts/9303f1529d95797ca3241f21e2fbc34d/</link><pubDate>Thu, 14 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/9303f1529d95797ca3241f21e2fbc34d/</guid><description>schema:beforeWrite 钩子是 Vite 提供的一个功能强大的生命周期钩子，允许开发者在 JSON Schema 被写入之前执行自定义操作。利用这个钩子，您可以对模式进行修改、添加验证逻辑或动态调整配置选项，从而提高应用的灵活性和定制化水平。</description></item><item><title>Nuxt.js 应用中的 prerender：routes 事件钩子详解</title><link>/posts/7a11deaf9e3d140fd18d7ad3cde4b9d7/</link><pubDate>Wed, 06 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/7a11deaf9e3d140fd18d7ad3cde4b9d7/</guid><description>prerender:routes 是 Nuxt.js 中的一个钩子，允许开发者在预渲染过程中扩展要预渲染的路由列表。这对于静态站点生成（SSG）尤为重要，开发者可以根据需求添加额外的动态路由或者其他需要预渲染的页面。</description></item><item><title>Nuxt.js 应用中的 components：extend 事件钩子详解</title><link>/posts/1189b069abd2cfe9869abbbb4f7f340b/</link><pubDate>Fri, 01 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/1189b069abd2cfe9869abbbb4f7f340b/</guid><description>components:extend 是 Nuxt.js 中的一个生命周期钩子，允许开发者扩展新的组件到项目中。通过这个钩子，开发者可以动态地添加额外的组件，从而增强项目的功能和灵活性。</description></item><item><title>Nuxt.js 应用中的 components：dirs 事件钩子详解</title><link>/posts/06467028093d81da701fced5b84150cb/</link><pubDate>Thu, 31 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/06467028093d81da701fced5b84150cb/</guid><description>components:dirs 是 Nuxt.js 中的一个生命周期钩子，用于在 app:resolve 期间扩展自动导入组件的目录。通过这个钩子，开发者可以动态地添加新的组件目录，从而增强项目的灵活性和可扩展性。</description></item><item><title>Nuxt.js 应用中的 imports：context 事件钩子详解</title><link>/posts/e94c7e1071e2541e95713c53eafd79ef/</link><pubDate>Tue, 29 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/e94c7e1071e2541e95713c53eafd79ef/</guid><description>imports:context 是 Nuxt.js 中的一个生命周期钩子，主要用于在创建 unimport 上下文时调用。这个钩子为开发者提供了对模块导入上下文的操作能力，方便进行动态编译和导入配置。</description></item><item><title>Nuxt.js 应用中的 imports：extend 事件钩子详解</title><link>/posts/1d6dcd3025621c288fddb7d17465133c/</link><pubDate>Mon, 28 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/1d6dcd3025621c288fddb7d17465133c/</guid><description>imports:extend 是 Nuxt.js 中的一个生命周期钩子，允许开发者在模块设置过程中扩展导入。使用此钩子，开发者可以灵活地管理和调整模块的导入配置，从而增强模块的功能。</description></item><item><title>Nuxt Kit 中的页面和路由管理</title><link>/posts/ca15f62138ac0f090f2b9c215756b50a/</link><pubDate>Tue, 17 Sep 2024 00:18:53 +0800</pubDate><guid>/posts/ca15f62138ac0f090f2b9c215756b50a/</guid><description>摘要：本文介绍了Nuxt Kit中页面和路由管理的高级功能，包括extendPages自定义页面路由、extendRouteRules定义复杂路由逻辑及addRouteMiddleware注册路由中间件。通过这些功能，开发者能够灵活地添加、修改路由，设置缓存、重定向等，并实现访问控制等中间件处理，以提升Web应用的开发效率和可维护性。</description></item><item><title>使用 updateAppConfig 更新 Nuxt 应用配置</title><link>/posts/870198cdff2bbd91a5af2182da7662a8/</link><pubDate>Tue, 27 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/870198cdff2bbd91a5af2182da7662a8/</guid><description>通过使用 updateAppConfig，你可以轻松地在应用运行时更新配置，而无需重新启动应用。这对于需要在运行时调整设置的应用场景非常有用。</description></item><item><title>如何在 Nuxt 中动态设置页面布局</title><link>/posts/4c7fb169913298de59cbe19fcbaac8d3/</link><pubDate>Sat, 24 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/4c7fb169913298de59cbe19fcbaac8d3/</guid><description>摘要：本文介绍如何在Nuxt框架中通过设置setPageLayout函数动态调整页面布局，包括安装Nuxt、创建不同布局文件及中间件，并通过示例演示如何根据不同路径设置相应布局。</description></item><item><title>使用 addRouteMiddleware 动态添加中间</title><link>/posts/0988eb75d14a8fc3b0db7d072206b8a8/</link><pubDate>Sun, 04 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/0988eb75d14a8fc3b0db7d072206b8a8/</guid><description>摘要：文章介绍了Nuxt3中addRouteMiddleware的使用方法，该功能允许开发者动态添加路由中间件，以实现诸如权限检查、动态重定向及路由变化时的特定操作。内容涵盖路由中间件的概念、addRouteMiddleware的语法、参数、使用示例（包括匿名中间件、命名中间件、全局中间件、覆盖现有中间件）及调试技巧。强调了此功能为Nuxt3应用带来的灵活性和便利性。</description></item><item><title>useRoute 函数的详细介绍与使用示例</title><link>/posts/f78b155dac56741becfa07c51c38dc0f/</link><pubDate>Sat, 27 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/f78b155dac56741becfa07c51c38dc0f/</guid><description>摘要：本文介绍了Nuxt.js中useRoute函数的详细用途与示例，展示了如何在组合式API中使用useRoute获取当前路由信息，包括动态参数、查询参数等，并提供了丰富的计算引用说明，如fullPath、hash、matched等，以及如何正确访问查询参数。</description></item><item><title>使用 `useAppConfig` ：轻松管理应用配置</title><link>/posts/9e044d4b53eab6a1bec49bb86b4c856c/</link><pubDate>Thu, 11 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/9e044d4b53eab6a1bec49bb86b4c856c/</guid><description>摘要：本文介绍了Nuxt开发中useAppConfig的使用，它便于访问和管理应用配置，支持动态加载资源、环境配置切换、权限管理、主题切换和配置文件集中管理等功能，通过实例展示了如何在Nuxt项目中应用此工具以实现配置灵活性和应用维护性。</description></item></channel></rss>