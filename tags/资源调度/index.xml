<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>资源调度 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/</link>
    <description>Recent content in 资源调度 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 29 Apr 2024 20:49:41 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入理解Python多进程：从基础到实战</title>
      <link>https://blog.cmdragon.cn/posts/e812fcfaa2f6e1e4e25715242373b47b/</link>
      <pubDate>Mon, 29 Apr 2024 20:49:41 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/e812fcfaa2f6e1e4e25715242373b47b/</guid>
      <description>&lt;img src=&#34;https://static.cmdragon.cn/blog/images/2024_04_29 20_53_37.png@blog&#34; title=&#34;2024_04_29 20_53_37.png&#34; alt=&#34;2024_04_29 20_53_37.png&#34;/&gt;&#xA;&lt;h2 id=&#34;引言&#34;&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;在Python编程中，多进程是一种重要的并发编程方式，可以让我们充分利用多核处理器的计算能力，实现并行处理任务，提高程序的运行效率。与多线程相比，多进程具有独立的内存空间，避免了全局解释器锁（GIL）的影响，因此更适合于CPU密集型的任务。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
