<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>资源调度 on cmdragon's Blog</title><link>/tags/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/</link><description>Recent content in 资源调度 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 29 Apr 2024 20:49:41 +0800</lastBuildDate><atom:link href="/tags/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>深入理解Python多进程：从基础到实战</title><link>/posts/e812fcfaa2f6e1e4e25715242373b47b/</link><pubDate>Mon, 29 Apr 2024 20:49:41 +0800</pubDate><guid>/posts/e812fcfaa2f6e1e4e25715242373b47b/</guid><description>&lt;img src="/images/2024_04_29 20_53_37.png" title="2024_04_29 20_53_37.png" alt="2024_04_29 20_53_37.png"/>
&lt;h2 id="引言">&lt;strong>引言&lt;/strong>&lt;/h2>
&lt;p>在Python编程中，多进程是一种重要的并发编程方式，可以让我们充分利用多核处理器的计算能力，实现并行处理任务，提高程序的运行效率。与多线程相比，多进程具有独立的内存空间，避免了全局解释器锁（GIL）的影响，因此更适合于CPU密集型的任务。&lt;/p></description></item></channel></rss>