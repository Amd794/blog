<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>路由 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E8%B7%AF%E7%94%B1/</link><description>Recent content in 路由 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 06 Nov 2024 00:18:53 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E8%B7%AF%E7%94%B1/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 prerender：routes 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/7a11deaf9e3d140fd18d7ad3cde4b9d7/</link><pubDate>Wed, 06 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7a11deaf9e3d140fd18d7ad3cde4b9d7/</guid><description>prerender:routes 是 Nuxt.js 中的一个钩子，允许开发者在预渲染过程中扩展要预渲染的路由列表。这对于静态站点生成（SSG）尤为重要，开发者可以根据需求添加额外的动态路由或者其他需要预渲染的页面。</description></item><item><title>Nuxt.js 应用中的 pages：extend 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/22eb7478a08b6f78043cd5fae24c7ad4/</link><pubDate>Fri, 25 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/22eb7478a08b6f78043cd5fae24c7ad4/</guid><description>pages:extend 是 Nuxt.js 中的一个生命周期钩子，在页面路由解析完成后被调用。这个钩子允许开发者添加、修改或删除路由配置，为自定义页面路由的管理提供灵活性，进而影响整个应用的导航。</description></item><item><title>Nuxt Kit 中的页面和路由管理</title><link>https://blog.cmdragon.cn/posts/ca15f62138ac0f090f2b9c215756b50a/</link><pubDate>Tue, 17 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ca15f62138ac0f090f2b9c215756b50a/</guid><description>摘要：本文介绍了Nuxt Kit中页面和路由管理的高级功能，包括extendPages自定义页面路由、extendRouteRules定义复杂路由逻辑及addRouteMiddleware注册路由中间件。通过这些功能，开发者能够灵活地添加、修改路由，设置缓存、重定向等，并实现访问控制等中间件处理，以提升Web应用的开发效率和可维护性。</description></item><item><title>如何在 Nuxt 中动态设置页面布局</title><link>https://blog.cmdragon.cn/posts/4c7fb169913298de59cbe19fcbaac8d3/</link><pubDate>Sat, 24 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4c7fb169913298de59cbe19fcbaac8d3/</guid><description>摘要：本文介绍如何在Nuxt框架中通过设置setPageLayout函数动态调整页面布局，包括安装Nuxt、创建不同布局文件及中间件，并通过示例演示如何根据不同路径设置相应布局。</description></item><item><title>使用 prerenderRoutes 进行预渲染路由</title><link>https://blog.cmdragon.cn/posts/87586efe60054fbbb53f151d9025f356/</link><pubDate>Tue, 20 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/87586efe60054fbbb53f151d9025f356/</guid><description>prerenderRoutes 函数是 Nuxt 3 中一个强大的工具，它能够帮助开发者优化页面加载速度和改善用户体验。通过使用 prerenderRoutes，你能够灵活地指定需要预渲染的路由，提升网站性能和 SEO 效果。</description></item><item><title>使用 onBeforeRouteUpdate 组合式函数提升应用的用户体验</title><link>https://blog.cmdragon.cn/posts/d400882a80839b72cf628a6de608f0e8/</link><pubDate>Thu, 15 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d400882a80839b72cf628a6de608f0e8/</guid><description>摘要：本文介绍如何在Nuxt 3开发中使用onBeforeRouteUpdate组合式函数来提升应用用户体验。通过在组件中注册路由更新守卫，开发者能够在路由变更前执行特定操作，如权限检查或数据更新，示例展示了在User.vue组件中使用此功能的过程与注意事项。</description></item><item><title>使用 onBeforeRouteLeave 组合式函数提升应用的用户体验</title><link>https://blog.cmdragon.cn/posts/ec76c32456eed5c68935b916beb053c2/</link><pubDate>Wed, 14 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ec76c32456eed5c68935b916beb053c2/</guid><description>摘要：本文介绍了在Nuxtjs中使用onBeforeRouteLeave组合式函数来提升应用用户体验的方法。onBeforeRouteLeave允许在组件离开当前路由前执行逻辑，如处理路由变化、清理资源、保存数据等。文章通过示例展示了如何在Vue组件中注册此守卫，解释了其参数含义及使用注意事项，并提供了完整示例代码，强调了此功能对增强用户体验的重要性。</description></item><item><title>使用 navigateTo 实现灵活的路由导航</title><link>https://blog.cmdragon.cn/posts/f68163dee0a38a46b874f4885c661f48/</link><pubDate>Tue, 13 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f68163dee0a38a46b874f4885c661f48/</guid><description>摘要：本文详细介绍 Nuxt.js 中的 navigateTo 函数，包括基本用法、在路由中间件中使用、导航到外部 URL 和新标签页打开链接的方法，以及参数详解和注意事项，展示了该函数在程序化导航中的灵活性和强大功能。</description></item><item><title>掌握 Nuxt 3 的页面元数据：使用 definePageMeta 进行自定义配置</title><link>https://blog.cmdragon.cn/posts/e0ecc27dccf7a9a8d8bf9a2d4fd3f00b/</link><pubDate>Sun, 11 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e0ecc27dccf7a9a8d8bf9a2d4fd3f00b/</guid><description>摘要：本文详细介绍Nuxt 3框架中definePageMeta的使用方法，包括如何为页面组件定义元数据，如布局、过渡效果、路由中间件等。通过具体示例展示了如何设置各项元数据属性，以及如何利用definePageMeta定制页面布局和中间件逻辑，增强应用程序的路由管理和页面控制能力。</description></item><item><title>使用 defineNuxtRouteMiddleware 创建路由中间件</title><link>https://blog.cmdragon.cn/posts/9820edb9b255785446531ea7b1ac2269/</link><pubDate>Sat, 10 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9820edb9b255785446531ea7b1ac2269/</guid><description>本篇文章介绍了如何使用 &lt;code>defineNuxtRouteMiddleware&lt;/code> 创建和应用路由中间件。通过示例演示了如何处理错误页面和身份验证逻辑。随着对 Nuxt.js 中间件的理解，你可以更灵活地控制应用的路由行为，从而提升用户体验。</description></item><item><title>清除 Nuxt 数据缓存：clearNuxtData</title><link>https://blog.cmdragon.cn/posts/b14ec150986ae8b8e56d2c37637e04fd/</link><pubDate>Tue, 06 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b14ec150986ae8b8e56d2c37637e04fd/</guid><description>摘要：本文详细介绍了Nuxt.js框架中的clearNuxtData方法，用于清除useAsyncData和useFetch缓存的数据、错误状态和待处理promises，以实现数据的实时更新和重载。通过实际示例展示了在不同页面如何应用clearNuxtData来提升用户体验和数据新鲜度，包括方法签名、使用场景及具体代码实现步骤。</description></item><item><title>使用 addRouteMiddleware 动态添加中间</title><link>https://blog.cmdragon.cn/posts/0988eb75d14a8fc3b0db7d072206b8a8/</link><pubDate>Sun, 04 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0988eb75d14a8fc3b0db7d072206b8a8/</guid><description>摘要：文章介绍了Nuxt3中addRouteMiddleware的使用方法，该功能允许开发者动态添加路由中间件，以实现诸如权限检查、动态重定向及路由变化时的特定操作。内容涵盖路由中间件的概念、addRouteMiddleware的语法、参数、使用示例（包括匿名中间件、命名中间件、全局中间件、覆盖现有中间件）及调试技巧。强调了此功能为Nuxt3应用带来的灵活性和便利性。</description></item><item><title>使用 abortNavigation 阻止导航</title><link>https://blog.cmdragon.cn/posts/52bba0b4e019da067ec5092a151c2bce/</link><pubDate>Sat, 03 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/52bba0b4e019da067ec5092a151c2bce/</guid><description>摘要：在Nuxt3中，abortNavigation是一个辅助函数，用于路由中间件内阻止不符合条件的页面访问，实现权限控制、错误处理及动态重定向，提升用户体验和应用可靠性</description></item><item><title>useRoute 函数的详细介绍与使用示例</title><link>https://blog.cmdragon.cn/posts/f78b155dac56741becfa07c51c38dc0f/</link><pubDate>Sat, 27 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f78b155dac56741becfa07c51c38dc0f/</guid><description>摘要：本文介绍了Nuxt.js中useRoute函数的详细用途与示例，展示了如何在组合式API中使用useRoute获取当前路由信息，包括动态参数、查询参数等，并提供了丰富的计算引用说明，如fullPath、hash、matched等，以及如何正确访问查询参数。</description></item><item><title>Nuxt 3 路由系统详解：配置与实践指南</title><link>https://blog.cmdragon.cn/posts/3edf792d5e89f8a9aba11ef2a862f865/</link><pubDate>Fri, 21 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/3edf792d5e89f8a9aba11ef2a862f865/</guid><description>摘要：本文是一份关于Nuxt 3路由系统的详尽指南。它从介绍Nuxt 3的基本概念开始，包括Nuxt 3与Nuxt 2的区别和选择Nuxt 3的理由。然后，它详细解释了安装和配置Nuxt 3的步骤，以及Nuxt 3路由系统的基础知识，如动态路由和嵌套路由。接着，它介绍了路由中间件的作用和编写自定义中间件的方法，并讨论了页面布局、导航链接和页面过渡效果。最后，它涵盖了高级路由技巧，如异步数据获取、错误页面处理和路由守卫，以及实战案例分析，包括博客系统路由设计、电商网站路由设计和多语言支持的路由实现。最后，它讨论了性能优化与安全，包括路由懒加载、路由安全性和性能监控与调试。</description></item><item><title>Vue TypeScript 实战：掌握静态类型编程</title><link>https://blog.cmdragon.cn/posts/5fd5f7ddeea4d0fcae77f0c558181bc2/</link><pubDate>Mon, 10 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5fd5f7ddeea4d0fcae77f0c558181bc2/</guid><description>这篇文章介绍了如何在TypeScript环境下为Vue.js应用搭建项目结构，包括初始化配置、创建Vue组件、实现状态管理利用Vuex、配置路由以及性能优化的方法，旨在提升开发效率与应用性能。</description></item><item><title>深入理解Vue 3：计算属性与侦听器的艺术</title><link>https://blog.cmdragon.cn/posts/b204a37c95c2bd49a83eec82eaa8a6a0/</link><pubDate>Thu, 30 May 2024 03:53:47 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b204a37c95c2bd49a83eec82eaa8a6a0/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_05_30 16_02_10.png@blog" title="2024_05_30 16_02_10.png" alt="2024_05_30 16_02_10.png"/>
&lt;h2 id="前言">前言&lt;/h2>
&lt;h3 id="vue-3的新特性简介">Vue 3的新特性简介&lt;/h3>
&lt;p>Vue.js作为当今流行的前端框架之一，以其响应式数据绑定和组件化架构著称。随着技术的不断演进，Vue
3带来了许多令人期待的新特性，这些特性不仅使得Vue.js更加高效和灵活，也为开发者提供了更好的开发体验。&lt;/p></description></item></channel></rss>