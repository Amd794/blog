<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>单例模式 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 单例模式 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 12 Apr 2025 00:53:48 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FastAPI依赖注入性能优化策略</title>
      <link>https://blog.cmdragon.cn/posts/80f30f46ece634f36b143b3a1fe6e82a/</link>
      <pubDate>Sat, 12 Apr 2025 00:53:48 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/80f30f46ece634f36b143b3a1fe6e82a/</guid>
      <description>FastAPI依赖注入机制通过将对象创建与使用分离，提升了代码的可测试性和可维护性。优化策略包括区分同步与异步依赖，异步依赖适用于I/O密集型操作；使用&lt;code&gt;lru_cache&lt;/code&gt;缓存依赖计算结果，减少重复计算；对数据库连接等重量级资源采用单例模式。实战案例展示了用户认证系统的优化方案，通过缓存JWT解码结果提高性能。开发环境配置和常见报错处理也提供了具体指导。</description>
    </item>
    <item>
      <title>FastAPI依赖注入实践：工厂模式与实例复用的优化策略</title>
      <link>https://blog.cmdragon.cn/posts/a7c81698b93b9fa1034ac8c246a62d50/</link>
      <pubDate>Sun, 06 Apr 2025 01:22:25 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/a7c81698b93b9fa1034ac8c246a62d50/</guid>
      <description>FastAPI依赖注入系统中，类依赖的默认行为是为每个请求创建新实例，可能导致性能问题。通过工厂模式控制实例创建过程，可解耦配置和服务实例化，支持依赖层级嵌套，符合单一职责原则。使用lru_cache实现带缓存的工厂模式，优化高频调用场景性能。单例模式实现真正的单例依赖，请求级别复用策略在请求处理周期内复用实例。实际应用场景包括配置中心集成和多租户系统，动态配置加载和租户感知的依赖注入。常见报错解决方案涉及422 Validation Error和依赖项初始化失败。</description>
    </item>
  </channel>
</rss>
