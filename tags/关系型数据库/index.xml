<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>关系型数据库 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 关系型数据库 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Apr 2025 10:51:41 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FastAPI与Tortoise-ORM实现关系型数据库关联</title>
      <link>https://blog.cmdragon.cn/posts/75c1dff8b6b9960d1d47750094e29f2c/</link>
      <pubDate>Mon, 21 Apr 2025 10:51:41 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/75c1dff8b6b9960d1d47750094e29f2c/</guid>
      <description>FastAPI与Tortoise-ORM结合实现关系型数据库关联，支持1:1、1:N和M:N关系。1:N关系通过&lt;code&gt;ForeignKeyField&lt;/code&gt;定义，M:N关系使用&lt;code&gt;ManyToManyField&lt;/code&gt;处理。Pydantic模型用于数据验证和序列化，路由实现中通过&lt;code&gt;prefetch_related&lt;/code&gt;优化查询性能。M:N关系通过中间表操作，支持复杂查询。常见报错包括422验证错误和外键约束失败，可通过事务和类型检查解决。安装依赖后，使用uvicorn启动服务进行测试。</description>
    </item>
    <item>
      <title>深入理解唯一约束：确保数据完整性的关键因素</title>
      <link>https://blog.cmdragon.cn/posts/573e556ece0cb56c6d637ae77d5365c0/</link>
      <pubDate>Sun, 19 Jan 2025 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/573e556ece0cb56c6d637ae77d5365c0/</guid>
      <description>在关系数据库中，唯一约束是一种重要的数据库约束，用于确保表中某一列或多列的值是唯一的，从而防止重复数据的出现。唯一约束不仅提高了数据的完整性和一致性，还在一定程度上影响了数据库的设计和性能。</description>
    </item>
    <item>
      <title>深入理解主键和外键：数据库设计的基石</title>
      <link>https://blog.cmdragon.cn/posts/e7b9587a1dd95061a9ad68f21253a7e9/</link>
      <pubDate>Sat, 18 Jan 2025 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/e7b9587a1dd95061a9ad68f21253a7e9/</guid>
      <description>在现代信息系统中，数据的管理和存储是至关重要的。关系数据库作为一种广泛使用的数据存储方式，其设计的合理性直接影响到数据的完整性和系统的性能。在关系数据库中，主键和外键是实现数据完整性和表之间关系的基础。理解这两个概念对于数据库设计师和开发者来说至关重要。</description>
    </item>
    <item>
      <title>深入理解第三范式（3NF）：数据库设计中的重要性与实践</title>
      <link>https://blog.cmdragon.cn/posts/9846ca869e2521a8047b8bf9e02982e5/</link>
      <pubDate>Fri, 17 Jan 2025 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/9846ca869e2521a8047b8bf9e02982e5/</guid>
      <description>在数据库设计中，规范化是确保数据完整性、减少冗余和提高查询效率的关键过程。第三范式（3NF）作为关系数据库设计的高级规范，建立在前两范式（1NF和2NF）的基础上，重点关注消除传递依赖，以确保表中的每个非主属性都直接依赖于主键并且不依赖于其他非主属性。</description>
    </item>
    <item>
      <title>深入理解第二范式（2NF）：提升数据库设计的有效性与灵活性</title>
      <link>https://blog.cmdragon.cn/posts/3a1285874fe0b0cf82ecb541e185d68b/</link>
      <pubDate>Thu, 16 Jan 2025 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/3a1285874fe0b0cf82ecb541e185d68b/</guid>
      <description>数据库的规范化是确保数据完整性和消除数据冗余的关键过程。第二范式（2NF）是关系数据库设计中的重要概念，进一步建立在第一范式的基础之上。通过消除部分依赖关系，2NF 确保每个非主属性完全依赖于主键，降低了数据冗余和更新异常的风险。</description>
    </item>
    <item>
      <title>深入理解第一范式（1NF）：数据库设计中的基础与实践</title>
      <link>https://blog.cmdragon.cn/posts/0ba4cbf2dd926750d5421e9d415ecc88/</link>
      <pubDate>Wed, 15 Jan 2025 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/0ba4cbf2dd926750d5421e9d415ecc88/</guid>
      <description>在关系型数据库设计中，规范化是确保数据一致性和减少冗余的重要步骤。第一范式（1NF）作为规范化的基础，要求每个表都应遵循数据的原子性及唯一性原则。通过将数据拆分为更小的、原子的单元，1NF 能有效降低数据冗余以及更新异常，提高数据查询的效率。</description>
    </item>
    <item>
      <title>探索自联接（SELF JOIN）：揭示数据间复杂关系的强大工具</title>
      <link>https://blog.cmdragon.cn/posts/f152dfcce73ed63594e329a1fb42c278/</link>
      <pubDate>Sat, 11 Jan 2025 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/f152dfcce73ed63594e329a1fb42c278/</guid>
      <description>自联接（SELF JOIN）是一种特殊的联接操作，在同一表中多次引用自己，从而允许开发者获取更复杂的数据关系。通过自联接，可以有效处理层级、映射和关联数据的查找，极大丰富了 SQL 查询的灵活性和表达能力。</description>
    </item>
    <item>
      <title>PostgreSQL 的特点</title>
      <link>https://blog.cmdragon.cn/posts/85f705fff8b5d3b6de86201182505997/</link>
      <pubDate>Tue, 24 Dec 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/85f705fff8b5d3b6de86201182505997/</guid>
      <description>PostgreSQL 是当今最流行的开源关系型数据库之一，凭借其优秀的性能、稳定性和丰富的功能集在用户群中享有极高声誉。相比于其他关系型数据库管理系统，PostgreSQL 拥有许多独特的特点，使其在不同应用场景中脱颖而出。</description>
    </item>
    <item>
      <title>PostgreSQL 的历史</title>
      <link>https://blog.cmdragon.cn/posts/ec72d05b061aace28804afdaf816d609/</link>
      <pubDate>Mon, 23 Dec 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/ec72d05b061aace28804afdaf816d609/</guid>
      <description>PostgreSQL 是一款功能强大且广泛使用的开源关系型数据库管理系统。其历史可以追溯到1986年，当时由加州大学伯克利分校的一个研究团队开发。文章将深入探讨 PostgreSQL 的起源、发展历程、关键版本更新以及它如何在数据库技术的演变中占据重要地位。通过分析 PostgreSQL 的设计哲学、社区支持和市场应用。</description>
    </item>
    <item>
      <title>数据库与数据库管理系统概述</title>
      <link>https://blog.cmdragon.cn/posts/495759d2b2ea6ec77f578da7b4bb69b5/</link>
      <pubDate>Sat, 07 Dec 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/495759d2b2ea6ec77f578da7b4bb69b5/</guid>
      <description>在信息化迅速发展的时代，数据已成为企业和组织的重要资产。数据库与数据库管理系统（DBMS）是高效存储、管理和利用数据的核心工具。本文首先定义了数据库的基本概念和特点，随后介绍了数据库管理系统的主要功能，并探讨了关系型与非关系型数据库之间的区别。通过理解这些基础知识，读者将为后续深入学习数据库技术和应用打下坚实的基础。</description>
    </item>
  </channel>
</rss>
