<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>请求 on cmdragon's Blog</title><link>/tags/%E8%AF%B7%E6%B1%82/</link><description>Recent content in 请求 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 04 Dec 2024 00:18:53 +0800</lastBuildDate><atom:link href="/tags/%E8%AF%B7%E6%B1%82/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 request 事件钩子</title><link>/posts/d821e2e0d8af1f6e0a02aa2f6cddf24e/</link><pubDate>Wed, 04 Dec 2024 00:18:53 +0800</pubDate><guid>/posts/d821e2e0d8af1f6e0a02aa2f6cddf24e/</guid><description>在构建现代 Web 应用时，处理请求是核心内容之一。无论是从后端获取数据，还是处理用户请求、验证和授权，正确地处理请求能够确保应用的稳定性、可维护性和用户体验。Nuxt.js 提供了 request 钩子，允许开发者在接收到请求时进行自定义处理，这为复杂应用提供了极大的灵活性。</description></item><item><title>Nuxt.js 应用中的 listen 事件钩子详解</title><link>/posts/59f320ae722d9803c0c4eb42ccb295b2/</link><pubDate>Sat, 09 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/59f320ae722d9803c0c4eb42ccb295b2/</guid><description>它为开发者提供了一个自由的空间可以在开发服务器启动时插入自定义逻辑。通过合理利用这个钩子，开发者能够提升代码的可维护性和调试能力。注意处理性能、错误和环境等方面的问题可以帮助您构建一个更加稳定和高效的应用。</description></item><item><title>Nuxt.js 应用中的 server：devHandler 事件钩子详解</title><link>/posts/e3271aac91ec30fc15176811b001ed48/</link><pubDate>Sat, 26 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/e3271aac91ec30fc15176811b001ed48/</guid><description>server:devHandler 是 Nuxt.js 中的一个生命周期钩子，它在 Nitro 开发服务器注册开发中间件时被调用。使用这个钩子，开发者可以为开发服务器添加自定义中间件，从而丰富应用的处理逻辑和功能。</description></item><item><title>使用 useRequestEvent Hook 访问请求事件</title><link>/posts/7f6aeaffdd673a716b7f013f59aa69af/</link><pubDate>Tue, 23 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/7f6aeaffdd673a716b7f013f59aa69af/</guid><description>摘要：本文介绍Nuxt 3中useRequestEventHook的使用，可访问请求路径、方法和头部信息，适用于SSR环境下处理请求逻辑，如中间件、插件及API路由。仅服务器端生效，需注意安全性。</description></item></channel></rss>