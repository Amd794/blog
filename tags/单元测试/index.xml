<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>单元测试 on cmdragon's Blog</title><link>/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link><description>Recent content in 单元测试 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 18 Jun 2025 10:11:53 +0800</lastBuildDate><atom:link href="/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中玩转权限控制与测试，让代码安全又优雅？</title><link>/posts/6de8fc7807cadec4d735ea5771cecf3a/</link><pubDate>Wed, 18 Jun 2025 10:11:53 +0800</pubDate><guid>/posts/6de8fc7807cadec4d735ea5771cecf3a/</guid><description>FastAPI通过依赖注入系统实现权限控制，使用&lt;code>Depends()&lt;/code>函数接收权限验证依赖项，验证流程包括解析凭证、验证有效性并提取用户角色。权限层级划分为公共端点、用户级端点和管理员端点。单元测试使用&lt;code>pytest&lt;/code>验证权限逻辑，集成测试通过&lt;code>httpx&lt;/code>模拟请求。完整测试案例包括用户系统权限测试和覆盖率提升技巧。常见问题如401和403错误，解决方案包括检查请求头和用户角色分配。安全加固建议使用HTTPS、设置令牌有效期和记录审计日志。</description></item><item><title>FastAPI与SQLAlchemy数据库集成</title><link>/posts/c89a99dade2879f73464405270096546/</link><pubDate>Thu, 17 Apr 2025 15:33:34 +0800</pubDate><guid>/posts/c89a99dade2879f73464405270096546/</guid><description>FastAPI与SQLAlchemy的集成通过创建虚拟环境、安装依赖、配置数据库连接、定义数据模型和实现路由来完成。核心模块包括数据库引擎、会话工厂和声明性基类。数据模型通过SQLAlchemy定义，路由通过FastAPI实现，支持创建和查询用户。测试接口通过curl命令进行，常见报错包括表不存在、请求体验证错误和会话不可用。高级配置涉及连接池优化和单元测试。</description></item><item><title>FastAPI依赖覆盖与测试环境模拟</title><link>/posts/8a2bd816fabac0bc10bd2cf8494e4631/</link><pubDate>Thu, 10 Apr 2025 00:58:09 +0800</pubDate><guid>/posts/8a2bd816fabac0bc10bd2cf8494e4631/</guid><description>FastAPI的依赖覆盖机制通过重写依赖项实现运行环境切换，适用于隔离测试和模拟特定场景。依赖项存储在&lt;code>dependency_overrides&lt;/code>字典中，优先检查覆盖字典，使用&lt;code>@app.dependency_overrides&lt;/code>装饰器进行临时替换，测试完成后自动恢复。通过pytest搭建测试环境，覆盖数据库依赖，使用&lt;code>TestClient&lt;/code>进行测试。多场景模拟测试案例包括用户权限验证和第三方API模拟，分层测试策略涵盖单元测试、集成测试和E2E测试。最佳实践包括使用pytest参数化进行多场景测试，确保测试覆盖率统计包含依赖注入代码。常见报错如&lt;code>DependencyOverrideNotFound&lt;/code>和&lt;code>TestClient响应验证失败&lt;/code>，可通过检查依赖项定义、模拟数据格式和类型注解解决。</description></item></channel></rss>