<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据验证 on cmdragon's Blog</title><link>/tags/%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/</link><description>Recent content in 数据验证 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 25 Apr 2025 21:37:36 +0800</lastBuildDate><atom:link href="/tags/%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/index.xml" rel="self" type="application/rss+xml"/><item><title>使用Tortoise-ORM和FastAPI构建评论系统</title><link>/posts/97d9c275881a38c29b26f565d83be9d3/</link><pubDate>Fri, 25 Apr 2025 21:37:36 +0800</pubDate><guid>/posts/97d9c275881a38c29b26f565d83be9d3/</guid><description>在models.py中定义了Comment模型，包含id、content、created_at、updated_at字段，并与User和Article模型建立外键关系。schemas.py中定义了CommentBase、CommentCreate、CommentUpdate和CommentResponse等Pydantic模型，用于数据验证和响应。路由层实现了创建、获取和删除评论的API，使用get_or_none处理不存在的评论，并捕获异常。测试接口通过requests进行创建和异常测试。常见报错包括外键约束失败、验证错误和事件循环未关闭，需检查外键值、请求体匹配和正确关闭事件循环。</description></item><item><title>分层架构在博客评论功能中的应用与实现</title><link>/posts/45bda70cffd2384b83a2df842b61b93a/</link><pubDate>Thu, 24 Apr 2025 12:45:43 +0800</pubDate><guid>/posts/45bda70cffd2384b83a2df842b61b93a/</guid><description>分层架构在Web应用开发中提升代码可维护性和扩展性，博客评论功能采用四层结构设计：路由层处理HTTP请求与响应，服务层封装业务逻辑，模型层定义数据结构和数据库操作，Schema层负责数据验证与序列化。这种结构实现职责分离、易于测试、代码复用和扩展灵活。模型层通过&lt;code>prefetch_related&lt;/code>预加载关联数据，Schema层使用继承结构减少重复定义，服务层封装业务逻辑并处理异常，路由层通过路径参数和依赖注入实现接口。项目结构清晰，运行环境配置简单，常见报错处理方案完善。</description></item><item><title>FastAPI中实现动态条件必填字段的实践</title><link>/posts/93a6982db6ac68a0d9c55169460eda68/</link><pubDate>Thu, 03 Apr 2025 00:06:20 +0800</pubDate><guid>/posts/93a6982db6ac68a0d9c55169460eda68/</guid><description>在 FastAPI 中，使用 Pydantic 模型实现动态条件必填字段时，需结合 &lt;code>Field&lt;/code> 的 &lt;code>depends&lt;/code> 参数、&lt;code>@model_validator(mode='before')&lt;/code> 装饰器和条件判断逻辑。例如，用户注册接口根据 &lt;code>register_type&lt;/code> 动态决定 &lt;code>email&lt;/code> 或 &lt;code>mobile&lt;/code> 字段是否必填，并在 &lt;code>accept_promotion=True&lt;/code> 时要求至少填写一种联系方式。通过 &lt;code>@model_validator&lt;/code> 在类型转换前验证字段值，确保数据符合条件。测试用例和常见报错解决方案帮助调试和优化验证逻辑。</description></item><item><title>FastAPI中的Pydantic密码验证机制与实现</title><link>/posts/a72a86da313f399c29b36ec08f75361d/</link><pubDate>Mon, 31 Mar 2025 00:04:51 +0800</pubDate><guid>/posts/a72a86da313f399c29b36ec08f75361d/</guid><description>FastAPI 中通过 Pydantic 模型实现密码验证，采用分层机制确保高效与灵活扩展。验证流程包括基础类型检查、长度验证、复杂度验证和泄露检测，任一阶段失败即终止后续验证。通过 &lt;code>SecretStr&lt;/code> 安全获取密码明文，结合正则表达式验证密码复杂度，并利用哈希函数检测密码是否泄露。模块化设计便于后续添加更多安全规则，如密码过期策略和历史密码比对。</description></item><item><title>深入理解检查约束：确保数据质量的重要工具</title><link>/posts/309f74bd85c733fb7a2cd79990d7af9b/</link><pubDate>Mon, 20 Jan 2025 00:18:53 +0800</pubDate><guid>/posts/309f74bd85c733fb7a2cd79990d7af9b/</guid><description>在数据库管理中，检查约束是一种重要的约束类型，用于确保表中某一列或某些列的数据符合特定条件，从而维护数据的有效性和一致性。检查约束通过对数据的有效性进行验证，防止无效或不合逻辑的数据进入数据库。</description></item><item><title>深入了解HMAC加密技术：原理、应用与实践</title><link>/posts/2778e05282193f6f54f058c4f706e715/</link><pubDate>Tue, 30 Jan 2024 16:49:00 +0800</pubDate><guid>/posts/2778e05282193f6f54f058c4f706e715/</guid><description>&lt;img src="../../images/2024_02_03 18_28_56.png" title="2024_02_03 18_28_56.png" alt="2024_02_03 18_28_56.png"/>
&lt;h2 id="一引言">一、引言&lt;/h2>
&lt;p>在网络安全领域，消息认证码（MAC）是一种重要的技术手段。Hash-based Message Authentication Code（HMAC）作为其中的一种，凭借其简单、高效、安全的特性，广泛应用于各种网络通信场景。本文将详细介绍HMAC的原理、应用与实践，帮助读者深入了解这一技术。&lt;/p></description></item></channel></rss>