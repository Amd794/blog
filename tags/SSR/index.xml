<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SSR on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/SSR/</link>
    <description>Recent content in SSR on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 29 Nov 2024 00:18:53 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/SSR/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nuxt.js 应用中的 render：response 事件钩子</title>
      <link>https://blog.cmdragon.cn/posts/b12508be9c4fb6b8f0499948ecd68ad9/</link>
      <pubDate>Fri, 29 Nov 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/b12508be9c4fb6b8f0499948ecd68ad9/</guid>
      <description>render:response 是一个在 Nuxt.js 中与服务器端渲染（SSR）相关的钩子，它会在请求的响应发送之前被调用。这个钩子的目的是让开发者可以在响应发送之前对响应进行修改或处理。此钩子接收两个参数：response 和 event。</description>
    </item>
    <item>
      <title>Nuxt.js 应用中的 dev：ssr-logs 事件钩子</title>
      <link>https://blog.cmdragon.cn/posts/ef86af3b9be34b11d75fa32951b147bd/</link>
      <pubDate>Thu, 28 Nov 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/ef86af3b9be34b11d75fa32951b147bd/</guid>
      <description>dev:ssr-logs 是一个用在服务器端渲染（SSR）中，用于输出日志的事件钩子。这个钩子会在请求周期结束时被调用，产生的参数包括日志路径与日志内容。这对于调试和监控服务器端的行为非常有用，特别是在开发环境下。</description>
    </item>
    <item>
      <title>Nuxt.js 应用中的 app：redirected 钩子详解</title>
      <link>https://blog.cmdragon.cn/posts/0a403b28ba9828265f24d658ed1d54d5/</link>
      <pubDate>Thu, 03 Oct 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/0a403b28ba9828265f24d658ed1d54d5/</guid>
      <description>app:redirected 是 Nuxt.js 中的一个钩子，主要用于处理服务器端渲染（SSR）过程中发生的重定向。该钩子在重定向被执行之前被调用，允许开发者在重定向发生前进行一些操作，比如执行条件检查、日志记录等。</description>
    </item>
    <item>
      <title>Nuxt Kit 中的上下文处理</title>
      <link>https://blog.cmdragon.cn/posts/0c616d045fcf8bf6026e64847e449417/</link>
      <pubDate>Mon, 16 Sep 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/0c616d045fcf8bf6026e64847e449417/</guid>
      <description>Nuxt Kit 提供的上下文处理工具，尤其是 useNuxt 和 tryUseNuxt，为模块化开发提供了极大的便利。通过这些函数，开发者可以方便地访问 Nuxt 实例，从而更好地管理应用配置。</description>
    </item>
    <item>
      <title>使用 setResponseStatus 函数设置响应状态码</title>
      <link>https://blog.cmdragon.cn/posts/302e9ee7406d6304cf38978e07b4480c/</link>
      <pubDate>Sun, 25 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/302e9ee7406d6304cf38978e07b4480c/</guid>
      <description>通过 setResponseStatus 函数，你可以轻松地在 Nuxt.js 中设置响应的状态码。这不仅能帮助用户更好地理解发生了什么，还能在需要时显示自定义的错误页面。在实际应用中，合理使用状态码对于提升用户体验至关重要。</description>
    </item>
    <item>
      <title>使用 $fetch 进行 HTTP 请求</title>
      <link>https://blog.cmdragon.cn/posts/a189c208200be9973a4dd8d9029f2ab2/</link>
      <pubDate>Fri, 02 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/a189c208200be9973a4dd8d9029f2ab2/</guid>
      <description>摘要：文章介绍了Nuxt3中使用$fetch进行HTTP请求的方法，它是基于ofetch库，支持SSR和自动缓存。$fetch简化了HTTP请求，支持GET、POST等，可结合useAsyncData或useFetch优化数据获取，避免重复请求，适用于服务器端渲染。</description>
    </item>
    <item>
      <title>使用 useState 管理响应式状态</title>
      <link>https://blog.cmdragon.cn/posts/760deff1b835b737dc6396ad0e4cc8d4/</link>
      <pubDate>Thu, 01 Aug 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/760deff1b835b737dc6396ad0e4cc8d4/</guid>
      <description>摘要：本文详细介绍了在Nuxt3框架中使用useState进行响应式状态管理的方法，包括其基本概念、优势、使用方法、共享状态实现以及性能优化技巧。useState支持服务器端渲染（SSR），可创建响应式状态并在组件间共享，通过具体示例展示了其基本用法、如何在多个组件间共享状态以及使用shallowRef提升性能。</description>
    </item>
    <item>
      <title>Nuxt.js必读：轻松掌握运行时配置与 useRuntimeConfig</title>
      <link>https://blog.cmdragon.cn/posts/bbb706a14f541c1932c5a42b4cab92a6/</link>
      <pubDate>Mon, 29 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/bbb706a14f541c1932c5a42b4cab92a6/</guid>
      <description>本文详细介绍了Nuxt.js中的运行时配置功能，包括定义和使用运行时配置的方法，以及如何通过useRuntimeConfig访问配置。同时，讲解了环境变量与.env文件的使用，特别是在不同环境下的配置管理。</description>
    </item>
    <item>
      <title>服务端渲染中的数据获取：结合 useRequestHeaders 与 useFetch</title>
      <link>https://blog.cmdragon.cn/posts/c88fddf7a8ad9112ff80c9a25cda09d2/</link>
      <pubDate>Wed, 24 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/c88fddf7a8ad9112ff80c9a25cda09d2/</guid>
      <description>摘要：本文介绍Vue服务端渲染中使用useRequestHeaders获取请求头部信息，如cookie和authorization，示例展示了如何在SSR环境下结合useFetch进行API调用，注意浏览器环境返回空对象。</description>
    </item>
    <item>
      <title>使用 useRequestEvent Hook 访问请求事件</title>
      <link>https://blog.cmdragon.cn/posts/7f6aeaffdd673a716b7f013f59aa69af/</link>
      <pubDate>Tue, 23 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/7f6aeaffdd673a716b7f013f59aa69af/</guid>
      <description>摘要：本文介绍Nuxt 3中useRequestEventHook的使用，可访问请求路径、方法和头部信息，适用于SSR环境下处理请求逻辑，如中间件、插件及API路由。仅服务器端生效，需注意安全性。</description>
    </item>
    <item>
      <title>Nuxt 3 使用指南：掌握 useNuxtApp 和运行时上下文</title>
      <link>https://blog.cmdragon.cn/posts/074b9dedf36fca34d1469e455c71d583/</link>
      <pubDate>Sun, 21 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/074b9dedf36fca34d1469e455c71d583/</guid>
      <description>摘要：“Nuxt 3 使用指南：掌握 useNuxtApp 和运行时上下文”介绍了Nuxt 3中useNuxtApp的使用，包括访问Vue实例、运行时钩子、配置变量和SSR上下文。文章详细说明了provide和hook函数的应用，以及如何在插件和组件中利用这些功能。同时，探讨了vueApp属性、ssrContext和payload的使用场景，以及isHydrating和runWithContext方法的作用。</description>
    </item>
    <item>
      <title>Nuxt.js 中使用 useHydration 实现数据水合与同步</title>
      <link>https://blog.cmdragon.cn/posts/c7ddeca4690387e7e08c83e6c482a576/</link>
      <pubDate>Thu, 18 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/c7ddeca4690387e7e08c83e6c482a576/</guid>
      <description>摘要：介绍Nuxt.js中useHydration函数，用于控制客户端与服务器数据同步，实现数据水合。参数包括key、get和set函数，适用于多种场景，示例展示数据获取与显示流程。</description>
    </item>
    <item>
      <title>探索Nuxt.js的useFetch：高效数据获取与处理指南</title>
      <link>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</link>
      <pubDate>Mon, 15 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</guid>
      <description>摘要：“探索Nuxt.js的useFetch：高效数据获取与处理指南”详述了Nuxt.js中useFetch函数的使用，包括基本用法、动态参数获取、拦截器使用，及参数详解。文章通过示例展示了如何从API获取数据，处理动态参数，自定义请求和响应，以及useFetch和useAsyncData的参数选项，帮助开发者掌握异步数据加载技巧。</description>
    </item>
    <item>
      <title>useCookie函数：管理SSR环境下的Cookie</title>
      <link>https://blog.cmdragon.cn/posts/ddb1976c3f6b7b52a03dd0c383e9a790/</link>
      <pubDate>Sat, 13 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/ddb1976c3f6b7b52a03dd0c383e9a790/</guid>
      <description>摘要：本文详述了useCookie函数在服务器端渲染(SSR)中的应用，包括读写Cookie、配置选项如maxAge、expires、httpOnly、secure、domain、path及SameSite，并提供了encode、decode、default、watch等高级用法示例，以及如何在API路由中操作Cookie。</description>
    </item>
    <item>
      <title>轻松掌握useAsyncData获取异步数据</title>
      <link>https://blog.cmdragon.cn/posts/e1b1c62b5975f8ebfa61adc507591cf7/</link>
      <pubDate>Fri, 12 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/e1b1c62b5975f8ebfa61adc507591cf7/</guid>
      <description>摘要：本文详细介绍Nuxt.js中的useAsyncData组合式函数，它用于在服务端渲染(SSR)过程中异步获取数据，确保客户端正确水合，避免重复请求。内容包括基本概念、参数说明（key, handler, options）、示例用法、如何监听参数变化自动刷新数据及返回值详解，展示了在页面组件中使用useAsyncData的具体方式和注意事项。</description>
    </item>
    <item>
      <title>Nuxt框架中内置组件详解及使用指南（一）</title>
      <link>https://blog.cmdragon.cn/posts/214c7ef07a7b90e1787f10ea626320e3/</link>
      <pubDate>Sat, 06 Jul 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/214c7ef07a7b90e1787f10ea626320e3/</guid>
      <description>本文详细介绍了Nuxt框架中的两个内置组件&lt;ClientOnly&gt;和&lt;NuxtClientFallback&gt;的使用方法与功能。&lt;ClientOnly&gt;确保包裹的内容仅在客户端渲染，适用于处理浏览器特定功能或异步数据加载。而&lt;NuxtClientFallback&gt;是一个实验性组件，用于在SSR过程中遇到子组件错误时，在客户端渲染备选内容，提高应用稳定性。文章通过示例代码展示了这两个组件的具体应用方式和相关属性配置。</description>
    </item>
    <item>
      <title>Nuxt3 的生命周期和钩子函数（二）</title>
      <link>https://blog.cmdragon.cn/posts/035ad4b6880c8ceb996e156237ce5d89/</link>
      <pubDate>Wed, 26 Jun 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/035ad4b6880c8ceb996e156237ce5d89/</guid>
      <description>摘要：本文深入介绍了Nuxt.js框架中几个关键的生命周期钩子函数，包括app:redirected（SSR环境下重定向前触发）、app:beforeMount（CSR下应用挂载前）、app:mounted（CSR下Vue应用在浏览器挂载时）、app:suspense:resolve（CSR中Suspense组件解析子组件完成时）以及link:prefetch（CSR中NuxtLink预取链接时）和page:start（CSR页面渲染启动时）。通过代码示例展示了如何利用defineNuxtPlugin定义插件并借助nuxtApp.hook监听这些钩子以执行特定任务，强调了各钩子的应用场景及在客户端和服务器端的不同行为。</description>
    </item>
    <item>
      <title>Nuxt 3 路由系统详解：配置与实践指南</title>
      <link>https://blog.cmdragon.cn/posts/3edf792d5e89f8a9aba11ef2a862f865/</link>
      <pubDate>Fri, 21 Jun 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/3edf792d5e89f8a9aba11ef2a862f865/</guid>
      <description>摘要：本文是一份关于Nuxt 3路由系统的详尽指南。它从介绍Nuxt 3的基本概念开始，包括Nuxt 3与Nuxt 2的区别和选择Nuxt 3的理由。然后，它详细解释了安装和配置Nuxt 3的步骤，以及Nuxt 3路由系统的基础知识，如动态路由和嵌套路由。接着，它介绍了路由中间件的作用和编写自定义中间件的方法，并讨论了页面布局、导航链接和页面过渡效果。最后，它涵盖了高级路由技巧，如异步数据获取、错误页面处理和路由守卫，以及实战案例分析，包括博客系统路由设计、电商网站路由设计和多语言支持的路由实现。最后，它讨论了性能优化与安全，包括路由懒加载、路由安全性和性能监控与调试。</description>
    </item>
    <item>
      <title>安装 Nuxt.js 的步骤和注意事项</title>
      <link>https://blog.cmdragon.cn/posts/9280ced43b0f3e88e4a3856b3ce4464d/</link>
      <pubDate>Mon, 17 Jun 2024 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/9280ced43b0f3e88e4a3856b3ce4464d/</guid>
      <description>Nuxt.js在Vue.js基础上提供的服务器端渲染框架优势，包括提高开发效率、代码维护性和应用性能。指南详细说明了从环境准备、Nuxt.js安装配置到进阶部署技巧，涵盖错误解决、性能优化及Docker、CI/CD实践，为开发者构建高效Web应用提供全面攻略。</description>
    </item>
  </channel>
</rss>
