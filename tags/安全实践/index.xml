<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安全实践 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/</link><description>Recent content in 安全实践 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 01 Jul 2025 15:37:22 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中巧妙玩转数据脱敏，让敏感信息安全无忧？</title><link>https://blog.cmdragon.cn/posts/045021f8831a03bcdf71e44cb793baf4/</link><pubDate>Tue, 01 Jul 2025 15:37:22 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/045021f8831a03bcdf71e44cb793baf4/</guid><description>FastAPI框架中，数据脱敏通过Pydantic模型标记敏感字段，使用SecretStr类型自动隐藏敏感数据，并配置模型以排除特定字段。响应数据动态脱敏策略包括响应模型过滤、动态字段排除和条件脱敏实现。第三方加密服务集成如Vault，提供加密数据和密钥管理功能。常见问题如422验证错误和Vault连接超时，通过检查请求体、验证字段类型和更新客户端令牌解决。环境配置和代码验证方法确保安全实践的有效性。</description></item><item><title>FastAPI 核心机制：分页参数的实现与最佳实践</title><link>https://blog.cmdragon.cn/posts/8821ab1186b05252feda20836609463e/</link><pubDate>Thu, 13 Mar 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8821ab1186b05252feda20836609463e/</guid><description>在构建现代Web应用程序时，分页是一个不可或缺的功能。无论是处理大量数据还是优化用户体验，分页都起到了至关重要的作用。本文将深入探讨如何在FastAPI中实现分页参数（如page、page_size以及总页数计算），并涵盖相关的核心机制、最佳实践、常见问题及解决方案。</description></item><item><title>Django性能之道：缓存应用与优化实战</title><link>https://blog.cmdragon.cn/posts/887a0a7da3a77358a6c56b53de583bfd/</link><pubDate>Sat, 11 May 2024 18:34:22 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/887a0a7da3a77358a6c56b53de583bfd/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/2024_05_11 18_37_29.png" title="2024_05_11 18_37_29.png" alt="2024_05_11 18_37_29.png"/>
&lt;p>&lt;strong>引言&lt;/strong>&lt;/p>
&lt;p>在当今的互联网时代，用户对网站和应用程序的性能要求越来越高。一个响应迅速、加载快速的网站不仅能提升用户体验，还能在搜索引擎排名中占据优势。Django，作为一个高级Python
Web框架，以其快速开发和干净、实用的设计而闻名。然而，即使是最优化的Django应用，也可能因为频繁的数据库查询、复杂的计算或外部API调用而变得缓慢。这就是缓存发挥作用的地方。&lt;/p></description></item></channel></rss>