<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/API/</link><description>Recent content in API on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 25 Sep 2024 00:18:53 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/API/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt Kit 实用工具的使用示例</title><link>https://blog.cmdragon.cn/posts/da99cebfd9827341b9b542b233ed4a09/</link><pubDate>Wed, 25 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/da99cebfd9827341b9b542b233ed4a09/</guid><description>摘要：本文介绍了Nuxt Kit工具在开发集成工具或插件时，如何访问和修改Nuxt应用中使用的Vite或webpack配置，以实现定制化构建需求。内容包括功能概述、项目示例、详细步骤说明了如何访问Vite配置及Webpack配置，并通过代码示例展示了配置过程，最后总结了Nuxt Kit在此类操作中的作用和优势。</description></item><item><title>使用 nuxi add 快速创建 Nuxt 应用组件</title><link>https://blog.cmdragon.cn/posts/917849288e8e1cc200cdd37a60e48387/</link><pubDate>Wed, 28 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/917849288e8e1cc200cdd37a60e48387/</guid><description>通过使用 nuxi add 命令，你可以快速创建 Nuxt 应用中的各种实体，如组件、页面、布局等。这可以极大地提高开发效率，减少手动创建文件的工作量。希望本文的示例和解释能够帮助你更好地使用 nuxi add 命令来加速你的开发过程。</description></item><item><title>使用 $fetch 进行 HTTP 请求</title><link>https://blog.cmdragon.cn/posts/a189c208200be9973a4dd8d9029f2ab2/</link><pubDate>Fri, 02 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a189c208200be9973a4dd8d9029f2ab2/</guid><description>摘要：文章介绍了Nuxt3中使用$fetch进行HTTP请求的方法，它是基于ofetch库，支持SSR和自动缓存。$fetch简化了HTTP请求，支持GET、POST等，可结合useAsyncData或useFetch优化数据获取，避免重复请求，适用于服务器端渲染。</description></item><item><title>useRoute 函数的详细介绍与使用示例</title><link>https://blog.cmdragon.cn/posts/f78b155dac56741becfa07c51c38dc0f/</link><pubDate>Sat, 27 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f78b155dac56741becfa07c51c38dc0f/</guid><description>摘要：本文介绍了Nuxt.js中useRoute函数的详细用途与示例，展示了如何在组合式API中使用useRoute获取当前路由信息，包括动态参数、查询参数等，并提供了丰富的计算引用说明，如fullPath、hash、matched等，以及如何正确访问查询参数。</description></item><item><title>探索Nuxt.js的useFetch：高效数据获取与处理指南</title><link>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</link><pubDate>Mon, 15 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</guid><description>摘要：“探索Nuxt.js的useFetch：高效数据获取与处理指南”详述了Nuxt.js中useFetch函数的使用，包括基本用法、动态参数获取、拦截器使用，及参数详解。文章通过示例展示了如何从API获取数据，处理动态参数，自定义请求和响应，以及useFetch和useAsyncData的参数选项，帮助开发者掌握异步数据加载技巧。</description></item></channel></rss>