<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>线程池 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
    <description>Recent content in 线程池 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 25 Apr 2024 17:32:02 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入理解多线程编程</title>
      <link>https://blog.cmdragon.cn/posts/adaeacb52ca7729c73c2d63d95a0ffe2/</link>
      <pubDate>Thu, 25 Apr 2024 17:32:02 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/adaeacb52ca7729c73c2d63d95a0ffe2/</guid>
      <description>&lt;img src=&#34;https://static.cmdragon.cn/blog/images/2024_04_25 17_38_00.png@blog&#34; title=&#34;2024_04_25 17_38_00.png&#34; alt=&#34;2024_04_25 17_38_00.png&#34;/&gt;&#xA;&lt;h2 id=&#34;第一章多线程基础&#34;&gt;&lt;strong&gt;第一章：多线程基础&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-线程概念与原理&#34;&gt;&lt;strong&gt;1.1 线程概念与原理&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;线程&lt;/strong&gt;：在操作系统中，一个程序可以被划分为多个执行流，每个执行流就是一个独立的线程。线程是进程中的一个执行实体，它可以拥有自己的局部变量、栈和程序计数器。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;并发执行&lt;/strong&gt;：线程允许程序同时执行多个任务，每个任务在单个处理器核心上交替执行，看起来像是同时进行的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;线程与进程的区别&lt;/strong&gt;：线程是进程内的一个执行单元，进程是资源分配和独立执行的基本单位。一个进程可以包含多个线程，但一个线程只能属于一个进程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-多线程编程的优势&#34;&gt;&lt;strong&gt;1.2 多线程编程的优势&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;提高响应性&lt;/strong&gt;：多线程允许程序在等待I/O操作时继续执行其他任务，提高用户体验。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;资源利用&lt;/strong&gt;：通过并发，可以更有效地利用处理器的多核心优势，提高系统性能。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;任务并行&lt;/strong&gt;：适合处理大量独立或部分独立的计算任务，如网络请求、文件处理等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;13-多线程编程的应用场景&#34;&gt;&lt;strong&gt;1.3 多线程编程的应用场景&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Web服务器&lt;/strong&gt;：处理并发请求，每个请求作为独立的线程处理。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;游戏开发&lt;/strong&gt;：游戏中的多线程用于音频、图形渲染和逻辑处理的分离。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据分析&lt;/strong&gt;：大数据处理、机器学习中的并行计算。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;用户界面&lt;/strong&gt;：线程可以用于实现后台任务的异步执行，避免阻塞UI线程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;14-线程的创建与销毁&#34;&gt;&lt;strong&gt;1.4 线程的创建与销毁&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;创建线程&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
