<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>负载均衡 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link><description>Recent content in 负载均衡 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 19 Dec 2024 00:18:53 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>数据库高可用性与容灾</title><link>https://blog.cmdragon.cn/posts/9b112ce59562391d4d1715085047b32c/</link><pubDate>Thu, 19 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9b112ce59562391d4d1715085047b32c/</guid><description>在现代企业中，数据库的高可用性和容灾能力至关重要。为了保证业务的连续性，必须确保数据库在发生故障或灾难时能够快速恢复和持续可用。将探讨实现数据库高可用性和容灾的策略，包括主从复制、负载均衡、集群技术和备份恢复机制，帮助读者了解如何构建健壮的数据库环境。</description></item><item><title>Django与微服务架构：构建可扩展的Web应用</title><link>https://blog.cmdragon.cn/posts/61b57747a82113c01f83b72ade53c352/</link><pubDate>Tue, 21 May 2024 20:15:19 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/61b57747a82113c01f83b72ade53c352/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_05_21 20_18_51.png@blog" title="2024_05_21 20_18_51.png" alt="2024_05_21 20_18_51.png"/>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在当今快速发展的软件开发领域，微服务架构已经成为构建可扩展、灵活且易于维护的系统的热门选择。微服务架构通过将大型应用程序分解为一组小型、独立的服务来工作，每个服务都围绕特定的业务功能构建，并可以独立开发、部署和扩展。这种架构模式的优势在于提高了系统的灵活性和可维护性，同时允许团队以更快的速度迭代和部署新功能。&lt;/p></description></item></channel></rss>