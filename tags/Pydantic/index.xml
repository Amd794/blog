<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pydantic on cmdragon's Blog</title><link>/tags/Pydantic/</link><description>Recent content in Pydantic on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 25 Apr 2025 21:37:36 +0800</lastBuildDate><atom:link href="/tags/Pydantic/index.xml" rel="self" type="application/rss+xml"/><item><title>使用Tortoise-ORM和FastAPI构建评论系统</title><link>/posts/97d9c275881a38c29b26f565d83be9d3/</link><pubDate>Fri, 25 Apr 2025 21:37:36 +0800</pubDate><guid>/posts/97d9c275881a38c29b26f565d83be9d3/</guid><description>在models.py中定义了Comment模型，包含id、content、created_at、updated_at字段，并与User和Article模型建立外键关系。schemas.py中定义了CommentBase、CommentCreate、CommentUpdate和CommentResponse等Pydantic模型，用于数据验证和响应。路由层实现了创建、获取和删除评论的API，使用get_or_none处理不存在的评论，并捕获异常。测试接口通过requests进行创建和异常测试。常见报错包括外键约束失败、验证错误和事件循环未关闭，需检查外键值、请求体匹配和正确关闭事件循环。</description></item><item><title>FastAPI数据库集成与事务管理</title><link>/posts/0df867e01706fcb9c2e16ea07671a9e4/</link><pubDate>Fri, 18 Apr 2025 00:15:34 +0800</pubDate><guid>/posts/0df867e01706fcb9c2e16ea07671a9e4/</guid><description>FastAPI与SQLAlchemy集成指南：首先配置SQLite数据库连接，创建会话工厂和声明性基类。定义用户模型并映射表结构，使用Pydantic进行数据验证。通过依赖项获取数据库会话，实现用户创建和转账功能。事务控制通过显式开始事务和错误处理确保数据一致性。常见问题包括422验证错误、500服务器错误和完整性错误，需检查请求体、数据库连接和约束。课后Quiz解答事务回滚、SQL注入防护和并发写操作处理。</description></item><item><title>FastAPI与SQLAlchemy同步数据库集成</title><link>/posts/b3bb21bb0bd4c0c405cde6e4f370652c/</link><pubDate>Tue, 15 Apr 2025 01:27:37 +0800</pubDate><guid>/posts/b3bb21bb0bd4c0c405cde6e4f370652c/</guid><description>FastAPI与SQLAlchemy集成通过ORM框架实现Python类与数据库表的双向转换。SQLAlchemy提供Core层和ORM层，FastAPI选择ORM层以符合Pythonic风格。声明式模型通过&lt;code>declarative_base()&lt;/code>创建基类，定义数据库结构。数据库引擎通过连接字符串配置，会话管理机制确保操作生命周期。完整示例展示了用户管理API的实现，包括创建和查询接口。常见问题涉及会话报错和数据验证错误，解决方案包括检查表结构和验证请求格式。高级配置技巧包括复合索引优化和事务管理。</description></item><item><title>FastAPI中实现动态条件必填字段的实践</title><link>/posts/93a6982db6ac68a0d9c55169460eda68/</link><pubDate>Thu, 03 Apr 2025 00:06:20 +0800</pubDate><guid>/posts/93a6982db6ac68a0d9c55169460eda68/</guid><description>在 FastAPI 中，使用 Pydantic 模型实现动态条件必填字段时，需结合 &lt;code>Field&lt;/code> 的 &lt;code>depends&lt;/code> 参数、&lt;code>@model_validator(mode='before')&lt;/code> 装饰器和条件判断逻辑。例如，用户注册接口根据 &lt;code>register_type&lt;/code> 动态决定 &lt;code>email&lt;/code> 或 &lt;code>mobile&lt;/code> 字段是否必填，并在 &lt;code>accept_promotion=True&lt;/code> 时要求至少填写一种联系方式。通过 &lt;code>@model_validator&lt;/code> 在类型转换前验证字段值，确保数据符合条件。测试用例和常见报错解决方案帮助调试和优化验证逻辑。</description></item><item><title>FastAPI中Pydantic异步分布式唯一性校验</title><link>/posts/e92a3da8b4e4beaf5a14ef4c79489b42/</link><pubDate>Wed, 02 Apr 2025 00:47:55 +0800</pubDate><guid>/posts/e92a3da8b4e4beaf5a14ef4c79489b42/</guid><description>FastAPI开发中，异步分布式唯一性校验通过异步IO、分布式锁和二级缓存技术解决传统同步校验的并发冲突、性能瓶颈和响应延迟问题。手机和邮箱的唯一性校验通过Pydantic模型定义、异步校验服务层和路由层集成实现。多级缓存策略结合本地缓存、Redis和数据库，确保数据一致性。Redis分布式锁防止并发冲突，速率限制中间件防止恶意请求。常见报错包括锁超时和非法手机号，需调整锁超时时间和净化输入。</description></item><item><title>掌握FastAPI与Pydantic的跨字段验证技巧</title><link>/posts/2e0c3ce718a08345f384ace84e80e891/</link><pubDate>Tue, 01 Apr 2025 00:32:07 +0800</pubDate><guid>/posts/2e0c3ce718a08345f384ace84e80e891/</guid><description>FastAPI中的Pydantic跨字段一致性验证用于处理用户注册、表单提交等场景中多个字段的联合验证需求。Pydantic通过验证器装饰器和根验证器实现字段间的联合判断，如密码确认、邮箱匹配等。文章详细介绍了验证器的基础用法、最佳实践示例以及如何在FastAPI中集成验证逻辑。进阶技巧包括自定义验证方法和组合验证规则。常见报错解决方案和最佳实践总结帮助开发者构建健壮的API系统。</description></item><item><title>FastAPI中的Pydantic密码验证机制与实现</title><link>/posts/a72a86da313f399c29b36ec08f75361d/</link><pubDate>Mon, 31 Mar 2025 00:04:51 +0800</pubDate><guid>/posts/a72a86da313f399c29b36ec08f75361d/</guid><description>FastAPI 中通过 Pydantic 模型实现密码验证，采用分层机制确保高效与灵活扩展。验证流程包括基础类型检查、长度验证、复杂度验证和泄露检测，任一阶段失败即终止后续验证。通过 &lt;code>SecretStr&lt;/code> 安全获取密码明文，结合正则表达式验证密码复杂度，并利用哈希函数检测密码是否泄露。模块化设计便于后续添加更多安全规则，如密码过期策略和历史密码比对。</description></item></channel></rss>