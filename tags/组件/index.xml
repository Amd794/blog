<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>组件 on cmdragon's Blog</title><link>/tags/%E7%BB%84%E4%BB%B6/</link><description>Recent content in 组件 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 01 Nov 2024 00:18:53 +0800</lastBuildDate><atom:link href="/tags/%E7%BB%84%E4%BB%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 components：extend 事件钩子详解</title><link>/posts/1189b069abd2cfe9869abbbb4f7f340b/</link><pubDate>Fri, 01 Nov 2024 00:18:53 +0800</pubDate><guid>/posts/1189b069abd2cfe9869abbbb4f7f340b/</guid><description>components:extend 是 Nuxt.js 中的一个生命周期钩子，允许开发者扩展新的组件到项目中。通过这个钩子，开发者可以动态地添加额外的组件，从而增强项目的功能和灵活性。</description></item><item><title>Nuxt.js 应用中的 components：dirs 事件钩子详解</title><link>/posts/06467028093d81da701fced5b84150cb/</link><pubDate>Thu, 31 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/06467028093d81da701fced5b84150cb/</guid><description>components:dirs 是 Nuxt.js 中的一个生命周期钩子，用于在 app:resolve 期间扩展自动导入组件的目录。通过这个钩子，开发者可以动态地添加新的组件目录，从而增强项目的灵活性和可扩展性。</description></item><item><title>Nuxt.js 应用中的 imports：extend 事件钩子详解</title><link>/posts/1d6dcd3025621c288fddb7d17465133c/</link><pubDate>Mon, 28 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/1d6dcd3025621c288fddb7d17465133c/</guid><description>imports:extend 是 Nuxt.js 中的一个生命周期钩子，允许开发者在模块设置过程中扩展导入。使用此钩子，开发者可以灵活地管理和调整模块的导入配置，从而增强模块的功能。</description></item><item><title>理解 Vue 的 setup 应用程序钩子</title><link>/posts/6ed51fb844f1329c26155ff2a6ea4cd2/</link><pubDate>Mon, 30 Sep 2024 00:18:53 +0800</pubDate><guid>/posts/6ed51fb844f1329c26155ff2a6ea4cd2/</guid><description>摘要：本文详细介绍了Vue 3中setup函数的应用，包括其概念、特性、使用方法及重要性。setup函数作为组合API的核心，在组件实例化前被调用，用于设置响应式状态、计算属性、方法和生命周期钩子，支持在SSR和CSR中使用。</description></item><item><title>Nuxt Kit 组件管理：注册与自动导入</title><link>/posts/c5f0133bf1d896616b703a00c560fb9b/</link><pubDate>Sun, 15 Sep 2024 00:18:53 +0800</pubDate><guid>/posts/c5f0133bf1d896616b703a00c560fb9b/</guid><description>Nuxt Kit 为组件的注册和导入提供了灵活高效的解决方案。无论你是要批量导入组件，还是单独处理特定组件，这些工具都能够满足你的需求。使用这些方法可以显著提升开发效率、减少管理复杂性。</description></item><item><title>使用 nuxi add 快速创建 Nuxt 应用组件</title><link>/posts/917849288e8e1cc200cdd37a60e48387/</link><pubDate>Wed, 28 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/917849288e8e1cc200cdd37a60e48387/</guid><description>通过使用 nuxi add 命令，你可以快速创建 Nuxt 应用中的各种实体，如组件、页面、布局等。这可以极大地提高开发效率，减少手动创建文件的工作量。希望本文的示例和解释能够帮助你更好地使用 nuxi add 命令来加速你的开发过程。</description></item><item><title>使用 Nuxt 的 showError 显示全屏错误页面</title><link>/posts/54debfbfcb8e75989b8e0efe82573a86/</link><pubDate>Mon, 26 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/54debfbfcb8e75989b8e0efe82573a86/</guid><description>摘要：本文介绍Nuxt.js中的showError方法用于显示全屏错误页面，包括其参数类型及使用方式，并演示了如何在页面中捕获并展示错误，还介绍了useError用于管理共享错误状态的方法。</description></item><item><title>使用 preloadRouteComponents 提升 Nuxt 应用的性能</title><link>/posts/476d81c3a7972e5b8d84db523437836c/</link><pubDate>Mon, 19 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/476d81c3a7972e5b8d84db523437836c/</guid><description>preloadRouteComponents 是提升 Nuxt 应用性能的一个简单而有效的工具。通过在适当的时候预加载路由组件，你可以为用户提供更快速、更流畅的导航体验。</description></item><item><title>使用 preloadComponents 进行组件预加载</title><link>/posts/b54b94bb4434e506c17b07f68a13bf94/</link><pubDate>Sun, 18 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/b54b94bb4434e506c17b07f68a13bf94/</guid><description>摘要：本文介绍Nuxt 3中的preloadComponents功能，用于预加载全局注册的组件以减少首次渲染阻塞时间，通过实例演示如何设置并使用该工具来提升页面性能。</description></item><item><title>使用 prefetchComponents 进行组件预取</title><link>/posts/a87f935f1fba15457925fce9d47af8f4/</link><pubDate>Sat, 17 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/a87f935f1fba15457925fce9d47af8f4/</guid><description>摘要：本文介绍Nuxt.js中的prefetchComponents功能，用于预取组件以提高用户体验。通过在客户端后台下载和缓存组件，确保在用户需要时快速加载。文章涵盖了prefetchComponents的基本概念、与预加载的区别、使用方法以及如何在Nuxt.js项目中配置和应用此功能，最终达到优化应用加载速度的目的。</description></item><item><title>使用 onBeforeRouteUpdate 组合式函数提升应用的用户体验</title><link>/posts/d400882a80839b72cf628a6de608f0e8/</link><pubDate>Thu, 15 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/d400882a80839b72cf628a6de608f0e8/</guid><description>摘要：本文介绍如何在Nuxt 3开发中使用onBeforeRouteUpdate组合式函数来提升应用用户体验。通过在组件中注册路由更新守卫，开发者能够在路由变更前执行特定操作，如权限检查或数据更新，示例展示了在User.vue组件中使用此功能的过程与注意事项。</description></item><item><title>使用 onBeforeRouteLeave 组合式函数提升应用的用户体验</title><link>/posts/ec76c32456eed5c68935b916beb053c2/</link><pubDate>Wed, 14 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/ec76c32456eed5c68935b916beb053c2/</guid><description>摘要：本文介绍了在Nuxtjs中使用onBeforeRouteLeave组合式函数来提升应用用户体验的方法。onBeforeRouteLeave允许在组件离开当前路由前执行逻辑，如处理路由变化、清理资源、保存数据等。文章通过示例展示了如何在Vue组件中注册此守卫，解释了其参数含义及使用注意事项，并提供了完整示例代码，强调了此功能对增强用户体验的重要性。</description></item><item><title>使用 defineNuxtComponent`定义 Vue 组件</title><link>/posts/8e9977db3a733bc649877087c3b87e91/</link><pubDate>Fri, 09 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/8e9977db3a733bc649877087c3b87e91/</guid><description>摘要：本文介绍了在Nuxt 3中使用defineNuxtComponent辅助函数定义类型安全的Vue组件的方法，适用于习惯Options API的开发者。defineNuxtComponent支持asyncData获取异步数据及head设置自定义头部信息，为Nuxt应用提供更多功能。</description></item><item><title>清除 Nuxt 状态缓存：clearNuxtState</title><link>/posts/54aef7263724952013d0fd71fcdcb38e/</link><pubDate>Wed, 07 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/54aef7263724952013d0fd71fcdcb38e/</guid><description>摘要：本文介绍了Nuxt.js框架中clearNuxtState方法的使用，该方法用于清除useState管理的状态缓存，确保应用状态的有效性和一致性。文章涵盖了clearNuxtState的方法签名、使用场景及示例代码，演示了如何在组件中实现状态的重置，适用于需要在特定条件下重置状态或页面切换时保持状态清新的场景。</description></item><item><title>清除 Nuxt 数据缓存：clearNuxtData</title><link>/posts/b14ec150986ae8b8e56d2c37637e04fd/</link><pubDate>Tue, 06 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/b14ec150986ae8b8e56d2c37637e04fd/</guid><description>摘要：本文详细介绍了Nuxt.js框架中的clearNuxtData方法，用于清除useAsyncData和useFetch缓存的数据、错误状态和待处理promises，以实现数据的实时更新和重载。通过实际示例展示了在不同页面如何应用clearNuxtData来提升用户体验和数据新鲜度，包括方法签名、使用场景及具体代码实现步骤。</description></item><item><title>使用 useState 管理响应式状态</title><link>/posts/760deff1b835b737dc6396ad0e4cc8d4/</link><pubDate>Thu, 01 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/760deff1b835b737dc6396ad0e4cc8d4/</guid><description>摘要：本文详细介绍了在Nuxt3框架中使用useState进行响应式状态管理的方法，包括其基本概念、优势、使用方法、共享状态实现以及性能优化技巧。useState支持服务器端渲染（SSR），可创建响应式状态并在组件间共享，通过具体示例展示了其基本用法、如何在多个组件间共享状态以及使用shallowRef提升性能。</description></item><item><title>useRoute 函数的详细介绍与使用示例</title><link>/posts/f78b155dac56741becfa07c51c38dc0f/</link><pubDate>Sat, 27 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/f78b155dac56741becfa07c51c38dc0f/</guid><description>摘要：本文介绍了Nuxt.js中useRoute函数的详细用途与示例，展示了如何在组合式API中使用useRoute获取当前路由信息，包括动态参数、查询参数等，并提供了丰富的计算引用说明，如fullPath、hash、matched等，以及如何正确访问查询参数。</description></item><item><title>使用 useNuxtData 进行高效的数据获取与管理</title><link>/posts/5097e3f618f180282a847588006a51d8/</link><pubDate>Mon, 22 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/5097e3f618f180282a847588006a51d8/</guid><description>深入讲解了Nuxt 3中useNuxtData组合函数的应用，演示了如何通过此函数访问缓存数据，实现组件间数据共享，以及如何在数据更新时利用缓存提高用户体验。文章提供了具体的用法示例，包括数据获取、访问缓存数据和数据更新的场景。</description></item><item><title>Nuxt 3 使用指南：掌握 useNuxtApp 和运行时上下文</title><link>/posts/074b9dedf36fca34d1469e455c71d583/</link><pubDate>Sun, 21 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/074b9dedf36fca34d1469e455c71d583/</guid><description>摘要：“Nuxt 3 使用指南：掌握 useNuxtApp 和运行时上下文”介绍了Nuxt 3中useNuxtApp的使用，包括访问Vue实例、运行时钩子、配置变量和SSR上下文。文章详细说明了provide和hook函数的应用，以及如何在插件和组件中利用这些功能。同时，探讨了vueApp属性、ssrContext和payload的使用场景，以及isHydrating和runWithContext方法的作用。</description></item><item><title>useHeadSafe：安全生成HTML头部元素</title><link>/posts/95d33c5603e4f6e6897102ed1a6cc433/</link><pubDate>Wed, 17 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/95d33c5603e4f6e6897102ed1a6cc433/</guid><description>摘要：“useHeadSafe”是Vue.js组合函数，用于安全生成HTML头部元素，通过限制输入值格式避免XSS等安全风险，提供了安全值白名单确保只有安全属性被添加。</description></item><item><title>使用 `useAppConfig` ：轻松管理应用配置</title><link>/posts/9e044d4b53eab6a1bec49bb86b4c856c/</link><pubDate>Thu, 11 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/9e044d4b53eab6a1bec49bb86b4c856c/</guid><description>摘要：本文介绍了Nuxt开发中useAppConfig的使用，它便于访问和管理应用配置，支持动态加载资源、环境配置切换、权限管理、主题切换和配置文件集中管理等功能，通过实例展示了如何在Nuxt项目中应用此工具以实现配置灵活性和应用维护性。</description></item><item><title>Nuxt框架中内置组件详解及使用指南（五）</title><link>/posts/ff42c6a570627402dbbdd82adbb2ed2a/</link><pubDate>Wed, 10 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/ff42c6a570627402dbbdd82adbb2ed2a/</guid><description>摘要：本文详细介绍了Nuxt框架中&lt;NuxtImg>和&lt;NuxtPicture>组件的使用方法与配置，包括安装、基本用法、属性详解、示例代码以及高级功能如事件处理、自定义图片属性和图片格式回退策略。同时，还简述了&lt;Teleport>组件的功能与基本用法，展示了如何将组件内容传送到DOM中的不同位置，特别是对于模态框和侧边栏等UI元素的布局优化。</description></item><item><title>Nuxt框架中内置组件详解及使用指南（四）</title><link>/posts/9032c61e840462c63717de392173b4f5/</link><pubDate>Tue, 09 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/9032c61e840462c63717de392173b4f5/</guid><description>摘要：本文详细介绍了Nuxt 3框架中的两个内置组件：&lt;NuxtErrorBoundary>和&lt;NuxtIsland>的使用方法与示例。&lt;NuxtErrorBoundary>用于捕获并处理客户端错误，提供了错误处理和自定义错误展示的功能；而&lt;NuxtIsland>是一个实验性组件，用于渲染无客户端JavaScript的静态内容，以优化页面加载速度。文章包含组件的基本用法、配置步骤以及完整实例代码，有助于开发者高效利用这些组件提升Nuxt应用的性能与用户体验。</description></item><item><title>Nuxt框架中内置组件详解及使用指南（三）</title><link>/posts/7ef2264218c32c7cf7f16dfa7cabd2ce/</link><pubDate>Mon, 08 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/7ef2264218c32c7cf7f16dfa7cabd2ce/</guid><description>摘要：“Nuxt 3框架中&lt;NuxtLink>与&lt;NuxtLoadingIndicator>组件的深度使用教程，包括如何使用这两个组件进行页面导航和加载指示的自定义配置与实战示例。”</description></item><item><title>Nuxt框架中内置组件详解及使用指南（二）</title><link>/posts/658c8df0cd7e59fe7606507b14b2c37c/</link><pubDate>Sun, 07 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/658c8df0cd7e59fe7606507b14b2c37c/</guid><description>摘要：“本文详细介绍了Nuxt 3中&lt;NuxtPage>和&lt;NuxtLayout>组件的使用方法，包括组件的基本概念、属性、自定义属性、获取引用以及完整示例，展示了如何在Nuxt项目中有效利用这两个组件。</description></item><item><title>Nuxt 3 路由系统详解：配置与实践指南</title><link>/posts/3edf792d5e89f8a9aba11ef2a862f865/</link><pubDate>Fri, 21 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/3edf792d5e89f8a9aba11ef2a862f865/</guid><description>摘要：本文是一份关于Nuxt 3路由系统的详尽指南。它从介绍Nuxt 3的基本概念开始，包括Nuxt 3与Nuxt 2的区别和选择Nuxt 3的理由。然后，它详细解释了安装和配置Nuxt 3的步骤，以及Nuxt 3路由系统的基础知识，如动态路由和嵌套路由。接着，它介绍了路由中间件的作用和编写自定义中间件的方法，并讨论了页面布局、导航链接和页面过渡效果。最后，它涵盖了高级路由技巧，如异步数据获取、错误页面处理和路由守卫，以及实战案例分析，包括博客系统路由设计、电商网站路由设计和多语言支持的路由实现。最后，它讨论了性能优化与安全，包括路由懒加载、路由安全性和性能监控与调试。</description></item><item><title>Tailwind CSS 实战指南：快速构建响应式网页设计</title><link>/posts/3ad65521e550614a7025c22f6ad566a3/</link><pubDate>Wed, 12 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/3ad65521e550614a7025c22f6ad566a3/</guid><description>这篇文章介绍了Tailwind CSS框架的特点与优势，包括其作为实用性的CSS框架如何通过预设的样式类实现快速布局和设计，以及如何在不牺牲响应式和自适应性的同时减少开发时间。此外，还提及了框架的可定制性，允许开发者轻松创建符合项目需求的样式规则，从而提高前端开发效率。</description></item><item><title>Vue TypeScript 实战：掌握静态类型编程</title><link>/posts/5fd5f7ddeea4d0fcae77f0c558181bc2/</link><pubDate>Mon, 10 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/5fd5f7ddeea4d0fcae77f0c558181bc2/</guid><description>这篇文章介绍了如何在TypeScript环境下为Vue.js应用搭建项目结构，包括初始化配置、创建Vue组件、实现状态管理利用Vuex、配置路由以及性能优化的方法，旨在提升开发效率与应用性能。</description></item><item><title>Vue.js 动画与过渡效果实战</title><link>/posts/7afed161f9ec7f94bf6ec13a4cdd2f27/</link><pubDate>Tue, 04 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/7afed161f9ec7f94bf6ec13a4cdd2f27/</guid><description>&lt;img src="/images/2024_06_04 19_02_32.png" title="2024_06_04 19_02_32.png" alt="2024_06_04 19_02_32.png"/>
&lt;h3 id="第一部分基础知识">第一部分：基础知识&lt;/h3>
&lt;h4 id="第1章vuejs-过渡系统简介">第1章：Vue.js 过渡系统简介&lt;/h4>
&lt;p>Vue.js 提供了过渡效果的支持，使得在不同状态之间切换时能够以更加生动和用户友好的方式呈现。本章将介绍 Vue.js 过渡系统的基本概念、工作原理以及如何使用过渡效果来提升用户体验。&lt;/p></description></item></channel></rss>