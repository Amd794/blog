<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>身份验证 on cmdragon's Blog</title><link>/tags/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</link><description>Recent content in 身份验证 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 07 Jun 2025 08:40:35 +0800</lastBuildDate><atom:link href="/tags/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI安全机制：从OAuth2到JWT的魔法通关秘籍</title><link>/posts/04b73a9a5712e6b51e8c45c35f331e59/</link><pubDate>Sat, 07 Jun 2025 08:40:35 +0800</pubDate><guid>/posts/04b73a9a5712e6b51e8c45c35f331e59/</guid><description>FastAPI 的安全机制基于 OAuth2 规范、JWT 和依赖注入系统三大核心组件，提供了标准化的授权框架和无状态的身份验证。OAuth2 密码流通过 &lt;code>CryptContext&lt;/code> 进行密码哈希处理，&lt;code>OAuth2PasswordBearer&lt;/code> 自动提取和验证 Bearer Token，JWT 令牌包含过期时间，确保服务端无需存储会话状态。依赖注入系统通过 &lt;code>Depends()&lt;/code> 实现身份验证逻辑的解耦。典型请求流程包括 Token 验证、JWT 解码和用户验证，确保请求的合法性。</description></item><item><title>OAuth2密码模式：信任的甜蜜陷阱与安全指南</title><link>/posts/96b6c27c65f8bdaa6a70b9d896192a00/</link><pubDate>Thu, 29 May 2025 14:56:19 +0800</pubDate><guid>/posts/96b6c27c65f8bdaa6a70b9d896192a00/</guid><description>OAuth2定义了四种主要授权流程：授权码模式适用于完整Web应用，通过授权码交换令牌；简化模式适合单页应用，直接返回令牌但存在安全隐患；客户端凭证模式用于服务端间通信，无需用户参与；密码模式适用于受信任的客户端，直接使用用户名/密码换取令牌。每种模式针对不同场景设计，需根据应用需求和安全考量选择合适方案。密码模式实现中，FastAPI通过JWT令牌和bcrypt密码哈希确保安全性，但需高度信任客户端。</description></item><item><title>HMAC：Introduction History and Applications</title><link>/posts/5255d53346ad861384a2a938be282cb6/</link><pubDate>Mon, 22 Apr 2024 18:46:28 +0800</pubDate><guid>/posts/5255d53346ad861384a2a938be282cb6/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_04_22 18_56_51.png@blog" title="2024_04_22 18_56_51.png" alt="2024_04_22 18_56_51.png"/>
&lt;h3 id="第一章介绍">第一章：介绍&lt;/h3>
&lt;h4 id="1-什么是hash-based-message-authentication-code-hmac">1. 什么是Hash-based Message Authentication Code (HMAC)？&lt;/h4>
&lt;p>Hash-based Message Authentication Code (HMAC)
是一种基于哈希函数和密钥的消息认证码算法。它用于验证消息的完整性和真实性，同时防止消息被篡改或伪造。HMAC结合了哈希函数的不可逆性和密钥的安全性，能够提供高强度的消息认证保护。&lt;/p></description></item></channel></rss>