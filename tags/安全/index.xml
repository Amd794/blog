<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安全 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%AE%89%E5%85%A8/</link><description>Recent content in 安全 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 06 Dec 2024 00:18:53 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 afterResponse 事件钩子</title><link>https://blog.cmdragon.cn/posts/0099146574320c07d4d7bae1b6b526e4/</link><pubDate>Fri, 06 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0099146574320c07d4d7bae1b6b526e4/</guid><description>在 Web 应用程序中，响应的后续处理是提升用户体验，进行数据分析和监控的重要组成部分。Nuxt.js 提供的 afterResponse 钩子允许开发者在发送响应之后实施自定义操作，这一机制有助于进行任务如记录日志、监控性能等。</description></item><item><title>Nuxt.js 应用中的 beforeResponse 事件钩子</title><link>https://blog.cmdragon.cn/posts/a53897bbc3efd267f867b8ad06770144/</link><pubDate>Thu, 05 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a53897bbc3efd267f867b8ad06770144/</guid><description>在 Web 开发中，处理响应是一个至关重要的环节。Nuxt.js 提供的 beforeResponse 钩子允许开发者在发送响应之前对结果进行修改或处理。这一机制非常有助于确保返回给客户端的数据格式、内容以及响应头等符合特定需求，从而提升用户体验和系统的稳定性。</description></item><item><title>Nuxt.js 应用中的 request 事件钩子</title><link>https://blog.cmdragon.cn/posts/d821e2e0d8af1f6e0a02aa2f6cddf24e/</link><pubDate>Wed, 04 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d821e2e0d8af1f6e0a02aa2f6cddf24e/</guid><description>在构建现代 Web 应用时，处理请求是核心内容之一。无论是从后端获取数据，还是处理用户请求、验证和授权，正确地处理请求能够确保应用的稳定性、可维护性和用户体验。Nuxt.js 提供了 request 钩子，允许开发者在接收到请求时进行自定义处理，这为复杂应用提供了极大的灵活性。</description></item><item><title>Nuxt.js 应用中的 render：html 事件钩子</title><link>https://blog.cmdragon.cn/posts/e2e4ffc078733570a7b98d6f0dd9ea13/</link><pubDate>Sat, 30 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e2e4ffc078733570a7b98d6f0dd9ea13/</guid><description>在构建 HTML 内容时，能够对其进行动态修改是非常有用的。render:html 钩子为开发者提供了在 HTML 被构建之前的最后机会去调整内容。这对于自定义渲染行为、注入额外的脚本或数据，以及实现复杂的 SEO 优化等场景非常重要。</description></item><item><title>useHeadSafe：安全生成HTML头部元素</title><link>https://blog.cmdragon.cn/posts/95d33c5603e4f6e6897102ed1a6cc433/</link><pubDate>Wed, 17 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/95d33c5603e4f6e6897102ed1a6cc433/</guid><description>摘要：“useHeadSafe”是Vue.js组合函数，用于安全生成HTML头部元素，通过限制输入值格式避免XSS等安全风险，提供了安全值白名单确保只有安全属性被添加。</description></item><item><title>useCookie函数：管理SSR环境下的Cookie</title><link>https://blog.cmdragon.cn/posts/ddb1976c3f6b7b52a03dd0c383e9a790/</link><pubDate>Sat, 13 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ddb1976c3f6b7b52a03dd0c383e9a790/</guid><description>摘要：本文详述了useCookie函数在服务器端渲染(SSR)中的应用，包括读写Cookie、配置选项如maxAge、expires、httpOnly、secure、domain、path及SameSite，并提供了encode、decode、default、watch等高级用法示例，以及如何在API路由中操作Cookie。</description></item><item><title>Django信号与扩展：深入理解与实践</title><link>https://blog.cmdragon.cn/posts/13ce298742c5b544510b64df767a9f23/</link><pubDate>Wed, 15 May 2024 22:40:52 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/13ce298742c5b544510b64df767a9f23/</guid><description>&lt;h2 id="第一部分django信号基础">第一部分：Django信号基础&lt;/h2>
&lt;h3 id="django信号概述">Django信号概述&lt;/h3>
&lt;p>一. Django信号的定义与作用&lt;/p>
&lt;p>Django信号（Signal）是Django框架中的一种机制，用于在特定事件发生时进行通信。信号可以让不同的Django组件松耦合地通信，即使它们不直接相互依赖。这种松耦合的设计使得Django应用更加灵活、可扩展和可维护。&lt;/p></description></item><item><title>深入了解PBKDF2：密码学中的关键推导函数</title><link>https://blog.cmdragon.cn/posts/db0b90dce25843a9e352a3da45eb00b2/</link><pubDate>Sat, 20 Apr 2024 20:37:35 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/db0b90dce25843a9e352a3da45eb00b2/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_04_20 20_41_20.png@blog" title="2024_04_20 20_41_20.png" alt="2024_04_20 20_41_20.png"/>
&lt;h3 id="第一章密码学基础">第一章：密码学基础&lt;/h3>
&lt;h4 id="对称加密和哈希函数">对称加密和哈希函数&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>对称加密&lt;/strong>：对称加密是一种加密技术，使用相同的密钥进行加密和解密。常见的对称加密算法有AES、DES等。发送方和接收方必须共享相同的密钥才能进行加密和解密操作。&lt;/li>
&lt;li>&lt;strong>哈希函数&lt;/strong>：哈希函数是一种将任意长度的输入数据映射为固定长度输出的函数。哈希函数具有单向性、固定输出长度、雪崩效应等特性。常见的哈希函数有SHA-256、MD5等。哈希函数常用于数据完整性验证、密码存储等场景。&lt;/li>
&lt;/ul>
&lt;h4 id="密钥派生函数的作用和原理">密钥派生函数的作用和原理&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>密钥派生函数&lt;/strong>：密钥派生函数（Key Derivation
Function，KDF）是一种用于从一个或多个输入中派生出密钥或密钥材料的函数。其主要作用是从用户提供的密码和一些额外的参数中生成出更强大的密钥。&lt;/li>
&lt;li>&lt;strong>密钥派生函数的原理&lt;/strong>
：密钥派生函数通常采用密码学哈希函数来实现。常见的密钥派生函数有PBKDF2、bcrypt、scrypt等。这些函数通常会使用盐值（salt）和迭代次数来增加生成密钥的难度，从而提高安全性。密钥派生函数的设计目的是为了抵抗暴力破解、字典攻击等密码破解手段，确保生成的密钥足够安全。&lt;/li>
&lt;/ul>
&lt;p>通过对称加密、哈希函数和密钥派生函数的基础理解，我们可以更好地理解密码学中的关键概念和技术，为后续学习和应用更复杂的密码学算法打下基础。&lt;/p></description></item></channel></rss>