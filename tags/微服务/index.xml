<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>微服务 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><description>Recent content in 微服务 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 29 Jun 2025 06:55:35 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI安全认证的终极秘籍：OAuth2与JWT如何完美融合？</title><link>https://blog.cmdragon.cn/posts/17d5c40ff6c84ad652f962fed0ce46ab/</link><pubDate>Sun, 29 Jun 2025 06:55:35 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/17d5c40ff6c84ad652f962fed0ce46ab/</guid><description>FastAPI安全与认证实战指南深入解析了OAuth2协议的核心模式，包括授权码模式、密码模式、客户端凭证模式和简化模式，并提供了相应的代码实现。文章详细探讨了JWT令牌的结构与安全增强措施，强调算法选择、有效期管理和签发者验证等最佳实践。通过OAuth2PasswordBearer的深度集成，展示了完整的认证流程与异常处理机制。此外，指南还提供了环境配置清单和进阶安全实践，如动态权限控制和密钥轮换方案，确保系统安全性与可维护性。</description></item><item><title>Django与微服务架构：构建可扩展的Web应用</title><link>https://blog.cmdragon.cn/posts/61b57747a82113c01f83b72ade53c352/</link><pubDate>Tue, 21 May 2024 20:15:19 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/61b57747a82113c01f83b72ade53c352/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/2024_05_21 20_18_51.png" title="2024_05_21 20_18_51.png" alt="2024_05_21 20_18_51.png"/>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在当今快速发展的软件开发领域，微服务架构已经成为构建可扩展、灵活且易于维护的系统的热门选择。微服务架构通过将大型应用程序分解为一组小型、独立的服务来工作，每个服务都围绕特定的业务功能构建，并可以独立开发、部署和扩展。这种架构模式的优势在于提高了系统的灵活性和可维护性，同时允许团队以更快的速度迭代和部署新功能。&lt;/p></description></item></channel></rss>