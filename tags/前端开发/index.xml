<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端开发 on cmdragon's Blog</title><link>/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</link><description>Recent content in 前端开发 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 16 Oct 2024 00:18:53 +0800</lastBuildDate><atom:link href="/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 modules：done 事件钩子详解</title><link>/posts/6427994cfc82edf8e740eb2b3edcead4/</link><pubDate>Wed, 16 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/6427994cfc82edf8e740eb2b3edcead4/</guid><description>modules:done 是 Nuxt.js 中一个重要的生命周期钩子，在 Nuxt 应用初始化期间触发。该钩子允许开发者在用户定义的模块安装完成后执行特定操作，如初始化后续配置或执行其他逻辑。</description></item><item><title>Nuxt.js 应用中的 ready 事件钩子详解</title><link>/posts/bf27341c381e447f9e64e2d4e9b36db4/</link><pubDate>Sat, 12 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/bf27341c381e447f9e64e2d4e9b36db4/</guid><description>ready 钩子是 Nuxt.js 中一个重要的生命周期事件，它在 Nuxt 实例初始化完成后被调用。当 Nuxt 已经准备好并准备开始处理请求或渲染页面时，这一钩子会被触发。</description></item><item><title>Nuxt.js 应用中的 page：transition：finish 钩子详解</title><link>/posts/b19fb081d695b4867066656e73740093/</link><pubDate>Thu, 10 Oct 2024 00:18:53 +0800</pubDate><guid>/posts/b19fb081d695b4867066656e73740093/</guid><description>page:transition:finish 是 Nuxt.js 中的一个事件钩子，专门用于处理页面过渡效果结束后的逻辑。这一钩子在页面过渡的 onAfterLeave 事件之后被调用，允许开发者在过渡完成后执行一些后续操作。</description></item><item><title>深入理解 Nuxt.js 中的 app：data：refresh 钩子</title><link>/posts/64d5872b7beb55312b9d4537c9366d2b/</link><pubDate>Sun, 29 Sep 2024 00:18:53 +0800</pubDate><guid>/posts/64d5872b7beb55312b9d4537c9366d2b/</guid><description>摘要：本文详细介绍了 Nuxt.js框架中的app:data:refresh钩子，包括其定义、用途、使用方法及实际应用案例。该钩子用于在数据刷新时执行额外处理，支持服务器端和客户端，有助于优化动态数据更新和用户体验。</description></item><item><title>使用 Nuxt Kit 的构建器 API 来扩展配置</title><link>/posts/bdeb7bbd58b884c871d4a545bab57769/</link><pubDate>Tue, 24 Sep 2024 00:18:53 +0800</pubDate><guid>/posts/bdeb7bbd58b884c871d4a545bab57769/</guid><description>摘要：本文详细介绍了如何使用 Nuxt Kit 的构建器 API 来扩展和定制 Nuxt 3 项目的 webpack 和 Vite 构建配置，包括扩展Webpack和Vite配置、添加自定义插件、以及通过具体示例展示了如何在实际项目中应用这些API以满足不同开发需求，从而提升前端构建流程的灵活性和效率。</description></item><item><title>使用 nuxi dev 启动 Nuxt 应用程序的详细指南</title><link>/posts/ffaecaca091c2823b255244bbf0e4e6e/</link><pubDate>Mon, 02 Sep 2024 00:18:53 +0800</pubDate><guid>/posts/ffaecaca091c2823b255244bbf0e4e6e/</guid><description>摘要：本文介绍了使用 nuxi dev 命令启动 Nuxt 应用程序的方法，包括安装 Nuxt.js、启动开发服务器及配置选项等详细步骤。</description></item><item><title>使用 nuxi analyze 命令分析 Nuxt 应用的生产包</title><link>/posts/2e9061a0c24ee58d41b70de7b45040d5/</link><pubDate>Thu, 29 Aug 2024 00:18:53 +0800</pubDate><guid>/posts/2e9061a0c24ee58d41b70de7b45040d5/</guid><description>使用 nuxi analyze 命令可以帮助你深入了解生产包的结构和大小，从而做出针对性的优化。通过定期分析生产包，你可以识别并解决性能瓶颈，提高应用的加载速度和用户体验。</description></item><item><title>Nuxt.js 路由管理：useRouter 方法与路由中间件应用</title><link>/posts/5d18db61dc2cdd94535cb31773ea0d63/</link><pubDate>Sun, 28 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/5d18db61dc2cdd94535cb31773ea0d63/</guid><description>摘要：本文介绍了Nuxt 3中useRouter方法及其在路由管理和中间件应用中的功能。内容包括使用useRouter添加、移除路由，获取路由信息，基于History API的操作，导航守卫的实现，如定义匿名、命名及全局中间件，以及使用navigateTo和abortNavigation辅助函数。同时，还涉及Promise和错误处理，最后通过一个示例展示了useRouter的常见用法。</description></item><item><title>使用 useLazyAsyncData 提升数据加载体验</title><link>/posts/954e473bea4ec122949c8c7d84d32c95/</link><pubDate>Fri, 19 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/954e473bea4ec122949c8c7d84d32c95/</guid><description>摘要：本文介绍useLazyAsyncData函数在Nuxt 3中的使用，以提升数据加载体验。此函数支持异步获取数据并在组件中处理挂起与错误状态，通过pending、error和data属性实现动态加载反馈。示例展示了如何创建Nuxt 3项目并利用该函数获取计数器数据，包括前端代码实现及简易后端模拟。</description></item><item><title>Nuxt.js头部魔法：轻松自定义页面元信息，提升用户体验</title><link>/posts/d5370e880eaec9085a153caba4961676/</link><pubDate>Tue, 16 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/d5370e880eaec9085a153caba4961676/</guid><description>摘要：“Nuxt.js头部魔法：轻松自定义页面元信息，提升用户体验”介绍如何使用useHead函数在Nuxt应用中编程式设置页面头部信息，包括&lt;title>、&lt;meta>、&lt;link>等标签，以增强SEO和用户体验。通过实例展示了如何配置静态和动态标题、元数据、样式、脚本等，使页面更符合SEO标准和个性化需求。</description></item><item><title>Nuxt框架中内置组件详解及使用指南（一）</title><link>/posts/214c7ef07a7b90e1787f10ea626320e3/</link><pubDate>Sat, 06 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/214c7ef07a7b90e1787f10ea626320e3/</guid><description>本文详细介绍了Nuxt框架中的两个内置组件&lt;ClientOnly>和&lt;NuxtClientFallback>的使用方法与功能。&lt;ClientOnly>确保包裹的内容仅在客户端渲染，适用于处理浏览器特定功能或异步数据加载。而&lt;NuxtClientFallback>是一个实验性组件，用于在SSR过程中遇到子组件错误时，在客户端渲染备选内容，提高应用稳定性。文章通过示例代码展示了这两个组件的具体应用方式和相关属性配置。</description></item><item><title>Nuxt3 的生命周期和钩子函数（十一）</title><link>/posts/1229fdac282a0baba2576f73c41b4f0e/</link><pubDate>Fri, 05 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/1229fdac282a0baba2576f73c41b4f0e/</guid><description>摘要：本文详细介绍了Nuxt3中几个关键的生命周期钩子和它们的使用方法，包括webpack:done用于Webpack编译完成后执行操作，webpack:progress监听编译进度，render:response和render:html分别在响应发送前后修改响应内容，以及render:island针对岛屿组件的HTML渲染前的修改，提供了具体的示例代码和应用情景。</description></item><item><title>Nuxt3 的生命周期和钩子函数（十）</title><link>/posts/d5c00a7775a1fc1b83ecfb6dd7136fa7/</link><pubDate>Thu, 04 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/d5c00a7775a1fc1b83ecfb6dd7136fa7/</guid><description>摘要：本文详细介绍了Nuxt3框架中的五个webpack钩子函数：webpack:configResolved用于在webpack配置解析后读取和修改配置；webpack:compile在编译开始前调用，可修改编译选项；webpack:compiled在编译完成后调用，可处理编译结果；webpack:change在开发模式下文件变化时触发，监控文件更改；webpack:error在编译出错时捕获错误信息，以便于错误处理。并通过示例代码展示了各钩子的使用方法。</description></item><item><title>Nuxt3 的生命周期和钩子函数（九）</title><link>/posts/b80c188353cc5f1e84aad57aea45c848/</link><pubDate>Wed, 03 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/b80c188353cc5f1e84aad57aea45c848/</guid><description>摘要：本文介绍了Nuxt3中与Vite相关的五个生命周期钩子，包括vite:extend、vite:extendConfig、vite:configResolved、vite:serverCreated和vite:compiled，展示了如何在每个钩子中扩展Vite配置、读取配置、添加中间件和处理编译事件。每个钩子都有详细的描述和示例代码，帮助开发者在Nuxt应用中实现自定义构建逻辑和服务器配置。</description></item><item><title>Nuxt3 的生命周期和钩子函数（三）</title><link>/posts/5f1ddd6ac7a67110834fe55de143c90d/</link><pubDate>Thu, 27 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/5f1ddd6ac7a67110834fe55de143c90d/</guid><description>摘要：概述了Nuxt3的关键生命周期钩子用途，如page:finish用于页面加载后处理，page:transition:finish处理过渡效果完成，kit:compatibility扩展兼容性检查，ready标示应用启动就绪，close执行应用关闭清理，及restart控制应用重启流程，附带示例代码</description></item><item><title>Nuxt3 的生命周期和钩子函数（一）</title><link>/posts/5fa69707f657db97640ee64788afbd03/</link><pubDate>Tue, 25 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/5fa69707f657db97640ee64788afbd03/</guid><description>摘要：本文是关于Nuxt3的系列文章之一，主要探讨Nuxt3的生命周期和钩子函数，引导读者深入了解其在前端开发中的应用。文章提供了往期相关文章链接，涉及Nuxt中间件、Composables、状态管理、路由系统、组件开发等多个方面，帮助读者全面掌握Nuxt3框架的特性和实践技巧。</description></item><item><title>Nuxt3页面开发实战探索</title><link>/posts/4048e7f1938a52615537260f823bc8f2/</link><pubDate>Wed, 19 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/4048e7f1938a52615537260f823bc8f2/</guid><description>摘要：这篇文章是关于Nuxt3页面开发实战探索的。它介绍了Nuxt3的基础入门，安装与配置，项目结构，内置组件与功能，以及页面与路由的相关内容。Nuxt3是基于Vue 3的服务器端渲染框架，旨在简化Vue应用程序的开发流程，提供最佳的性能和开发</description></item><item><title>安装 Nuxt.js 的步骤和注意事项</title><link>/posts/9280ced43b0f3e88e4a3856b3ce4464d/</link><pubDate>Mon, 17 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/9280ced43b0f3e88e4a3856b3ce4464d/</guid><description>Nuxt.js在Vue.js基础上提供的服务器端渲染框架优势，包括提高开发效率、代码维护性和应用性能。指南详细说明了从环境准备、Nuxt.js安装配置到进阶部署技巧，涵盖错误解决、性能优化及Docker、CI/CD实践，为开发者构建高效Web应用提供全面攻略。</description></item><item><title>Tailwind CSS 响应式设计实战指南</title><link>/posts/5b206ad44b5e4b6f1a1812db10def1c9/</link><pubDate>Thu, 13 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/5b206ad44b5e4b6f1a1812db10def1c9/</guid><description>这篇文章介绍了如何运用Tailwind CSS框架创建响应式网页设计，涵盖博客、电商网站及企业官网的布局实例，包括头部导航、内容区域、侧边栏、页脚及轮播图等组件的响应式实现。同时，探讨了与JavaScript框架集成、CSS预处理器配合、设计工具应用以及服务器端渲染的策略，并提供了性能优化、代码组织、测试调试的最佳实践，最后展望了响应式设计的未来趋势。</description></item><item><title>Vue.js条件渲染与列表渲染指南</title><link>/posts/468d237217761452b4c846ad37042ca1/</link><pubDate>Sun, 26 May 2024 20:11:49 +0800</pubDate><guid>/posts/468d237217761452b4c846ad37042ca1/</guid><description>&lt;img src="../../images/2024_05_26 20_22_57.png" title="2024_05_26 20_22_57.png" alt="2024_05_26 20_22_57.png"/>
&lt;h2 id="第1章vuejs基础与环境设置">&lt;strong>第1章：Vue.js基础与环境设置&lt;/strong>&lt;/h2>
&lt;h3 id="11-vuejs简介">&lt;strong>1.1 Vue.js简介&lt;/strong>&lt;/h3>
&lt;p>Vue.js (读音：/vjuː/，类似于 &amp;ldquo;view&amp;rdquo;) 是一套用于构建用户界面的渐进式JavaScript框架。与其他大型框架不同的是，Vue.js
被设计为可以自底向上逐层应用。这意味着，你可以在一个大型的单页应用中或者可复用的组件库中使用 Vue，同时也可以将 Vue
用于简单的页面级别的交互。&lt;/p></description></item><item><title>深入了解图片Base64编码</title><link>/posts/b7a8d36bedec4c8e07bae369954c7b94/</link><pubDate>Mon, 08 Apr 2024 10:03:22 +0800</pubDate><guid>/posts/b7a8d36bedec4c8e07bae369954c7b94/</guid><description>&lt;img src="../../images/2024_04_08 10_05_35.png" title="2024_04_08 10_05_35.png" alt="2024_04_08 10_05_35.png"/>
&lt;h3 id="1-什么是base64编码">1. 什么是Base64编码&lt;/h3>
&lt;p>Base64编码是一种将二进制数据转换为文本字符串的编码方式，通过将数据转换为一种可打印的ASCII字符集，以便在文本协议中传输。对图片进行Base64编码是为了将图片数据转换为文本格式，方便在各种场景中使用，如在HTML、CSS、JavaScript等文件中嵌入图片。&lt;/p></description></item></channel></rss>