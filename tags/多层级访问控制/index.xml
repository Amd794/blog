<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多层级访问控制 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/%E5%A4%9A%E5%B1%82%E7%BA%A7%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link>
    <description>Recent content in 多层级访问控制 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 14 Jun 2025 12:43:05 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/%E5%A4%9A%E5%B1%82%E7%BA%A7%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何在FastAPI中构建一个既安全又灵活的多层级权限系统？</title>
      <link>https://blog.cmdragon.cn/posts/ff1c8ff1d052374f064d802d37f2a206/</link>
      <pubDate>Sat, 14 Jun 2025 12:43:05 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/ff1c8ff1d052374f064d802d37f2a206/</guid>
      <description>FastAPI通过依赖注入系统和OAuth2、JWT等安全方案，支持构建多层级权限系统。系统设计包括基于角色的访问控制、细粒度权限验证、权限继承机制和动态权限加载。通过定义用户角色和权限模型，结合权限验证流程，实现用户权限的动态加载和校验。路由集成示例展示了如何在API端点中应用角色和权限依赖项。高级配置技巧包括动态权限加载和缓存优化。常见错误解决方案针对HTTP 401和403错误提供了排查步骤。</description>
    </item>
  </channel>
</rss>
