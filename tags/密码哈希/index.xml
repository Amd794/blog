<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>密码哈希 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%AF%86%E7%A0%81%E5%93%88%E5%B8%8C/</link><description>Recent content in 密码哈希 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 09 Jun 2025 05:16:05 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%AF%86%E7%A0%81%E5%93%88%E5%B8%8C/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中轻松实现OAuth2认证并保护你的API？</title><link>https://blog.cmdragon.cn/posts/d17e94efec06a517ca80d0da10c80997/</link><pubDate>Mon, 09 Jun 2025 05:16:05 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d17e94efec06a517ca80d0da10c80997/</guid><description>OAuth2 是现代应用程序实现安全认证的行业标准协议，通过令牌而非直接使用用户凭证进行授权。FastAPI 提供 &lt;code>OAuth2PasswordBearer&lt;/code> 类支持密码授权模式，流程包括用户提交凭证、服务器验证、生成访问令牌及验证令牌有效性。配置安全模块需安装依赖库并创建 &lt;code>security.py&lt;/code>，包含密码哈希、验证及 JWT 令牌生成功能。用户认证通过模拟数据库实现，提供登录接口和受保护路由。安全路由保护机制依赖 &lt;code>get_current_user&lt;/code> 函数验证令牌。进阶实践包括刷新令牌、权限分级和速率限制，遵循 OWASP 安全规范。</description></item><item><title>FastAPI安全认证：从密码到令牌的魔法之旅</title><link>https://blog.cmdragon.cn/posts/7d79b5a5c4a3adad15117a45d7976554/</link><pubDate>Mon, 02 Jun 2025 13:24:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7d79b5a5c4a3adad15117a45d7976554/</guid><description>本章详细介绍了如何在FastAPI中实现OAuth2密码流程的认证机制。通过创建令牌端点，用户可以使用用户名和密码获取JWT访问令牌。代码示例展示了如何使用&lt;code>CryptContext&lt;/code>进行密码哈希处理，生成和验证JWT令牌，并实现安全路由保护。此外，还提供了JWT令牌的结构解析、常见报错解决方案以及安全增强建议，如使用HTTPS传输令牌和从环境变量读取密钥。最后，通过课后Quiz巩固了关键概念。</description></item><item><title>FastAPI安全门神：OAuth2PasswordBearer的奇妙冒险</title><link>https://blog.cmdragon.cn/posts/b49f9c66da662d6e3d59d594cbfdc545/</link><pubDate>Fri, 30 May 2025 18:34:14 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b49f9c66da662d6e3d59d594cbfdc545/</guid><description>FastAPI的OAuth2PasswordBearer是处理OAuth2密码授权流程的核心工具，负责从请求头提取Bearer Token、验证令牌格式有效性，并管理401未认证的自动响应。通过配置&lt;code>tokenUrl&lt;/code>和&lt;code>auto_error&lt;/code>参数，开发者可以定制认证流程。依赖注入系统支持分层解析策略，包括路由级依赖、路径操作函数参数和子依赖项。生产环境中建议使用密码哈希和JWT配置增强安全性。测试时可通过&lt;code>dependency_overrides&lt;/code>覆盖安全依赖，确保测试环境的灵活性。</description></item><item><title>PBKDF2算法：保护密码安全的重要工具</title><link>https://blog.cmdragon.cn/posts/1326f0b7ec6e8dcd0a579c31835210b4/</link><pubDate>Tue, 30 Jan 2024 17:50:00 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1326f0b7ec6e8dcd0a579c31835210b4/</guid><description>&lt;img alt="2024_01_30 16_29_52.png" src="https://static.cmdragon.cn/blog/images/2024_01_30 16_29_52.png@blog" title="2024_01_30 16_29_52.png"/>
&lt;p>摘要：在当今的数字世界中，密码安全是至关重要的。为了保护用户密码免受未经授权的访问和破解，Password-Based Key Derivation Function 2 (PBKDF2)算法成为了一种重要的工具。本文将介绍PBKDF2算法的优缺点，以及它如何解决密码存储和验证中的一些问题。我们还将提供一个使用Java编写的完整示例，以帮助读者深入了解PBKDF2算法的实际应用。&lt;/p></description></item></channel></rss>