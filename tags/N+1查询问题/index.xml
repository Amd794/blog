<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>N&#43;1查询问题 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/N&#43;1%E6%9F%A5%E8%AF%A2%E9%97%AE%E9%A2%98/</link>
    <description>Recent content in N&#43;1查询问题 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 06 May 2025 00:16:30 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/N+1%E6%9F%A5%E8%AF%A2%E9%97%AE%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>N&#43;1查询：数据库性能的隐形杀手与终极拯救指南</title>
      <link>https://blog.cmdragon.cn/posts/97852b6355fc0ee843ad8870810ec928/</link>
      <pubDate>Tue, 06 May 2025 00:16:30 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/97852b6355fc0ee843ad8870810ec928/</guid>
      <description>N+1查询问题是ORM中常见的性能陷阱，表现为在查询主对象时，对每个关联对象进行单独查询，导致查询次数过多。以博客系统为例，查询10位作者及其文章会产生11次查询。通过Tortoise-ORM的&lt;code&gt;prefetch_related&lt;/code&gt;方法，可以将查询优化为2次，显著提升性能。优化后的实现方案包括使用SQL JOIN语句加载关联数据，并结合FastAPI进行实践。进阶优化技巧包括多层预加载、选择性字段加载和分页查询结合。常见报错涉及模型注册、连接关闭和字段匹配问题，需针对性解决。</description>
    </item>
    <item>
      <title>Tortoise-ORM级联查询与预加载性能优化</title>
      <link>https://blog.cmdragon.cn/posts/b7ffdb2ec4d5eaa0388deddba3d07212/</link>
      <pubDate>Sat, 26 Apr 2025 12:25:42 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/b7ffdb2ec4d5eaa0388deddba3d07212/</guid>
      <description>Tortoise-ORM通过异步方式实现级联查询与预加载机制，显著提升API性能。模型关联关系基础中，定义一对多关系如作者与文章。级联查询通过&lt;code&gt;select_related&lt;/code&gt;方法实现，预加载通过&lt;code&gt;prefetch_related&lt;/code&gt;优化N+1查询问题。实战中，构建高效查询接口，如获取作者详情及最近发布的文章。高级技巧包括嵌套关联预加载、条件预加载和自定义预加载方法。常见报错处理如&lt;code&gt;RelationNotFoundError&lt;/code&gt;、&lt;code&gt;QueryTimeoutError&lt;/code&gt;和&lt;code&gt;ValidationError&lt;/code&gt;。最佳实践建议包括测试环境查询分析、添加Redis缓存层、添加数据库索引和分页限制返回数据量。</description>
    </item>
  </channel>
</rss>
