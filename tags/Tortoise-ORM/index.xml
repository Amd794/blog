<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tortoise-ORM on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/Tortoise-ORM/</link>
    <description>Recent content in Tortoise-ORM on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Jun 2025 13:18:54 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/Tortoise-ORM/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何用FastAPI和Tortoise-ORM打造一个既高效又灵活的角色管理系统？</title>
      <link>https://blog.cmdragon.cn/posts/2b0a2003074eba56a6f6c57aa9690900/</link>
      <pubDate>Wed, 11 Jun 2025 13:18:54 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/2b0a2003074eba56a6f6c57aa9690900/</guid>
      <description>角色模型设计包含核心字段如唯一标识、角色名称、描述、启用状态和创建时间。权限关联通过多对多关系实现，角色与权限通过中间表关联。完整的CRUD接口包括创建角色、获取角色信息等操作。数据库关系映射实战展示了如何为角色分配权限。常见报错解决方案提供了初始化数据库和处理请求体字段错误的指导。</description>
    </item>
    <item>
      <title>数据库连接池：从银行柜台到代码世界的奇妙旅程</title>
      <link>https://blog.cmdragon.cn/posts/1d808e4e97f59c12d2e5cf3302f3e1a7/</link>
      <pubDate>Wed, 07 May 2025 23:52:52 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/1d808e4e97f59c12d2e5cf3302f3e1a7/</guid>
      <description>FastAPI开发中，Tortoise-ORM的数据库连接池配置对系统性能至关重要。连接池参数如maxsize、timeout和pool_recycle直接影响并发处理能力。通过动态调整连接池大小、集成Prometheus监控和设置告警规则，可以有效优化性能。常见错误如连接池耗尽可通过逐步增加maxsize和优化慢查询解决。综合监控指标和压力测试工具，可以全面评估连接池状态，确保系统稳定性。</description>
    </item>
    <item>
      <title>N&#43;1查询：数据库性能的隐形杀手与终极拯救指南</title>
      <link>https://blog.cmdragon.cn/posts/97852b6355fc0ee843ad8870810ec928/</link>
      <pubDate>Tue, 06 May 2025 00:16:30 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/97852b6355fc0ee843ad8870810ec928/</guid>
      <description>N+1查询问题是ORM中常见的性能陷阱，表现为在查询主对象时，对每个关联对象进行单独查询，导致查询次数过多。以博客系统为例，查询10位作者及其文章会产生11次查询。通过Tortoise-ORM的&lt;code&gt;prefetch_related&lt;/code&gt;方法，可以将查询优化为2次，显著提升性能。优化后的实现方案包括使用SQL JOIN语句加载关联数据，并结合FastAPI进行实践。进阶优化技巧包括多层预加载、选择性字段加载和分页查询结合。常见报错涉及模型注册、连接关闭和字段匹配问题，需针对性解决。</description>
    </item>
    <item>
      <title>DDD分层设计与异步职责划分：让你的代码不再“异步”混乱</title>
      <link>https://blog.cmdragon.cn/posts/56102650d57c260e04435fe72e541ee3/</link>
      <pubDate>Sun, 04 May 2025 00:18:53 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/56102650d57c260e04435fe72e541ee3/</guid>
      <description>DDD分层架构将系统分为用户接口层、应用层、领域层和基础设施层，各层职责明确。领域层处理同步业务逻辑，基础设施层负责异步数据库操作，应用层协调两者。评论模块使用pydantic定义领域模型，保持业务逻辑完整性。Tortoise-ORM实现基础设施层的异步仓储操作。应用层整合领域逻辑与基础设施的异步调用，确保事务管理策略通过原子操作实现。分层调用规则强调领域对象不包含await调用，仓储接口定义在领域层，实现在基础设施层。</description>
    </item>
    <item>
      <title>异步数据库事务锁：电商库存扣减的防超卖秘籍</title>
      <link>https://blog.cmdragon.cn/posts/dd8b49ce80066db8c2671d365a9e9e32/</link>
      <pubDate>Sat, 03 May 2025 14:48:01 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/dd8b49ce80066db8c2671d365a9e9e32/</guid>
      <description>FastAPI框架中使用Tortoise-ORM进行异步数据库操作时，处理电商库存扣减等需要数据一致性的场景，传统同步操作会导致竞态条件。Tortoise-ORM的异步解决方案需配合事务锁机制，包括悲观锁和乐观锁。悲观锁通过&lt;code&gt;select_for_update()&lt;/code&gt;锁定记录，确保原子操作；乐观锁通过版本号机制实现无锁检测，采用指数退避重试策略避免活锁。高冲突率场景适合悲观锁，低冲突率场景适合乐观锁。</description>
    </item>
    <item>
      <title>FastAPI中的复杂查询与原子更新指南</title>
      <link>https://blog.cmdragon.cn/posts/f8a2c5f2662532fe5dca3a3e1f7e0b20/</link>
      <pubDate>Fri, 02 May 2025 20:33:32 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/f8a2c5f2662532fe5dca3a3e1f7e0b20/</guid>
      <description>FastAPI 结合 Tortoise-ORM 实现复杂查询与原子更新。通过 Q 对象构建多条件查询，支持 AND、OR、NOT 逻辑运算符，动态组合查询条件。使用 F 表达式进行原子更新，避免竞态条件，确保数据一致性。示例包括订单状态与金额的复杂查询、库存扣减的原子操作，以及商品促销的价格更新。常见错误包括字段拼写错误、类型不匹配和空结果集，需通过模型检查和异常处理解决。</description>
    </item>
    <item>
      <title>深入解析Tortoise-ORM关系型字段与异步查询</title>
      <link>https://blog.cmdragon.cn/posts/fdc89b660c15388ee6ff3e27f85d94dc/</link>
      <pubDate>Thu, 01 May 2025 00:12:39 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/fdc89b660c15388ee6ff3e27f85d94dc/</guid>
      <description>Tortoise-ORM在FastAPI异步架构中处理模型关系时，与传统同步ORM有显著差异。通过&lt;code&gt;ForeignKeyField&lt;/code&gt;和&lt;code&gt;ManyToManyField&lt;/code&gt;定义关系，使用字符串形式的模型路径进行引用。异步查询必须通过&lt;code&gt;await&lt;/code&gt;调用，&lt;code&gt;prefetch_related&lt;/code&gt;实现关联数据的异步预加载。&lt;code&gt;in_transaction&lt;/code&gt;上下文管理器处理异步事务，&lt;code&gt;add()&lt;/code&gt;/&lt;code&gt;remove()&lt;/code&gt;方法维护多对多关系。性能测试显示异步ORM在单条插入、批量关联查询和多对多关系维护上均有显著提升。常见报错包括事务管理错误、连接关闭和模型引用路径错误，需正确使用事务管理和&lt;code&gt;await&lt;/code&gt;。</description>
    </item>
    <item>
      <title>FastAPI与Tortoise-ORM模型配置及aerich迁移工具</title>
      <link>https://blog.cmdragon.cn/posts/785a04f3db818a55f0ddc27edc59d471/</link>
      <pubDate>Wed, 30 Apr 2025 00:11:45 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/785a04f3db818a55f0ddc27edc59d471/</guid>
      <description>FastAPI中使用Tortoise-ORM时，模型类通过继承&lt;code&gt;tortoise.models.Model&lt;/code&gt;并定义&lt;code&gt;class Meta&lt;/code&gt;来映射数据库字段。元数据配置包括表名、schema、表注释和联合唯一约束等。初始化数据库连接推荐使用&lt;code&gt;lifespan&lt;/code&gt;事件处理，配置参数包括数据库URL、模型模块路径等。aerich迁移工具用于管理数据库迁移，通过&lt;code&gt;init-db&lt;/code&gt;、&lt;code&gt;migrate&lt;/code&gt;和&lt;code&gt;upgrade&lt;/code&gt;等命令实现迁移文件的生成和应用。常见问题包括模型注册失败和迁移文件冲突，需检查模型路径和清除冲突文件。</description>
    </item>
    <item>
      <title>异步IO与Tortoise-ORM的数据库</title>
      <link>https://blog.cmdragon.cn/posts/618edd124a0fe8340f766e276faa89fb/</link>
      <pubDate>Tue, 29 Apr 2025 13:21:47 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/618edd124a0fe8340f766e276faa89fb/</guid>
      <description>异步IO与同步IO的核心区别在于阻塞与非阻塞模式。Tortoise-ORM通过协议层、连接池层和ORM层实现异步数据库操作，支持高效的并发处理。用户管理系统搭建中，Tortoise-ORM与FastAPI结合，实现了用户创建和查询功能，并通过Pydantic进行数据校验。异步ORM适用于高并发场景，参数化查询可防止SQL注入。最佳实践包括连接池配置、查询优化和事务管理，确保系统性能和数据一致性。</description>
    </item>
    <item>
      <title>FastAPI数据库连接池配置与监控</title>
      <link>https://blog.cmdragon.cn/posts/06a7744b22307c94c8cabf0a26c4133d/</link>
      <pubDate>Mon, 28 Apr 2025 00:13:02 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/06a7744b22307c94c8cabf0a26c4133d/</guid>
      <description>FastAPI数据库连接池通过预先创建和复用连接，显著降低连接创建开销。配置参数包括最小连接数（minsize）、最大连接数（maxsize）和空闲连接存活时间（max_inactive_connection_lifetime）。通过Tortoise-ORM集成Prometheus和Grafana实现实时监控，优化连接管理。常见问题如连接池耗尽和连接泄漏，可通过增加maxsize、检查未提交事务和使用async with管理事务来解决。定期监控和优化连接池参数是确保数据库性能的关键。</description>
    </item>
    <item>
      <title>分布式事务在点赞功能中的实现</title>
      <link>https://blog.cmdragon.cn/posts/863390c56aa08b3d8d0f89e268352f3d/</link>
      <pubDate>Sun, 27 Apr 2025 13:01:10 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/863390c56aa08b3d8d0f89e268352f3d/</guid>
      <description>分布式事务在点赞功能中面临原子性、数据一致性和失败补偿的挑战。Tortoise-ORM提供基础事务和装饰器事务两种管理方式，确保数据一致性。点赞功能实现需防重复点赞和事务处理，采用唯一约束防止重复。跨服务事务处理使用Saga模式，按反向顺序执行补偿操作确保最终一致性。常见报错包括事务超时、唯一约束冲突和请求参数校验失败，需优化事务操作、使用upsert和详细响应模型解决。</description>
    </item>
    <item>
      <title>Tortoise-ORM级联查询与预加载性能优化</title>
      <link>https://blog.cmdragon.cn/posts/b7ffdb2ec4d5eaa0388deddba3d07212/</link>
      <pubDate>Sat, 26 Apr 2025 12:25:42 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/b7ffdb2ec4d5eaa0388deddba3d07212/</guid>
      <description>Tortoise-ORM通过异步方式实现级联查询与预加载机制，显著提升API性能。模型关联关系基础中，定义一对多关系如作者与文章。级联查询通过&lt;code&gt;select_related&lt;/code&gt;方法实现，预加载通过&lt;code&gt;prefetch_related&lt;/code&gt;优化N+1查询问题。实战中，构建高效查询接口，如获取作者详情及最近发布的文章。高级技巧包括嵌套关联预加载、条件预加载和自定义预加载方法。常见报错处理如&lt;code&gt;RelationNotFoundError&lt;/code&gt;、&lt;code&gt;QueryTimeoutError&lt;/code&gt;和&lt;code&gt;ValidationError&lt;/code&gt;。最佳实践建议包括测试环境查询分析、添加Redis缓存层、添加数据库索引和分页限制返回数据量。</description>
    </item>
    <item>
      <title>使用Tortoise-ORM和FastAPI构建评论系统</title>
      <link>https://blog.cmdragon.cn/posts/97d9c275881a38c29b26f565d83be9d3/</link>
      <pubDate>Fri, 25 Apr 2025 21:37:36 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/97d9c275881a38c29b26f565d83be9d3/</guid>
      <description>在models.py中定义了Comment模型，包含id、content、created_at、updated_at字段，并与User和Article模型建立外键关系。schemas.py中定义了CommentBase、CommentCreate、CommentUpdate和CommentResponse等Pydantic模型，用于数据验证和响应。路由层实现了创建、获取和删除评论的API，使用get_or_none处理不存在的评论，并捕获异常。测试接口通过requests进行创建和异常测试。常见报错包括外键约束失败、验证错误和事件循环未关闭，需检查外键值、请求体匹配和正确关闭事件循环。</description>
    </item>
    <item>
      <title>掌握Tortoise-ORM高级异步查询技巧</title>
      <link>https://blog.cmdragon.cn/posts/8a980d4fc84da8b38dfc6da3b16a9818/</link>
      <pubDate>Tue, 22 Apr 2025 12:05:33 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/8a980d4fc84da8b38dfc6da3b16a9818/</guid>
      <description>Tortoise-ORM 提供了强大的异步查询功能，支持通过 Q 对象构建复杂查询条件，如逻辑运算符组合和动态条件构建。F 表达式用于字段级别的原子操作，避免竞争条件，适用于库存扣减和价格调整等场景。组合查询可通过注解和过滤实现复杂业务需求。常见错误包括字段不一致、未知字段和事务管理问题，需通过数据库迁移和异步上下文管理解决。</description>
    </item>
    <item>
      <title>FastAPI与Tortoise-ORM实现关系型数据库关联</title>
      <link>https://blog.cmdragon.cn/posts/75c1dff8b6b9960d1d47750094e29f2c/</link>
      <pubDate>Mon, 21 Apr 2025 10:51:41 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/75c1dff8b6b9960d1d47750094e29f2c/</guid>
      <description>FastAPI与Tortoise-ORM结合实现关系型数据库关联，支持1:1、1:N和M:N关系。1:N关系通过&lt;code&gt;ForeignKeyField&lt;/code&gt;定义，M:N关系使用&lt;code&gt;ManyToManyField&lt;/code&gt;处理。Pydantic模型用于数据验证和序列化，路由实现中通过&lt;code&gt;prefetch_related&lt;/code&gt;优化查询性能。M:N关系通过中间表操作，支持复杂查询。常见报错包括422验证错误和外键约束失败，可通过事务和类型检查解决。安装依赖后，使用uvicorn启动服务进行测试。</description>
    </item>
    <item>
      <title>Tortoise-ORM与FastAPI集成：异步模型定义与实践</title>
      <link>https://blog.cmdragon.cn/posts/c41e34782be5f4aa82d189539b6ae975/</link>
      <pubDate>Sun, 20 Apr 2025 11:38:23 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/c41e34782be5f4aa82d189539b6ae975/</guid>
      <description>Tortoise-ORM通过类继承方式定义数据模型，每个模型类对应数据库中的一张表。模型字段类型与数据库类型自动映射，支持主键、唯一约束、索引等配置。模型间通过外键建立关联，支持异步查询和CRUD操作。FastAPI集成时，通过&lt;code&gt;register_tortoise&lt;/code&gt;初始化数据库连接，并结合Pydantic模型实现数据验证。常见错误包括字段验证失败和数据库连接超时，可通过中间件和连接池配置解决。</description>
    </item>
    <item>
      <title>异步编程与Tortoise-ORM框架</title>
      <link>https://blog.cmdragon.cn/posts/5265d648f0fd4ea5e11af203bc59301d/</link>
      <pubDate>Sat, 19 Apr 2025 00:13:05 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/5265d648f0fd4ea5e11af203bc59301d/</guid>
      <description>异步编程通过async/await语法实现协程，单线程可处理多个并发请求，适合IO密集型场景。Tortoise-ORM专为异步设计，支持完整ORM功能和多种数据库，与Pydantic深度集成。整合FastAPI时，通过&lt;code&gt;register_tortoise&lt;/code&gt;初始化ORM，使用&lt;code&gt;in_transaction&lt;/code&gt;管理事务，确保操作原子性。常见问题包括未使用await返回协程对象和事件循环关闭错误，需通过正确的事件循环启动和事务管理解决。</description>
    </item>
  </channel>
</rss>
