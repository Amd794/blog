<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue3.x on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/Vue3.x/</link>
    <description>Recent content in Vue3.x on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 28 May 2024 15:44:47 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/Vue3.x/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>理解Vue 3响应式系统原理</title>
      <link>https://blog.cmdragon.cn/posts/12ece7efaa9c31de1f58457b847bb1ce/</link>
      <pubDate>Tue, 28 May 2024 15:44:47 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/12ece7efaa9c31de1f58457b847bb1ce/</guid>
      <description>&lt;img src=&#34;https://static.cmdragon.cn/blog/images/2024_05_28 15_46_34.png@blog&#34; title=&#34;2024_05_28 15_46_34.png&#34; alt=&#34;2024_05_28 15_46_34.png&#34;/&gt;&#xA;&lt;h2 id=&#34;第一章vue-3简介&#34;&gt;第一章：Vue 3简介&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-vue-3概述&#34;&gt;1.1 Vue 3概述&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Vue 3的诞生背景：Vue 2的局限与改进需求&lt;/li&gt;&#xA;&lt;li&gt;Vue 3的主要版本发布日期和目标：稳定性和性能的提升&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-vue-3的新特性&#34;&gt;1.2 Vue 3的新特性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;TypeScript支持&lt;/strong&gt;：引入TypeScript作为官方推荐的开发语言，增强了类型安全性和代码质量。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;SFC（Single File Component）的优化&lt;/strong&gt;：更简洁的语法，如引入模板片段、JSX支持，以及更灵活的组件结构。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Composition API&lt;/strong&gt;：取代options API，提供更模块化、可组合的组件开发方式。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ref和Reactive&lt;/strong&gt;：新的数据管理方式，ref用于直接操作原始值，而reactive用于创建响应式对象。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;虚拟DOM的优化&lt;/strong&gt;：Vue 3使用新的编译器，提升了性能，特别是在大型应用和复杂组件中的渲染速度。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;服务插槽（Slots as Functions）&lt;/strong&gt; ：提供更灵活的插槽管理，简化组件间通信。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;SSR（Server-Side Rendering）&lt;/strong&gt; ：支持更高效的服务器渲染，提升了SEO和性能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;13-vue-3的架构设计&#34;&gt;1.3 Vue 3的架构设计&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Vue 3的核心组件&lt;/strong&gt;：Vue实例、模板编译器、响应式系统的核心组成部分。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;组件化设计&lt;/strong&gt;：如何通过Composition API构建可复用、可组合的组件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;：Vue 3如何保持开放性和可扩展性，包括插件系统和第三方库的兼容性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;社区和生态系统&lt;/strong&gt;：Vue 3的社区活跃度，以及生态系统中提供的各种工具和库。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第二章响应式系统概述&#34;&gt;第二章：响应式系统概述&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-响应式系统的定义&#34;&gt;2.1 响应式系统的定义&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;响应式系统：是一种数据绑定机制，在数据模型变化时，自动更新视图。&lt;/li&gt;&#xA;&lt;li&gt;在Vue中，响应式系统基于数据劫持和发布-订阅模式实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-响应式系统的优势&#34;&gt;2.2 响应式系统的优势&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自动同步数据和视图：开发人员无需手动更新视图，提高开发效率和代码可维护性。&#xA;AD：&lt;a href=&#34;https://comic.cmdragon.cn:2087/&#34;&gt;漫画首页&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;高性能：通过数据劫持和Diff算法，在数据更新时仅更新必要的DOM元素，减少重绘和回流。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;23-vue-3响应式系统的特点&#34;&gt;2.3 Vue 3响应式系统的特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Proxy vs Object.defineProperty&lt;/strong&gt;：Vue 3使用Proxy代替Object.defineProperty，解决了Object.defineProperty的局限性，如只能监听对象的属性，而不能监听整个对象。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ref和Reactive&lt;/strong&gt;：Vue 3中，ref用于直接操作原始值，而reactive用于创建响应式对象，提供更灵活的数据管理方式。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;响应式系统的API&lt;/strong&gt;：Vue 3提供了一系列API，用于管理和操作响应式数据，如、𝑠𝑒𝑡、delete、$watch等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第三章响应式系统的实现原理&#34;&gt;第三章：响应式系统的实现原理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-数据劫持&#34;&gt;3.1 数据劫持&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据劫持是响应式系统的核心机制之一，它通过拦截对象属性的读取和设置操作，实现对数据的监控。&lt;/li&gt;&#xA;&lt;li&gt;在Vue 2中，数据劫持主要通过&lt;code&gt;Object.defineProperty&lt;/code&gt;实现，而在Vue 3中，则使用&lt;code&gt;Proxy&lt;/code&gt;对象来实现更强大的数据劫持功能。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Proxy&lt;/code&gt;可以监听对象的任何属性变化，包括新增和删除属性，而&lt;code&gt;Object.defineProperty&lt;/code&gt;只能监听已存在的属性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;32-依赖收集&#34;&gt;3.2 依赖收集&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;依赖收集是指在数据被读取时，记录哪些组件或代码依赖于该数据。这样，当数据变化时，可以精确地通知到依赖它的组件或代码。&lt;/li&gt;&#xA;&lt;li&gt;Vue使用Watcher对象来收集依赖。当组件渲染时，会创建一个Watcher实例，该实例会读取响应式数据，从而触发数据的getter，进而将Watcher添加到依赖列表中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;33-派发更新&#34;&gt;3.3 派发更新&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;派发更新是指在数据变化时，通知所有依赖该数据的Watcher进行更新。&lt;/li&gt;&#xA;&lt;li&gt;在Vue中，当数据被修改时，会触发setter，进而触发依赖列表中的所有Watcher的更新函数，使得依赖该数据的组件重新渲染。&lt;/li&gt;&#xA;&lt;li&gt;Vue 3通过引入&lt;code&gt;effect&lt;/code&gt;函数和&lt;code&gt;scheduler&lt;/code&gt;调度器，优化了派发更新的过程，可以更细粒度地控制更新时机，减少不必要的渲染。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第四章响应式系统的核心api&#34;&gt;第四章：响应式系统的核心API&lt;/h2&gt;&#xA;&lt;h3 id=&#34;41-reactive&#34;&gt;4.1 reactive&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;reactive&lt;/code&gt;函数是Vue 3中用于创建响应式对象的API。&lt;/li&gt;&#xA;&lt;li&gt;它接受一个对象作为参数，返回一个响应式的对象。&lt;/li&gt;&#xA;&lt;li&gt;响应式对象的所有属性都会被自动转换为响应式的，且可以通过&lt;code&gt;ref&lt;/code&gt;或&lt;code&gt;reactive&lt;/code&gt;创建的响应式对象是“嵌套”的，即内部的对象也是响应式的。&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;reactive&lt;/code&gt;时，推荐用于对象类型数据，尤其是当对象层次较深时。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;42-ref&#34;&gt;4.2 ref&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ref&lt;/code&gt;函数是Vue 3中用于创建响应式基本数据的API。&lt;/li&gt;&#xA;&lt;li&gt;它接受一个基本类型（如字符串、数字、布尔值等）或对象类型参数，返回一个响应式的引用对象。AD：&lt;a href=&#34;https://cmdragon.cn/&#34;&gt;首页 | 一个覆盖广泛主题工具的高效在线平台&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;响应式引用对象有一个&lt;code&gt;.value&lt;/code&gt;属性，用于访问或修改内部的数据。&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;ref&lt;/code&gt;时，推荐用于基本类型数据，尤其是当数据变化不复杂时。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;43-computed&#34;&gt;4.3 computed&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;computed&lt;/code&gt;函数是Vue 3中用于创建计算属性的API。&lt;/li&gt;&#xA;&lt;li&gt;它接受一个函数作为参数，该函数返回一个计算结果。&lt;/li&gt;&#xA;&lt;li&gt;计算属性是基于其依赖项的响应式数据自动更新的。&lt;/li&gt;&#xA;&lt;li&gt;当依赖项中的数据发生变化时，计算属性会重新计算并返回新的结果。&lt;/li&gt;&#xA;&lt;li&gt;计算属性适合用于复杂的逻辑计算和数据处理。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;44-watch&#34;&gt;4.4 watch&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;watch&lt;/code&gt;函数是Vue 3中用于侦听响应式数据变化的API。&lt;/li&gt;&#xA;&lt;li&gt;它接受一个需要侦听的数据（或计算属性）作为参数，以及一个回调函数。&lt;/li&gt;&#xA;&lt;li&gt;当侦听的数据发生变化时，回调函数会被执行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;watch&lt;/code&gt;可以用于侦听单个数据或多个数据的变化。&lt;/li&gt;&#xA;&lt;li&gt;侦听器可以提供额外的选项，如&lt;code&gt;deep&lt;/code&gt;（深度监听）、&lt;code&gt;immediate&lt;/code&gt;（立即执行回调）等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第五章响应式系统的优化&#34;&gt;第五章：响应式系统的优化&lt;/h2&gt;&#xA;&lt;h3 id=&#34;51-静态提升static-optimization&#34;&gt;5.1 静态提升（Static Optimization）&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Vue 3通过“静态提升”（SFC Shallow Rendering）来优化初始渲染性能。当组件首次渲染时，Vue 会尝试仅渲染组件的顶层模板，而不是递归渲染所有嵌套的组件。这减少了初始渲染时的DOM操作和计算，特别是对于大型组件树，能显著提升性能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;52-事件监听缓存event-listener-caching&#34;&gt;5.2 事件监听缓存（Event Listener Caching）&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Vue 通过事件监听缓存来优化事件处理。当一个组件实例创建时，它会缓存特定类型的事件处理器，而不是每次事件触发时都重新创建。这减少了事件处理函数的创建和销毁，特别是在频繁触发的事件中，可以显著减少性能开销。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;53-响应式对象的优化&#34;&gt;5.3 响应式对象的优化&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Vue 3的响应式系统对于数据的依赖跟踪和更新是高效的，但也可能存在一些优化点：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
