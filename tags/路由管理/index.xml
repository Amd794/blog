<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>路由管理 on cmdragon's Blog</title><link>/tags/%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/</link><description>Recent content in 路由管理 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 28 Jul 2024 00:18:53 +0800</lastBuildDate><atom:link href="/tags/%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 路由管理：useRouter 方法与路由中间件应用</title><link>/posts/5d18db61dc2cdd94535cb31773ea0d63/</link><pubDate>Sun, 28 Jul 2024 00:18:53 +0800</pubDate><guid>/posts/5d18db61dc2cdd94535cb31773ea0d63/</guid><description>摘要：本文介绍了Nuxt 3中useRouter方法及其在路由管理和中间件应用中的功能。内容包括使用useRouter添加、移除路由，获取路由信息，基于History API的操作，导航守卫的实现，如定义匿名、命名及全局中间件，以及使用navigateTo和abortNavigation辅助函数。同时，还涉及Promise和错误处理，最后通过一个示例展示了useRouter的常见用法。</description></item><item><title>Vue Router 4与路由管理实战</title><link>/posts/9864ca7da0f35e47de9787f07fc29d2e/</link><pubDate>Fri, 07 Jun 2024 00:18:53 +0800</pubDate><guid>/posts/9864ca7da0f35e47de9787f07fc29d2e/</guid><description>这篇文章介绍了如何在Vue.js应用中利用Vue Router实现单页面应用的路由管理，包括配置路由、导航守卫的使用、路由懒加载以优化性能以及动态路由的实现方法，旨在提升用户体验和应用加载效率</description></item><item><title>Vue.js 动态组件与异步组件</title><link>/posts/49a4391c514f2d1869c16793eafff0f0/</link><pubDate>Sun, 02 Jun 2024 09:08:50 +0800</pubDate><guid>/posts/49a4391c514f2d1869c16793eafff0f0/</guid><description>&lt;img src="https://static.cmdragon.cn/blog/images/2024_06_02 21_12_15.png@blog" title="2024_06_02 21_12_15.png" alt="2024_06_02 21_12_15.png"/>
&lt;h2 id="第1章-vuejs-简介">第1章 Vue.js 简介&lt;/h2>
&lt;h3 id="11-vuejs-概述">1.1 Vue.js 概述&lt;/h3>
&lt;p>Vue.js 是一个渐进式的JavaScript框架，用于构建用户界面。它由前谷歌工程师尤雨溪（Evan You）创建，并于2014年发布。Vue.js 的设计目标是易于上手，同时提供强大的功能来构建复杂的单页应用程序（SPA）。&lt;/p></description></item></channel></rss>