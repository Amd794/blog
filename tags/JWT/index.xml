<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JWT on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/JWT/</link><description>Recent content in JWT on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 25 Jun 2025 09:01:42 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/JWT/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI权限校验漏洞防护，你真的做对了吗？</title><link>https://blog.cmdragon.cn/posts/e4f0dd2a60b455bdcd55a1de472d67ee/</link><pubDate>Wed, 25 Jun 2025 09:01:42 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e4f0dd2a60b455bdcd55a1de472d67ee/</guid><description>FastAPI权限校验是保护API资源的关键，通过认证和授权机制确保用户访问权限。常见安全漏洞包括横向越权、SQL注入和XSS攻击，解决方案包括资源归属验证、参数化查询和安全头部配置。FastAPI通过依赖注入和OAuth2、JWT技术实现模块化权限控制，角色权限模型和权限校验依赖项确保路由安全。常见错误如401 Unauthorized、422 Validation Error和403 Forbidden，需检查令牌、参数验证和用户权限设置。最佳实践强调在后端实施资源归属检查和ORM参数化查询，防止越权和注入风险。</description></item><item><title>如何在FastAPI中玩转跨服务权限校验的魔法？</title><link>https://blog.cmdragon.cn/posts/3308559e2761ceaaa2fcbdd39fc29e18/</link><pubDate>Tue, 24 Jun 2025 08:23:40 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/3308559e2761ceaaa2fcbdd39fc29e18/</guid><description>FastAPI跨服务权限校验通过可信令牌颁发、令牌传播机制和分布式验证实现微服务架构安全。核心组件包括令牌生成服务和验证逻辑，使用JWT进行身份认证和权限控制。服务间调用通过HTTPX自动携带令牌，确保权限上下文传递。实践案例展示了电商订单流程中的跨服务操作。常见报错涉及无效签名和权限不足，建议使用短期令牌和权限枚举。进阶安全措施包括双因素令牌、请求签名和令牌绑定，增强系统安全性。</description></item><item><title>如何在FastAPI中玩转GitHub认证，让用户一键登录？</title><link>https://blog.cmdragon.cn/posts/31276c1e8ea52a75822d348032483587/</link><pubDate>Sun, 22 Jun 2025 09:11:47 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/31276c1e8ea52a75822d348032483587/</guid><description>GitHub第三方认证集成通过OAuth2.0授权码流程实现，包含用户跳转GitHub认证、获取授权码、交换访问令牌及调用API获取用户信息四个步骤。首先需在GitHub注册应用，获取CLIENT_ID和CLIENT_SECRET。使用FastAPI实现认证流程，包括初始化认证、处理回调、生成JWT令牌及验证用户。安全措施包括使用state参数防止CSRF攻击和正确配置Authorization头。常见问题如redirect_uri不匹配、invalid_state错误和JWT解码失败，需检查回调地址、state一致性和SECRET_KEY配置。</description></item><item><title>如何在FastAPI中玩转权限控制与测试，让代码安全又优雅？</title><link>https://blog.cmdragon.cn/posts/6de8fc7807cadec4d735ea5771cecf3a/</link><pubDate>Wed, 18 Jun 2025 10:11:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6de8fc7807cadec4d735ea5771cecf3a/</guid><description>FastAPI通过依赖注入系统实现权限控制，使用&lt;code>Depends()&lt;/code>函数接收权限验证依赖项，验证流程包括解析凭证、验证有效性并提取用户角色。权限层级划分为公共端点、用户级端点和管理员端点。单元测试使用&lt;code>pytest&lt;/code>验证权限逻辑，集成测试通过&lt;code>httpx&lt;/code>模拟请求。完整测试案例包括用户系统权限测试和覆盖率提升技巧。常见问题如401和403错误，解决方案包括检查请求头和用户角色分配。安全加固建议使用HTTPS、设置令牌有效期和记录审计日志。</description></item><item><title>FastAPI访问令牌的权限声明与作用域管理：你的API安全真的无懈可击吗？</title><link>https://blog.cmdragon.cn/posts/82bae833ad460aec0965cc77b7d6f652/</link><pubDate>Sun, 15 Jun 2025 06:32:07 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/82bae833ad460aec0965cc77b7d6f652/</guid><description>FastAPI中，权限声明通过JWT令牌的&lt;code>scopes&lt;/code>字段定义用户访问资源范围，如read、write、admin。使用&lt;code>OAuth2PasswordBearer&lt;/code>配置令牌获取方式和作用域说明，&lt;code>jwt&lt;/code>进行令牌编解码。通过依赖注入实现权限验证，确保用户访问特定端点时具备相应权限。常见错误包括422（缺少Authorization字段）和401（无效凭证），建议使用RSA非对称加密并定期轮换密钥。生产环境中，作用域管理可扩展至多租户系统和功能权限开关。</description></item><item><title>如何在FastAPI中构建一个既安全又灵活的多层级权限系统？</title><link>https://blog.cmdragon.cn/posts/ff1c8ff1d052374f064d802d37f2a206/</link><pubDate>Sat, 14 Jun 2025 12:43:05 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ff1c8ff1d052374f064d802d37f2a206/</guid><description>FastAPI通过依赖注入系统和OAuth2、JWT等安全方案，支持构建多层级权限系统。系统设计包括基于角色的访问控制、细粒度权限验证、权限继承机制和动态权限加载。通过定义用户角色和权限模型，结合权限验证流程，实现用户权限的动态加载和校验。路由集成示例展示了如何在API端点中应用角色和权限依赖项。高级配置技巧包括动态权限加载和缓存优化。常见错误解决方案针对HTTP 401和403错误提供了排查步骤。</description></item><item><title>FastAPI权限验证依赖项究竟藏着什么秘密？</title><link>https://blog.cmdragon.cn/posts/3e287e8b907561728ded1be34a19b22c/</link><pubDate>Thu, 12 Jun 2025 06:53:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/3e287e8b907561728ded1be34a19b22c/</guid><description>FastAPI通过依赖注入机制实现高效的权限验证，确保系统安全。核心组件包括OAuth2与JWT基础、用户认证模块，以及权限依赖项的创建。权限验证器通过JWT解码和用户角色检查，确保访问控制。实际应用中，管理员专用接口和多角色访问控制展示了权限验证的灵活性。最佳实践包括分层验证、HTTPS传输、密钥轮换和日志记录。常见报错如422、401和403，提供了详细的调试和预防措施。运行环境要求FastAPI、Pydantic等库，确保系统稳定运行。</description></item><item><title>JWT令牌如何在FastAPI中实现安全又高效的生成与验证？</title><link>https://blog.cmdragon.cn/posts/df4422756c7a081ea0f7f16c6364d8b2/</link><pubDate>Tue, 10 Jun 2025 09:02:35 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/df4422756c7a081ea0f7f16c6364d8b2/</guid><description>JWT（JSON Web Token）是一种用于安全传递声明信息的开放标准，由头部、载荷和签名三部分组成。在FastAPI中，JWT常用于用户身份认证、API授权和跨服务通信。通过&lt;code>python-jose&lt;/code>库生成和验证JWT，核心步骤包括配置安全参数、生成访问令牌、实现登录接口和验证机制。令牌生成时需设置过期时间以防止长期盗用，验证时通过中间件检查令牌的有效性。此外，可通过刷新令牌机制更新访问令牌，确保系统的安全性和用户体验。</description></item><item><title>如何在FastAPI中轻松实现OAuth2认证并保护你的API？</title><link>https://blog.cmdragon.cn/posts/d17e94efec06a517ca80d0da10c80997/</link><pubDate>Mon, 09 Jun 2025 05:16:05 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d17e94efec06a517ca80d0da10c80997/</guid><description>OAuth2 是现代应用程序实现安全认证的行业标准协议，通过令牌而非直接使用用户凭证进行授权。FastAPI 提供 &lt;code>OAuth2PasswordBearer&lt;/code> 类支持密码授权模式，流程包括用户提交凭证、服务器验证、生成访问令牌及验证令牌有效性。配置安全模块需安装依赖库并创建 &lt;code>security.py&lt;/code>，包含密码哈希、验证及 JWT 令牌生成功能。用户认证通过模拟数据库实现，提供登录接口和受保护路由。安全路由保护机制依赖 &lt;code>get_current_user&lt;/code> 函数验证令牌。进阶实践包括刷新令牌、权限分级和速率限制，遵循 OWASP 安全规范。</description></item><item><title>FastAPI安全机制：从OAuth2到JWT的魔法通关秘籍</title><link>https://blog.cmdragon.cn/posts/04b73a9a5712e6b51e8c45c35f331e59/</link><pubDate>Sat, 07 Jun 2025 08:40:35 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/04b73a9a5712e6b51e8c45c35f331e59/</guid><description>FastAPI 的安全机制基于 OAuth2 规范、JWT 和依赖注入系统三大核心组件，提供了标准化的授权框架和无状态的身份验证。OAuth2 密码流通过 &lt;code>CryptContext&lt;/code> 进行密码哈希处理，&lt;code>OAuth2PasswordBearer&lt;/code> 自动提取和验证 Bearer Token，JWT 令牌包含过期时间，确保服务端无需存储会话状态。依赖注入系统通过 &lt;code>Depends()&lt;/code> 实现身份验证逻辑的解耦。典型请求流程包括 Token 验证、JWT 解码和用户验证，确保请求的合法性。</description></item><item><title>FastAPI认证系统：从零到令牌大师的奇幻之旅</title><link>https://blog.cmdragon.cn/posts/af7583b9443a07d71b12dce459f35601/</link><pubDate>Fri, 06 Jun 2025 16:13:06 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/af7583b9443a07d71b12dce459f35601/</guid><description>FastAPI认证系统的基础架构包括用户注册、登录认证、权限验证和令牌刷新机制。实现步骤涵盖环境准备、数据库模型定义、安全工具函数、路由实现及API端点保护。通过Swagger UI可测试注册、登录和受保护端点。常见报错如422验证错误和401未授权，可通过检查请求参数和令牌有效性解决。JWT令牌由Header、Payload和Signature组成，密码存储使用哈希函数确保安全性。</description></item><item><title>FastAPI安全认证：从密码到令牌的魔法之旅</title><link>https://blog.cmdragon.cn/posts/7d79b5a5c4a3adad15117a45d7976554/</link><pubDate>Mon, 02 Jun 2025 13:24:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7d79b5a5c4a3adad15117a45d7976554/</guid><description>本章详细介绍了如何在FastAPI中实现OAuth2密码流程的认证机制。通过创建令牌端点，用户可以使用用户名和密码获取JWT访问令牌。代码示例展示了如何使用&lt;code>CryptContext&lt;/code>进行密码哈希处理，生成和验证JWT令牌，并实现安全路由保护。此外，还提供了JWT令牌的结构解析、常见报错解决方案以及安全增强建议，如使用HTTPS传输令牌和从环境变量读取密钥。最后，通过课后Quiz巩固了关键概念。</description></item><item><title>FastAPI安全门神：OAuth2PasswordBearer的奇妙冒险</title><link>https://blog.cmdragon.cn/posts/b49f9c66da662d6e3d59d594cbfdc545/</link><pubDate>Fri, 30 May 2025 18:34:14 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b49f9c66da662d6e3d59d594cbfdc545/</guid><description>FastAPI的OAuth2PasswordBearer是处理OAuth2密码授权流程的核心工具，负责从请求头提取Bearer Token、验证令牌格式有效性，并管理401未认证的自动响应。通过配置&lt;code>tokenUrl&lt;/code>和&lt;code>auto_error&lt;/code>参数，开发者可以定制认证流程。依赖注入系统支持分层解析策略，包括路由级依赖、路径操作函数参数和子依赖项。生产环境中建议使用密码哈希和JWT配置增强安全性。测试时可通过&lt;code>dependency_overrides&lt;/code>覆盖安全依赖，确保测试环境的灵活性。</description></item><item><title>FastAPI安全认证中的依赖组合</title><link>https://blog.cmdragon.cn/posts/116bd5f3dfe8c9fdee45a81e7fe75181/</link><pubDate>Sat, 12 Apr 2025 00:44:08 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/116bd5f3dfe8c9fdee45a81e7fe75181/</guid><description>FastAPI框架中，依赖注入机制用于实现安全认证体系，通过将复杂业务逻辑拆分为多个可复用的依赖项。安全认证流程包括凭证提取、令牌解析和权限校验三个关键阶段。组合依赖项设计可实现管理员操作端点的安全控制，如JWT令牌生成与验证、用户权限校验等。测试用例验证了不同权限用户的访问控制。常见错误如401、403和422，可通过检查请求头、验证令牌和匹配数据类型解决。</description></item></channel></rss>