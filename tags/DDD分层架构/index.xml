<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DDD分层架构 on cmdragon's Blog</title><link>/tags/DDD%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84/</link><description>Recent content in DDD分层架构 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 04 May 2025 00:18:53 +0800</lastBuildDate><atom:link href="/tags/DDD%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><item><title>DDD分层设计与异步职责划分：让你的代码不再“异步”混乱</title><link>/posts/56102650d57c260e04435fe72e541ee3/</link><pubDate>Sun, 04 May 2025 00:18:53 +0800</pubDate><guid>/posts/56102650d57c260e04435fe72e541ee3/</guid><description>DDD分层架构将系统分为用户接口层、应用层、领域层和基础设施层，各层职责明确。领域层处理同步业务逻辑，基础设施层负责异步数据库操作，应用层协调两者。评论模块使用pydantic定义领域模型，保持业务逻辑完整性。Tortoise-ORM实现基础设施层的异步仓储操作。应用层整合领域逻辑与基础设施的异步调用，确保事务管理策略通过原子操作实现。分层调用规则强调领域对象不包含await调用，仓储接口定义在领域层，实现在基础设施层。</description></item></channel></rss>