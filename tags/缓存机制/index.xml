<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>缓存机制 on cmdragon's Blog</title><link>/tags/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link><description>Recent content in 缓存机制 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 12 Apr 2025 00:53:48 +0800</lastBuildDate><atom:link href="/tags/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI依赖注入性能优化策略</title><link>/posts/80f30f46ece634f36b143b3a1fe6e82a/</link><pubDate>Sat, 12 Apr 2025 00:53:48 +0800</pubDate><guid>/posts/80f30f46ece634f36b143b3a1fe6e82a/</guid><description>FastAPI依赖注入机制通过将对象创建与使用分离，提升了代码的可测试性和可维护性。优化策略包括区分同步与异步依赖，异步依赖适用于I/O密集型操作；使用&lt;code>lru_cache&lt;/code>缓存依赖计算结果，减少重复计算；对数据库连接等重量级资源采用单例模式。实战案例展示了用户认证系统的优化方案，通过缓存JWT解码结果提高性能。开发环境配置和常见报错处理也提供了具体指导。</description></item><item><title>图片Base64编码解码的优缺点及应用场景分析</title><link>/posts/94cc1c4835f2d079438156f2934a1432/</link><pubDate>Sat, 24 Feb 2024 14:24:37 +0800</pubDate><guid>/posts/94cc1c4835f2d079438156f2934a1432/</guid><description>&lt;img src="../../images/2024_02_24 14_15_09.png" title="2024_02_24 14_15_09.png" alt="2024_02_24 14_15_09.png"/>
&lt;blockquote>
&lt;p>随着互联网的迅猛发展，图片在网页和移动应用中的使用越来越广泛。而图片的传输和加载往往是网页性能的瓶颈之一。
为了解决这一问题，图片Base64编码与解码技术应运而生。本文将介绍图片Base64相互转换的优缺点，
以及它可以解决的问题和适用的方面，并提供完整的JavaScript示例。&lt;/p></description></item></channel></rss>