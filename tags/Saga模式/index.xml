<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Saga模式 on cmdragon&#39;s Blog</title>
    <link>https://blog.cmdragon.cn/tags/Saga%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in Saga模式 on cmdragon&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 16 May 2025 00:58:24 +0800</lastBuildDate>
    <atom:link href="https://blog.cmdragon.cn/tags/Saga%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>驾驭FastAPI多数据库：从读写分离到跨库事务的艺术</title>
      <link>https://blog.cmdragon.cn/posts/82c823f30695c4f6a2bbd95931894efe/</link>
      <pubDate>Fri, 16 May 2025 00:58:24 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/82c823f30695c4f6a2bbd95931894efe/</guid>
      <description>在微服务架构中，FastAPI 多数据库配置管理通过独立数据存储实现隔离性、扩展性和性能优化。配置主从数据库时，使用 SQLAlchemy 创建异步引擎和会话工厂，并通过中间件实现动态数据库路由，实现读写分离。跨库事务处理采用 Saga 事务模式，确保分布式事务的一致性。以电商订单系统为例，展示了如何在 PostgreSQL、MongoDB 和 MySQL 之间进行跨库操作，并通过补偿机制处理事务失败。常见报错解决方案包括精确查询条件、正确管理会话和处理事务回滚。</description>
    </item>
    <item>
      <title>点赞背后的技术大冒险：分布式事务与SAGA模式</title>
      <link>https://blog.cmdragon.cn/posts/e586c7819314ad2cb97f35676d143adc/</link>
      <pubDate>Wed, 07 May 2025 00:12:40 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/e586c7819314ad2cb97f35676d143adc/</guid>
      <description>在微服务架构中，点赞操作涉及多个服务的数据更新，传统数据库事务在分布式系统中失效，需采用SAGA事务模式。SAGA将事务分解为多个本地事务，通过补偿机制保证最终一致性。每个操作需定义对应的补偿操作，补偿操作需幂等，并记录事务状态和实现超时机制。代码实现包括基础模型定义、事务上下文管理器和核心业务逻辑，测试验证正常和异常流程。生产环境中建议添加事务日志、实现定时补偿任务和服务降级策略。</description>
    </item>
    <item>
      <title>分布式事务在点赞功能中的实现</title>
      <link>https://blog.cmdragon.cn/posts/863390c56aa08b3d8d0f89e268352f3d/</link>
      <pubDate>Sun, 27 Apr 2025 13:01:10 +0800</pubDate>
      <guid>https://blog.cmdragon.cn/posts/863390c56aa08b3d8d0f89e268352f3d/</guid>
      <description>分布式事务在点赞功能中面临原子性、数据一致性和失败补偿的挑战。Tortoise-ORM提供基础事务和装饰器事务两种管理方式，确保数据一致性。点赞功能实现需防重复点赞和事务处理，采用唯一约束防止重复。跨服务事务处理使用Saga模式，按反向顺序执行补偿操作确保最终一致性。常见报错包括事务超时、唯一约束冲突和请求参数校验失败，需优化事务操作、使用upsert和详细响应模型解决。</description>
    </item>
  </channel>
</rss>
