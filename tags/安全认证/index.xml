<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安全认证 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/</link><description>Recent content in 安全认证 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 01 Jul 2025 04:52:07 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/index.xml" rel="self" type="application/rss+xml"/><item><title>RBAC权限模型如何让API访问控制既安全又灵活？</title><link>https://blog.cmdragon.cn/posts/9f01e838545ae8d34016c759ef461423/</link><pubDate>Tue, 01 Jul 2025 04:52:07 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9f01e838545ae8d34016c759ef461423/</guid><description>RBAC权限模型通过用户、角色和权限的关联实现访问控制，核心组件包括用户、角色、权限和API端点。数据模型使用SQLAlchemy定义，包含用户、角色、权限表及中间关联表。权限校验流程通过中间件实现，动态权限注入支持灵活路由配置。敏感操作审计日志记录用户访问信息，包括时间、端点和处理时长。常见报错如JWTDecodeError和NoneType错误，需检查令牌格式和用户处理。运行环境要求FastAPI、SQLAlchemy等，建议使用SSL加密部署。</description></item><item><title>FastAPI安全认证的终极秘籍：OAuth2与JWT如何完美融合？</title><link>https://blog.cmdragon.cn/posts/17d5c40ff6c84ad652f962fed0ce46ab/</link><pubDate>Sun, 29 Jun 2025 06:55:35 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/17d5c40ff6c84ad652f962fed0ce46ab/</guid><description>FastAPI安全与认证实战指南深入解析了OAuth2协议的核心模式，包括授权码模式、密码模式、客户端凭证模式和简化模式，并提供了相应的代码实现。文章详细探讨了JWT令牌的结构与安全增强措施，强调算法选择、有效期管理和签发者验证等最佳实践。通过OAuth2PasswordBearer的深度集成，展示了完整的认证流程与异常处理机制。此外，指南还提供了环境配置清单和进阶安全实践，如动态权限控制和密钥轮换方案，确保系统安全性与可维护性。</description></item><item><title>如何用 FastAPI 和 RBAC 打造坚不可摧的安全堡垒？</title><link>https://blog.cmdragon.cn/posts/d878b5dbef959058b8098551c70594f8/</link><pubDate>Fri, 27 Jun 2025 04:55:19 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d878b5dbef959058b8098551c70594f8/</guid><description>FastAPI 安全认证与 RBAC 系统原理基于角色的访问控制（RBAC）模型，包含用户、角色和权限三个核心要素。通过 JWT 令牌实现认证，动态权限依赖注入进行权限校验。数据模型使用 Pydantic 和 SQLAlchemy 构建，密码存储采用 bcrypt 加密，并引入请求速率限制防止暴力破解。单元测试和错误处理确保系统稳定性，JWT 令牌设置过期时间以降低泄露风险。</description></item><item><title>FastAPI安全认证：从密码到令牌的魔法之旅</title><link>https://blog.cmdragon.cn/posts/7d79b5a5c4a3adad15117a45d7976554/</link><pubDate>Mon, 02 Jun 2025 13:24:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7d79b5a5c4a3adad15117a45d7976554/</guid><description>本章详细介绍了如何在FastAPI中实现OAuth2密码流程的认证机制。通过创建令牌端点，用户可以使用用户名和密码获取JWT访问令牌。代码示例展示了如何使用&lt;code>CryptContext&lt;/code>进行密码哈希处理，生成和验证JWT令牌，并实现安全路由保护。此外，还提供了JWT令牌的结构解析、常见报错解决方案以及安全增强建议，如使用HTTPS传输令牌和从环境变量读取密钥。最后，通过课后Quiz巩固了关键概念。</description></item><item><title>FastAPI安全门神：OAuth2PasswordBearer的奇妙冒险</title><link>https://blog.cmdragon.cn/posts/b49f9c66da662d6e3d59d594cbfdc545/</link><pubDate>Fri, 30 May 2025 18:34:14 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b49f9c66da662d6e3d59d594cbfdc545/</guid><description>FastAPI的OAuth2PasswordBearer是处理OAuth2密码授权流程的核心工具，负责从请求头提取Bearer Token、验证令牌格式有效性，并管理401未认证的自动响应。通过配置&lt;code>tokenUrl&lt;/code>和&lt;code>auto_error&lt;/code>参数，开发者可以定制认证流程。依赖注入系统支持分层解析策略，包括路由级依赖、路径操作函数参数和子依赖项。生产环境中建议使用密码哈希和JWT配置增强安全性。测试时可通过&lt;code>dependency_overrides&lt;/code>覆盖安全依赖，确保测试环境的灵活性。</description></item><item><title>FastAPI安全认证中的依赖组合</title><link>https://blog.cmdragon.cn/posts/116bd5f3dfe8c9fdee45a81e7fe75181/</link><pubDate>Sat, 12 Apr 2025 00:44:08 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/116bd5f3dfe8c9fdee45a81e7fe75181/</guid><description>FastAPI框架中，依赖注入机制用于实现安全认证体系，通过将复杂业务逻辑拆分为多个可复用的依赖项。安全认证流程包括凭证提取、令牌解析和权限校验三个关键阶段。组合依赖项设计可实现管理员操作端点的安全控制，如JWT令牌生成与验证、用户权限校验等。测试用例验证了不同权限用户的访问控制。常见错误如401、403和422，可通过检查请求头、验证令牌和匹配数据类型解决。</description></item><item><title>Django RESTful API设计与实践指南</title><link>https://blog.cmdragon.cn/posts/eb1fa8383e445fbb6f0f2ff1276d4ae2/</link><pubDate>Tue, 14 May 2024 15:37:45 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/eb1fa8383e445fbb6f0f2ff1276d4ae2/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/2024_05_14 15_39_32.png" title="2024_05_14 15_39_32.png" alt="2024_05_14 15_39_32.png"/>
&lt;h2 id="第1章django基础知识">&lt;strong>第1章：Django基础知识&lt;/strong>&lt;/h2>
&lt;h3 id="11-django简介">&lt;strong>1.1 Django简介：&lt;/strong>  &lt;/h3>
&lt;p>Django是一个使用Python语言开发的开源Web应用框架，它遵循MVC（Model-View-Controller）模式，旨在帮助开发者快速构建高质量、功能强大的Web应用程序。Django具有强大的功能和丰富的功能模块，如ORM（对象关系映射）、模板引擎、表单处理、管理后台等，使得开发过程更加高效和简洁。&lt;/p></description></item><item><title>PBKDF2算法：保护密码安全的重要工具</title><link>https://blog.cmdragon.cn/posts/1326f0b7ec6e8dcd0a579c31835210b4/</link><pubDate>Tue, 30 Jan 2024 17:50:00 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1326f0b7ec6e8dcd0a579c31835210b4/</guid><description>&lt;img alt="2024_01_30 16_29_52.png" src="https://blog.cmdragon.cn/images/2024_01_30 16_29_52.png" title="2024_01_30 16_29_52.png"/>
&lt;p>摘要：在当今的数字世界中，密码安全是至关重要的。为了保护用户密码免受未经授权的访问和破解，Password-Based Key Derivation Function 2 (PBKDF2)算法成为了一种重要的工具。本文将介绍PBKDF2算法的优缺点，以及它如何解决密码存储和验证中的一些问题。我们还将提供一个使用Java编写的完整示例，以帮助读者深入了解PBKDF2算法的实际应用。&lt;/p></description></item><item><title>Hash-based Message Authentication Code（HMAC）</title><link>https://blog.cmdragon.cn/posts/93ae6fed197ff1c57645fd1217c28a0b/</link><pubDate>Sun, 21 Jan 2024 16:50:00 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/93ae6fed197ff1c57645fd1217c28a0b/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/2024_02_03 16_25_47.png" title="2024_02_03 16_25_47.png" alt="2024_02_03 16_25_47.png"/>
&lt;h2 id="一引言">一、引言&lt;/h2>
&lt;p>在现代信息安全领域，消息认证码（Message Authentication Code，简称MAC）起着至关重要的作用。Hash-based Message Authentication Code（基于哈希的MAC，简称HMAC）作为一种广泛应用的MAC算法，其性能和安全性得到了业界的认可。本文将从算法原理、优缺点、替代方案等方面，全面介绍和解释HMAC算法。&lt;/p></description></item></channel></rss>